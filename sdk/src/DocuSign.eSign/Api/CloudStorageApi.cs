/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICloudStorageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user.
        /// </summary>
        /// <remarks>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns></returns>
        CloudStorageProviders CreateProvider(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);

        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user.
        /// </summary>
        /// <remarks>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<CloudStorageProviders> CreateProviderWithHttpInfo(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);
        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <returns></returns>
        CloudStorageProviders DeleteProvider(string accountId, string userId, string serviceId);

        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<CloudStorageProviders> DeleteProviderWithHttpInfo(string accountId, string userId, string serviceId);
        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns></returns>
        CloudStorageProviders DeleteProviders(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);

        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<CloudStorageProviders> DeleteProvidersWithHttpInfo(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);
        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        CloudStorageProviders GetProvider(string accountId, string userId, string serviceId, CloudStorageApi.GetProviderOptions options = null);

        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<CloudStorageProviders> GetProviderWithHttpInfo(string accountId, string userId, string serviceId, CloudStorageApi.GetProviderOptions options = null);
        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        ExternalFolder List(string accountId, string userId, string serviceId, string folderId, CloudStorageApi.ListOptions options = null);

        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ExternalFolder> ListWithHttpInfo(string accountId, string userId, string serviceId, string folderId, CloudStorageApi.ListOptions options = null);
        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        ExternalFolder ListFolders(string accountId, string userId, string serviceId, CloudStorageApi.ListFoldersOptions options = null);

        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ExternalFolder> ListFoldersWithHttpInfo(string accountId, string userId, string serviceId, CloudStorageApi.ListFoldersOptions options = null);
        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.  The {serviceId} parameter can be either the service name or serviceId.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        CloudStorageProviders ListProviders(string accountId, string userId, CloudStorageApi.ListProvidersOptions options = null);

        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.  The {serviceId} parameter can be either the service name or serviceId.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<CloudStorageProviders> ListProvidersWithHttpInfo(string accountId, string userId, CloudStorageApi.ListProvidersOptions options = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user.
        /// </summary>
        /// <remarks>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of CloudStorageProviders</returns>
        System.Threading.Tasks.Task<CloudStorageProviders> CreateProviderAsync(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);

        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user.
        /// </summary>
        /// <remarks>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> CreateProviderAsyncWithHttpInfo(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);
        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <returns>Task of CloudStorageProviders</returns>
        System.Threading.Tasks.Task<CloudStorageProviders> DeleteProviderAsync(string accountId, string userId, string serviceId);

        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> DeleteProviderAsyncWithHttpInfo(string accountId, string userId, string serviceId);
        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of CloudStorageProviders</returns>
        System.Threading.Tasks.Task<CloudStorageProviders> DeleteProvidersAsync(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);

        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> DeleteProvidersAsyncWithHttpInfo(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);
        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of CloudStorageProviders</returns>
        System.Threading.Tasks.Task<CloudStorageProviders> GetProviderAsync(string accountId, string userId, string serviceId, CloudStorageApi.GetProviderOptions options = null);

        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> GetProviderAsyncWithHttpInfo(string accountId, string userId, string serviceId, CloudStorageApi.GetProviderOptions options = null);
        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ExternalFolder</returns>
        System.Threading.Tasks.Task<ExternalFolder> ListAsync(string accountId, string userId, string serviceId, string folderId, CloudStorageApi.ListOptions options = null);

        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (ExternalFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalFolder>> ListAsyncWithHttpInfo(string accountId, string userId, string serviceId, string folderId, CloudStorageApi.ListOptions options = null);
        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ExternalFolder</returns>
        System.Threading.Tasks.Task<ExternalFolder> ListFoldersAsync(string accountId, string userId, string serviceId, CloudStorageApi.ListFoldersOptions options = null);

        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (ExternalFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalFolder>> ListFoldersAsyncWithHttpInfo(string accountId, string userId, string serviceId, CloudStorageApi.ListFoldersOptions options = null);
        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.  The {serviceId} parameter can be either the service name or serviceId.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of CloudStorageProviders</returns>
        System.Threading.Tasks.Task<CloudStorageProviders> ListProvidersAsync(string accountId, string userId, CloudStorageApi.ListProvidersOptions options = null);

        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.  The {serviceId} parameter can be either the service name or serviceId.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> ListProvidersAsyncWithHttpInfo(string accountId, string userId, CloudStorageApi.ListProvidersOptions options = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CloudStorageApi : ICloudStorageApi
    {
        private DocuSign.eSign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudStorageApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public CloudStorageApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.eSign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>CloudStorageProviders</returns>
        public CloudStorageProviders CreateProvider(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = CreateProviderWithHttpInfo(accountId, userId, cloudStorageProviders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        public ApiResponse<CloudStorageProviders> CreateProviderWithHttpInfo(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->CreateProvider");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->CreateProvider");

            var localVarPath = "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (cloudStorageProviders != null && cloudStorageProviders.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(cloudStorageProviders); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloudStorageProviders; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CloudStorageProviders)this.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
        }

        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of CloudStorageProviders</returns>
        public async System.Threading.Tasks.Task<CloudStorageProviders> CreateProviderAsync(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = await CreateProviderAsyncWithHttpInfo(accountId, userId, cloudStorageProviders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> CreateProviderAsyncWithHttpInfo(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->CreateProvider");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->CreateProvider");

            var localVarPath = "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (cloudStorageProviders != null && cloudStorageProviders.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(cloudStorageProviders); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloudStorageProviders; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CloudStorageProviders)this.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
        }


        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider. Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <returns>CloudStorageProviders</returns>
        public CloudStorageProviders DeleteProvider(string accountId, string userId, string serviceId)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = DeleteProviderWithHttpInfo(accountId, userId, serviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider. Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        public ApiResponse<CloudStorageProviders> DeleteProviderWithHttpInfo(string accountId, string userId, string serviceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->DeleteProvider");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->DeleteProvider");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageApi->DeleteProvider");

            var localVarPath = "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", this.ApiClient.ParameterToString(serviceId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CloudStorageProviders)this.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
        }

        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider. Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <returns>Task of CloudStorageProviders</returns>
        public async System.Threading.Tasks.Task<CloudStorageProviders> DeleteProviderAsync(string accountId, string userId, string serviceId)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = await DeleteProviderAsyncWithHttpInfo(accountId, userId, serviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider. Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> DeleteProviderAsyncWithHttpInfo(string accountId, string userId, string serviceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->DeleteProvider");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->DeleteProvider");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageApi->DeleteProvider");

            var localVarPath = "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", this.ApiClient.ParameterToString(serviceId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CloudStorageProviders)this.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
        }


        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers. Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>CloudStorageProviders</returns>
        public CloudStorageProviders DeleteProviders(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = DeleteProvidersWithHttpInfo(accountId, userId, cloudStorageProviders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers. Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        public ApiResponse<CloudStorageProviders> DeleteProvidersWithHttpInfo(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->DeleteProviders");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->DeleteProviders");

            var localVarPath = "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (cloudStorageProviders != null && cloudStorageProviders.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(cloudStorageProviders); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloudStorageProviders; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CloudStorageProviders)this.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
        }

        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers. Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of CloudStorageProviders</returns>
        public async System.Threading.Tasks.Task<CloudStorageProviders> DeleteProvidersAsync(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = await DeleteProvidersAsyncWithHttpInfo(accountId, userId, cloudStorageProviders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers. Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> DeleteProvidersAsyncWithHttpInfo(string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->DeleteProviders");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->DeleteProviders");

            var localVarPath = "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (cloudStorageProviders != null && cloudStorageProviders.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(cloudStorageProviders); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloudStorageProviders; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CloudStorageProviders)this.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
        }

        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </summary>
        public class GetProviderOptions
        {
            ///  The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   
            public string redirectUrl {get; set;}
        }

        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>CloudStorageProviders</returns>
        public CloudStorageProviders GetProvider(string accountId, string userId, string serviceId, CloudStorageApi.GetProviderOptions options = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = GetProviderWithHttpInfo(accountId, userId, serviceId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        public ApiResponse<CloudStorageProviders> GetProviderWithHttpInfo(string accountId, string userId, string serviceId, CloudStorageApi.GetProviderOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->GetProvider");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->GetProvider");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageApi->GetProvider");

            var localVarPath = "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", this.ApiClient.ParameterToString(serviceId)); // path parameter
            if (options != null)
            {
                if (options.redirectUrl != null) localVarQueryParams.Add("redirectUrl", this.ApiClient.ParameterToString(options.redirectUrl)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CloudStorageProviders)this.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
        }

        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of CloudStorageProviders</returns>
        public async System.Threading.Tasks.Task<CloudStorageProviders> GetProviderAsync(string accountId, string userId, string serviceId, CloudStorageApi.GetProviderOptions options = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = await GetProviderAsyncWithHttpInfo(accountId, userId, serviceId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> GetProviderAsyncWithHttpInfo(string accountId, string userId, string serviceId, CloudStorageApi.GetProviderOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->GetProvider");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->GetProvider");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageApi->GetProvider");

            var localVarPath = "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", this.ApiClient.ParameterToString(serviceId)); // path parameter
            if (options != null)
            {
                if (options.redirectUrl != null) localVarQueryParams.Add("redirectUrl", this.ApiClient.ParameterToString(options.redirectUrl)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CloudStorageProviders)this.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
        }

        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider. Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </summary>
        public class ListOptions
        {
            /// 
            public string cloudStorageFolderPath {get; set;}
            /// 
            public string cloudStorageFolderidPlain {get; set;}
            /// An optional value that sets how many items are included in the response.   The default setting for this is 25.  
            public string count {get; set;}
            /// An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  
            public string order {get; set;}
            /// An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   
            public string orderBy {get; set;}
            /// 
            public string searchText {get; set;}
            /// 
            public string skyDriveSkipToken {get; set;}
            /// Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   
            public string startPosition {get; set;}
        }

        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider. Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ExternalFolder</returns>
        public ExternalFolder List(string accountId, string userId, string serviceId, string folderId, CloudStorageApi.ListOptions options = null)
        {
             ApiResponse<ExternalFolder> localVarResponse = ListWithHttpInfo(accountId, userId, serviceId, folderId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider. Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of ExternalFolder</returns>
        public ApiResponse<ExternalFolder> ListWithHttpInfo(string accountId, string userId, string serviceId, string folderId, CloudStorageApi.ListOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->List");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->List");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageApi->List");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling CloudStorageApi->List");

            var localVarPath = "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", this.ApiClient.ParameterToString(serviceId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", this.ApiClient.ParameterToString(folderId)); // path parameter
            if (options != null)
            {
                if (options.cloudStorageFolderPath != null) localVarQueryParams.Add("cloud_storage_folder_path", this.ApiClient.ParameterToString(options.cloudStorageFolderPath)); // query parameter
                if (options.cloudStorageFolderidPlain != null) localVarQueryParams.Add("cloud_storage_folderid_plain", this.ApiClient.ParameterToString(options.cloudStorageFolderidPlain)); // query parameter
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.order != null) localVarQueryParams.Add("order", this.ApiClient.ParameterToString(options.order)); // query parameter
                if (options.orderBy != null) localVarQueryParams.Add("order_by", this.ApiClient.ParameterToString(options.orderBy)); // query parameter
                if (options.searchText != null) localVarQueryParams.Add("search_text", this.ApiClient.ParameterToString(options.searchText)); // query parameter
                if (options.skyDriveSkipToken != null) localVarQueryParams.Add("sky_drive_skip_token", this.ApiClient.ParameterToString(options.skyDriveSkipToken)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalFolder>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (ExternalFolder)this.ApiClient.Deserialize(localVarResponse, typeof(ExternalFolder)));
        }

        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider. Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ExternalFolder</returns>
        public async System.Threading.Tasks.Task<ExternalFolder> ListAsync(string accountId, string userId, string serviceId, string folderId, CloudStorageApi.ListOptions options = null)
        {
             ApiResponse<ExternalFolder> localVarResponse = await ListAsyncWithHttpInfo(accountId, userId, serviceId, folderId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider. Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (ExternalFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalFolder>> ListAsyncWithHttpInfo(string accountId, string userId, string serviceId, string folderId, CloudStorageApi.ListOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->List");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->List");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageApi->List");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling CloudStorageApi->List");

            var localVarPath = "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", this.ApiClient.ParameterToString(serviceId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", this.ApiClient.ParameterToString(folderId)); // path parameter
            if (options != null)
            {
                if (options.cloudStorageFolderPath != null) localVarQueryParams.Add("cloud_storage_folder_path", this.ApiClient.ParameterToString(options.cloudStorageFolderPath)); // query parameter
                if (options.cloudStorageFolderidPlain != null) localVarQueryParams.Add("cloud_storage_folderid_plain", this.ApiClient.ParameterToString(options.cloudStorageFolderidPlain)); // query parameter
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.order != null) localVarQueryParams.Add("order", this.ApiClient.ParameterToString(options.order)); // query parameter
                if (options.orderBy != null) localVarQueryParams.Add("order_by", this.ApiClient.ParameterToString(options.orderBy)); // query parameter
                if (options.searchText != null) localVarQueryParams.Add("search_text", this.ApiClient.ParameterToString(options.searchText)); // query parameter
                if (options.skyDriveSkipToken != null) localVarQueryParams.Add("sky_drive_skip_token", this.ApiClient.ParameterToString(options.skyDriveSkipToken)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalFolder>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (ExternalFolder)this.ApiClient.Deserialize(localVarResponse, typeof(ExternalFolder)));
        }

        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </summary>
        public class ListFoldersOptions
        {
            /// A comma separated list of folder IDs included in the request.  
            public string cloudStorageFolderPath {get; set;}
            /// An optional value that sets how many items are included in the response.   The default setting for this is 25.  
            public string count {get; set;}
            /// An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  
            public string order {get; set;}
            /// An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   
            public string orderBy {get; set;}
            /// 
            public string searchText {get; set;}
            /// Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   
            public string startPosition {get; set;}
        }

        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ExternalFolder</returns>
        public ExternalFolder ListFolders(string accountId, string userId, string serviceId, CloudStorageApi.ListFoldersOptions options = null)
        {
             ApiResponse<ExternalFolder> localVarResponse = ListFoldersWithHttpInfo(accountId, userId, serviceId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of ExternalFolder</returns>
        public ApiResponse<ExternalFolder> ListFoldersWithHttpInfo(string accountId, string userId, string serviceId, CloudStorageApi.ListFoldersOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->ListFolders");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->ListFolders");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageApi->ListFolders");

            var localVarPath = "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", this.ApiClient.ParameterToString(serviceId)); // path parameter
            if (options != null)
            {
                if (options.cloudStorageFolderPath != null) localVarQueryParams.Add("cloud_storage_folder_path", this.ApiClient.ParameterToString(options.cloudStorageFolderPath)); // query parameter
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.order != null) localVarQueryParams.Add("order", this.ApiClient.ParameterToString(options.order)); // query parameter
                if (options.orderBy != null) localVarQueryParams.Add("order_by", this.ApiClient.ParameterToString(options.orderBy)); // query parameter
                if (options.searchText != null) localVarQueryParams.Add("search_text", this.ApiClient.ParameterToString(options.searchText)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalFolder>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (ExternalFolder)this.ApiClient.Deserialize(localVarResponse, typeof(ExternalFolder)));
        }

        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ExternalFolder</returns>
        public async System.Threading.Tasks.Task<ExternalFolder> ListFoldersAsync(string accountId, string userId, string serviceId, CloudStorageApi.ListFoldersOptions options = null)
        {
             ApiResponse<ExternalFolder> localVarResponse = await ListFoldersAsyncWithHttpInfo(accountId, userId, serviceId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (ExternalFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalFolder>> ListFoldersAsyncWithHttpInfo(string accountId, string userId, string serviceId, CloudStorageApi.ListFoldersOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->ListFolders");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->ListFolders");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageApi->ListFolders");

            var localVarPath = "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", this.ApiClient.ParameterToString(serviceId)); // path parameter
            if (options != null)
            {
                if (options.cloudStorageFolderPath != null) localVarQueryParams.Add("cloud_storage_folder_path", this.ApiClient.ParameterToString(options.cloudStorageFolderPath)); // query parameter
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.order != null) localVarQueryParams.Add("order", this.ApiClient.ParameterToString(options.order)); // query parameter
                if (options.orderBy != null) localVarQueryParams.Add("order_by", this.ApiClient.ParameterToString(options.orderBy)); // query parameter
                if (options.searchText != null) localVarQueryParams.Add("search_text", this.ApiClient.ParameterToString(options.searchText)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalFolder>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (ExternalFolder)this.ApiClient.Deserialize(localVarResponse, typeof(ExternalFolder)));
        }

        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.  The {serviceId} parameter can be either the service name or serviceId.
        /// </summary>
        public class ListProvidersOptions
        {
            ///  The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   
            public string redirectUrl {get; set;}
        }

        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.  The {serviceId} parameter can be either the service name or serviceId.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>CloudStorageProviders</returns>
        public CloudStorageProviders ListProviders(string accountId, string userId, CloudStorageApi.ListProvidersOptions options = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = ListProvidersWithHttpInfo(accountId, userId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.  The {serviceId} parameter can be either the service name or serviceId.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        public ApiResponse<CloudStorageProviders> ListProvidersWithHttpInfo(string accountId, string userId, CloudStorageApi.ListProvidersOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->ListProviders");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->ListProviders");

            var localVarPath = "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (options != null)
            {
                if (options.redirectUrl != null) localVarQueryParams.Add("redirectUrl", this.ApiClient.ParameterToString(options.redirectUrl)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CloudStorageProviders)this.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
        }

        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.  The {serviceId} parameter can be either the service name or serviceId.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of CloudStorageProviders</returns>
        public async System.Threading.Tasks.Task<CloudStorageProviders> ListProvidersAsync(string accountId, string userId, CloudStorageApi.ListProvidersOptions options = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = await ListProvidersAsyncWithHttpInfo(accountId, userId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.  The {serviceId} parameter can be either the service name or serviceId.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> ListProvidersAsyncWithHttpInfo(string accountId, string userId, CloudStorageApi.ListProvidersOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->ListProviders");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->ListProviders");

            var localVarPath = "/v2.1/accounts/{accountId}/users/{userId}/cloud_storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (options != null)
            {
                if (options.redirectUrl != null) localVarQueryParams.Add("redirectUrl", this.ApiClient.ParameterToString(options.redirectUrl)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CloudStorageProviders)this.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
        }

    }
}