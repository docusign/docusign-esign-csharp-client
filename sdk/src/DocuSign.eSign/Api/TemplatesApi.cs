/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates custom document fields in an existing template document.
        /// </summary>
        /// <remarks>
        /// Creates custom document fields in an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns></returns>
        CustomFields CreateCustomFields(string accountId, string templateId, TemplateCustomFields templateCustomFields = null);

        /// <summary>
        /// Creates custom document fields in an existing template document.
        /// </summary>
        /// <remarks>
        /// Creates custom document fields in an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<CustomFields> CreateCustomFieldsWithHttpInfo(string accountId, string templateId, TemplateCustomFields templateCustomFields = null);
        /// <summary>
        /// Creates custom document fields in an existing template document.
        /// </summary>
        /// <remarks>
        /// Creates custom document fields in an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns></returns>
        DocumentFieldsInformation CreateDocumentFields(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null);

        /// <summary>
        /// Creates custom document fields in an existing template document.
        /// </summary>
        /// <remarks>
        /// Creates custom document fields in an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DocumentFieldsInformation> CreateDocumentFieldsWithHttpInfo(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null);
        /// <summary>
        /// Provides a URL to start an edit view of the Template UI
        /// </summary>
        /// <remarks>
        /// This method returns a URL for starting an edit view of a template that uses the DocuSign Template UI.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateViewRequest"> (optional)</param>
        /// <returns></returns>
        ViewUrl CreateEditView(string accountId, string templateId, TemplateViewRequest templateViewRequest = null);

        /// <summary>
        /// Provides a URL to start an edit view of the Template UI
        /// </summary>
        /// <remarks>
        /// This method returns a URL for starting an edit view of a template that uses the DocuSign Template UI.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateViewRequest"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ViewUrl> CreateEditViewWithHttpInfo(string accountId, string templateId, TemplateViewRequest templateViewRequest = null);
        /// <summary>
        /// Lock a template.
        /// </summary>
        /// <remarks>
        /// Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns></returns>
        LockInformation CreateLock(string accountId, string templateId, LockRequest lockRequest = null);

        /// <summary>
        /// Lock a template.
        /// </summary>
        /// <remarks>
        /// Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<LockInformation> CreateLockWithHttpInfo(string accountId, string templateId, LockRequest lockRequest = null);
        /// <summary>
        /// Adds tabs for a recipient.
        /// </summary>
        /// <remarks>
        /// Adds one or more recipients to a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        Recipients CreateRecipients(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.CreateRecipientsOptions options = null);

        /// <summary>
        /// Adds tabs for a recipient.
        /// </summary>
        /// <remarks>
        /// Adds one or more recipients to a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Recipients> CreateRecipientsWithHttpInfo(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.CreateRecipientsOptions options = null);
        /// <summary>
        /// Adds tabs for a recipient.
        /// </summary>
        /// <remarks>
        /// Adds one or more tabs for a recipient.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns></returns>
        Tabs CreateTabs(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null);

        /// <summary>
        /// Adds tabs for a recipient.
        /// </summary>
        /// <remarks>
        /// Adds one or more tabs for a recipient.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Tabs> CreateTabsWithHttpInfo(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null);
        /// <summary>
        /// Creates an envelope from a template.
        /// </summary>
        /// <remarks>
        /// Creates a template definition using a multipart request.  ###Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_UserName]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_Email]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then [[&lt;roleName&gt;_UserName]] or [[&lt;roleName&gt;_Email]] is shown in the email subject.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns></returns>
        TemplateSummary CreateTemplate(string accountId, EnvelopeTemplate envelopeTemplate = null);

        /// <summary>
        /// Creates an envelope from a template.
        /// </summary>
        /// <remarks>
        /// Creates a template definition using a multipart request.  ###Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_UserName]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_Email]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then [[&lt;roleName&gt;_UserName]] or [[&lt;roleName&gt;_Email]] is shown in the email subject.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<TemplateSummary> CreateTemplateWithHttpInfo(string accountId, EnvelopeTemplate envelopeTemplate = null);
        /// <summary>
        /// Post Responsive HTML Preview for a document in a template.
        /// </summary>
        /// <remarks>
        /// Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML version of a specific template document. This method enables you to preview a PDF document conversion to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the signing document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns></returns>
        DocumentHtmlDefinitions CreateTemplateDocumentResponsiveHtmlPreview(string accountId, string templateId, string documentId, DocumentHtmlDefinition documentHtmlDefinition = null);

        /// <summary>
        /// Post Responsive HTML Preview for a document in a template.
        /// </summary>
        /// <remarks>
        /// Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML version of a specific template document. This method enables you to preview a PDF document conversion to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the signing document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DocumentHtmlDefinitions> CreateTemplateDocumentResponsiveHtmlPreviewWithHttpInfo(string accountId, string templateId, string documentId, DocumentHtmlDefinition documentHtmlDefinition = null);
        /// <summary>
        /// Adds the tabs to a tempate
        /// </summary>
        /// <remarks>
        /// Adds tabs to the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  In the request body, you only need to specify the tabs that your are adding. For example, to add a text [prefill tab](/docs/esign-rest-api/reference/templates/templatedocumenttabs/create/#definition__templatetabs_prefilltabs), your request body might look like this:  &#x60;&#x60;&#x60; {   \&quot;prefillTabs\&quot;: {     \&quot;textTabs\&quot;: [       {         \&quot;value\&quot;: \&quot;a prefill text tab\&quot;,         \&quot;pageNumber\&quot;: \&quot;1\&quot;,         \&quot;documentId\&quot;: \&quot;1\&quot;,         \&quot;xPosition\&quot;: 316,         \&quot;yPosition\&quot;: 97       }     ]   } } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns></returns>
        Tabs CreateTemplateDocumentTabs(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null);

        /// <summary>
        /// Adds the tabs to a tempate
        /// </summary>
        /// <remarks>
        /// Adds tabs to the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  In the request body, you only need to specify the tabs that your are adding. For example, to add a text [prefill tab](/docs/esign-rest-api/reference/templates/templatedocumenttabs/create/#definition__templatetabs_prefilltabs), your request body might look like this:  &#x60;&#x60;&#x60; {   \&quot;prefillTabs\&quot;: {     \&quot;textTabs\&quot;: [       {         \&quot;value\&quot;: \&quot;a prefill text tab\&quot;,         \&quot;pageNumber\&quot;: \&quot;1\&quot;,         \&quot;documentId\&quot;: \&quot;1\&quot;,         \&quot;xPosition\&quot;: 316,         \&quot;yPosition\&quot;: 97       }     ]   } } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Tabs> CreateTemplateDocumentTabsWithHttpInfo(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null);
        /// <summary>
        /// Provides a URL to start a recipient view of the Envelope UI
        /// </summary>
        /// <remarks>
        /// This method returns a URL for a template recipient preview  in the DocuSign UI that you can embed in your application. You use this method to enable the sender to preview the recipients&#39; experience.  For more information, see [Preview and Send](https://support.docusign.com/en/guides/ndse-user-guide-send-your-documents).
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientPreviewRequest"> (optional)</param>
        /// <returns></returns>
        ViewUrl CreateTemplateRecipientPreview(string accountId, string templateId, RecipientPreviewRequest recipientPreviewRequest = null);

        /// <summary>
        /// Provides a URL to start a recipient view of the Envelope UI
        /// </summary>
        /// <remarks>
        /// This method returns a URL for a template recipient preview  in the DocuSign UI that you can embed in your application. You use this method to enable the sender to preview the recipients&#39; experience.  For more information, see [Preview and Send](https://support.docusign.com/en/guides/ndse-user-guide-send-your-documents).
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientPreviewRequest"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ViewUrl> CreateTemplateRecipientPreviewWithHttpInfo(string accountId, string templateId, RecipientPreviewRequest recipientPreviewRequest = null);
        /// <summary>
        /// Get Responsive HTML Preview for all documents in a template.
        /// </summary>
        /// <remarks>
        /// Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML versions of all of the documents associated with a template. This method enables you to preview the PDF document conversions to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the documents.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns></returns>
        DocumentHtmlDefinitions CreateTemplateResponsiveHtmlPreview(string accountId, string templateId, DocumentHtmlDefinition documentHtmlDefinition = null);

        /// <summary>
        /// Get Responsive HTML Preview for all documents in a template.
        /// </summary>
        /// <remarks>
        /// Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML versions of all of the documents associated with a template. This method enables you to preview the PDF document conversions to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the documents.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DocumentHtmlDefinitions> CreateTemplateResponsiveHtmlPreviewWithHttpInfo(string accountId, string templateId, DocumentHtmlDefinition documentHtmlDefinition = null);
        /// <summary>
        /// Deletes envelope custom fields in a template.
        /// </summary>
        /// <remarks>
        /// Deletes envelope custom fields in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns></returns>
        CustomFields DeleteCustomFields(string accountId, string templateId, TemplateCustomFields templateCustomFields = null);

        /// <summary>
        /// Deletes envelope custom fields in a template.
        /// </summary>
        /// <remarks>
        /// Deletes envelope custom fields in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<CustomFields> DeleteCustomFieldsWithHttpInfo(string accountId, string templateId, TemplateCustomFields templateCustomFields = null);
        /// <summary>
        /// Deletes custom document fields from an existing template document.
        /// </summary>
        /// <remarks>
        /// Deletes custom document fields from an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns></returns>
        DocumentFieldsInformation DeleteDocumentFields(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null);

        /// <summary>
        /// Deletes custom document fields from an existing template document.
        /// </summary>
        /// <remarks>
        /// Deletes custom document fields from an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DocumentFieldsInformation> DeleteDocumentFieldsWithHttpInfo(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null);
        /// <summary>
        /// Deletes a page from a document in an template.
        /// </summary>
        /// <remarks>
        /// Deletes a page from a document in a template based on the page number.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns></returns>
        void DeleteDocumentPage(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null);

        /// <summary>
        /// Deletes a page from a document in an template.
        /// </summary>
        /// <remarks>
        /// Deletes a page from a document in a template based on the page number.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDocumentPageWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null);
        /// <summary>
        /// Deletes documents from a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents from an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns></returns>
        TemplateDocumentsResult DeleteDocuments(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Deletes documents from a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents from an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<TemplateDocumentsResult> DeleteDocumentsWithHttpInfo(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null);
        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template.
        /// </summary>
        /// <remarks>
        /// Removes a member group&#39;s sharing permissions for a specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns></returns>
        GroupInformation DeleteGroupShare(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null);

        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template.
        /// </summary>
        /// <remarks>
        /// Removes a member group&#39;s sharing permissions for a specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<GroupInformation> DeleteGroupShareWithHttpInfo(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null);
        /// <summary>
        /// Deletes a template lock.
        /// </summary>
        /// <remarks>
        /// Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns></returns>
        LockInformation DeleteLock(string accountId, string templateId, LockRequest lockRequest = null);

        /// <summary>
        /// Deletes a template lock.
        /// </summary>
        /// <remarks>
        /// Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<LockInformation> DeleteLockWithHttpInfo(string accountId, string templateId, LockRequest lockRequest = null);
        /// <summary>
        /// Deletes the specified recipient file from a template.
        /// </summary>
        /// <remarks>
        /// Deletes the specified recipient file from the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns></returns>
        Recipients DeleteRecipient(string accountId, string templateId, string recipientId, TemplateRecipients templateRecipients = null);

        /// <summary>
        /// Deletes the specified recipient file from a template.
        /// </summary>
        /// <remarks>
        /// Deletes the specified recipient file from the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Recipients> DeleteRecipientWithHttpInfo(string accountId, string templateId, string recipientId, TemplateRecipients templateRecipients = null);
        /// <summary>
        /// Deletes recipients from a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more recipients from a template. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns></returns>
        Recipients DeleteRecipients(string accountId, string templateId, TemplateRecipients templateRecipients = null);

        /// <summary>
        /// Deletes recipients from a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more recipients from a template. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Recipients> DeleteRecipientsWithHttpInfo(string accountId, string templateId, TemplateRecipients templateRecipients = null);
        /// <summary>
        /// Deletes the tabs associated with a recipient in a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more tabs associated with a recipient in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns></returns>
        Tabs DeleteTabs(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null);

        /// <summary>
        /// Deletes the tabs associated with a recipient in a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more tabs associated with a recipient in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Tabs> DeleteTabsWithHttpInfo(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null);
        /// <summary>
        /// Deletes tabs from an envelope document
        /// </summary>
        /// <remarks>
        /// Deletes tabs from the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns></returns>
        Tabs DeleteTemplateDocumentTabs(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null);

        /// <summary>
        /// Deletes tabs from an envelope document
        /// </summary>
        /// <remarks>
        /// Deletes tabs from the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Tabs> DeleteTemplateDocumentTabsWithHttpInfo(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null);
        /// <summary>
        /// Gets a list of templates for a specified account.
        /// </summary>
        /// <remarks>
        /// Retrieves the definition of the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        EnvelopeTemplate Get(string accountId, string templateId, TemplatesApi.GetOptions options = null);

        /// <summary>
        /// Gets a list of templates for a specified account.
        /// </summary>
        /// <remarks>
        /// Retrieves the definition of the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<EnvelopeTemplate> GetWithHttpInfo(string accountId, string templateId, TemplatesApi.GetOptions options = null);
        /// <summary>
        /// Gets PDF documents from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        System.IO.Stream GetDocument(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentOptions options = null);

        /// <summary>
        /// Gets PDF documents from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<System.IO.Stream> GetDocumentWithHttpInfo(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentOptions options = null);
        /// <summary>
        /// Gets a page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Retrieves a page image for display from the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        System.IO.Stream GetDocumentPageImage(string accountId, string templateId, string documentId, string pageNumber, TemplatesApi.GetDocumentPageImageOptions options = null);

        /// <summary>
        /// Gets a page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Retrieves a page image for display from the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<System.IO.Stream> GetDocumentPageImageWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber, TemplatesApi.GetDocumentPageImageOptions options = null);
        /// <summary>
        /// Returns tabs on the document.
        /// </summary>
        /// <remarks>
        /// Returns the tabs on the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        Tabs GetDocumentTabs(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentTabsOptions options = null);

        /// <summary>
        /// Returns tabs on the document.
        /// </summary>
        /// <remarks>
        /// Returns the tabs on the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Tabs> GetDocumentTabsWithHttpInfo(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentTabsOptions options = null);
        /// <summary>
        /// Gets template lock information.
        /// </summary>
        /// <remarks>
        /// Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns></returns>
        LockInformation GetLock(string accountId, string templateId);

        /// <summary>
        /// Gets template lock information.
        /// </summary>
        /// <remarks>
        /// Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<LockInformation> GetLockWithHttpInfo(string accountId, string templateId);
        /// <summary>
        /// Gets template notification information.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns></returns>
        Notification GetNotificationSettings(string accountId, string templateId);

        /// <summary>
        /// Gets template notification information.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Notification> GetNotificationSettingsWithHttpInfo(string accountId, string templateId);
        /// <summary>
        /// Returns tabs on the specified page.
        /// </summary>
        /// <remarks>
        /// Returns the tabs from the page specified by &#x60;pageNumber&#x60; of the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns></returns>
        Tabs GetPageTabs(string accountId, string templateId, string documentId, string pageNumber);

        /// <summary>
        /// Returns tabs on the specified page.
        /// </summary>
        /// <remarks>
        /// Returns the tabs from the page specified by &#x60;pageNumber&#x60; of the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Tabs> GetPageTabsWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber);
        /// <summary>
        /// Returns document page image(s) based on input.
        /// </summary>
        /// <remarks>
        /// Returns images of the pages in a template document for display based on the parameters that you specify.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        PageImages GetPages(string accountId, string templateId, string documentId, TemplatesApi.GetPagesOptions options = null);

        /// <summary>
        /// Returns document page image(s) based on input.
        /// </summary>
        /// <remarks>
        /// Returns images of the pages in a template document for display based on the parameters that you specify.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<PageImages> GetPagesWithHttpInfo(string accountId, string templateId, string documentId, TemplatesApi.GetPagesOptions options = null);
        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for a given document in a template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns></returns>
        DocumentHtmlDefinitionOriginals GetTemplateDocumentHtmlDefinitions(string accountId, string templateId, string documentId);

        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for a given document in a template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DocumentHtmlDefinitionOriginals> GetTemplateDocumentHtmlDefinitionsWithHttpInfo(string accountId, string templateId, string documentId);
        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for the template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns></returns>
        DocumentHtmlDefinitionOriginals GetTemplateHtmlDefinitions(string accountId, string templateId);

        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for the template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DocumentHtmlDefinitionOriginals> GetTemplateHtmlDefinitionsWithHttpInfo(string accountId, string templateId);
        /// <summary>
        /// Gets the custom document fields from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the custom document field information from an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns></returns>
        CustomFields ListCustomFields(string accountId, string templateId);

        /// <summary>
        /// Gets the custom document fields from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the custom document field information from an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<CustomFields> ListCustomFieldsWithHttpInfo(string accountId, string templateId);
        /// <summary>
        /// Gets the custom document fields for a an existing template document.
        /// </summary>
        /// <remarks>
        /// Retrieves the custom document fields for an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns></returns>
        DocumentFieldsInformation ListDocumentFields(string accountId, string templateId, string documentId);

        /// <summary>
        /// Gets the custom document fields for a an existing template document.
        /// </summary>
        /// <remarks>
        /// Retrieves the custom document fields for an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DocumentFieldsInformation> ListDocumentFieldsWithHttpInfo(string accountId, string templateId, string documentId);
        /// <summary>
        /// Gets a list of documents associated with a template.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of documents associated with the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        TemplateDocumentsResult ListDocuments(string accountId, string templateId, TemplatesApi.ListDocumentsOptions options = null);

        /// <summary>
        /// Gets a list of documents associated with a template.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of documents associated with the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<TemplateDocumentsResult> ListDocumentsWithHttpInfo(string accountId, string templateId, TemplatesApi.ListDocumentsOptions options = null);
        /// <summary>
        /// Gets recipient information from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the information for all recipients in the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        Recipients ListRecipients(string accountId, string templateId, TemplatesApi.ListRecipientsOptions options = null);

        /// <summary>
        /// Gets recipient information from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the information for all recipients in the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Recipients> ListRecipientsWithHttpInfo(string accountId, string templateId, TemplatesApi.ListRecipientsOptions options = null);
        /// <summary>
        /// Gets the tabs information for a signer or sign-in-person recipient in a template.
        /// </summary>
        /// <remarks>
        /// Gets the tabs information for a signer or sign-in-person recipient in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        Tabs ListTabs(string accountId, string templateId, string recipientId, TemplatesApi.ListTabsOptions options = null);

        /// <summary>
        /// Gets the tabs information for a signer or sign-in-person recipient in a template.
        /// </summary>
        /// <remarks>
        /// Gets the tabs information for a signer or sign-in-person recipient in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Tabs> ListTabsWithHttpInfo(string accountId, string templateId, string recipientId, TemplatesApi.ListTabsOptions options = null);
        /// <summary>
        /// Gets the definition of a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        EnvelopeTemplateResults ListTemplates(string accountId, TemplatesApi.ListTemplatesOptions options = null);

        /// <summary>
        /// Gets the definition of a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<EnvelopeTemplateResults> ListTemplatesWithHttpInfo(string accountId, TemplatesApi.ListTemplatesOptions options = null);
        /// <summary>
        /// Rotates page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns></returns>
        void RotateDocumentPage(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null);

        /// <summary>
        /// Rotates page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RotateDocumentPageWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null);
        /// <summary>
        /// Updates an existing template.
        /// </summary>
        /// <remarks>
        /// Updates an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns></returns>
        TemplateUpdateSummary Update(string accountId, string templateId, EnvelopeTemplate envelopeTemplate = null);

        /// <summary>
        /// Updates an existing template.
        /// </summary>
        /// <remarks>
        /// Updates an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<TemplateUpdateSummary> UpdateWithHttpInfo(string accountId, string templateId, EnvelopeTemplate envelopeTemplate = null);
        /// <summary>
        /// Updates envelope custom fields in a template.
        /// </summary>
        /// <remarks>
        /// Updates the custom fields in a template.  Each custom field used in a template must have a unique name.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns></returns>
        CustomFields UpdateCustomFields(string accountId, string templateId, TemplateCustomFields templateCustomFields = null);

        /// <summary>
        /// Updates envelope custom fields in a template.
        /// </summary>
        /// <remarks>
        /// Updates the custom fields in a template.  Each custom field used in a template must have a unique name.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<CustomFields> UpdateCustomFieldsWithHttpInfo(string accountId, string templateId, TemplateCustomFields templateCustomFields = null);
        /// <summary>
        /// Adds a document to a template document.
        /// </summary>
        /// <remarks>
        /// Adds the specified document to an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        EnvelopeDocument UpdateDocument(string accountId, string templateId, string documentId, EnvelopeDefinition envelopeDefinition = null, TemplatesApi.UpdateDocumentOptions options = null);

        /// <summary>
        /// Adds a document to a template document.
        /// </summary>
        /// <remarks>
        /// Adds the specified document to an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<EnvelopeDocument> UpdateDocumentWithHttpInfo(string accountId, string templateId, string documentId, EnvelopeDefinition envelopeDefinition = null, TemplatesApi.UpdateDocumentOptions options = null);
        /// <summary>
        /// Updates existing custom document fields in an existing template document.
        /// </summary>
        /// <remarks>
        /// Updates existing custom document fields in an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns></returns>
        DocumentFieldsInformation UpdateDocumentFields(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null);

        /// <summary>
        /// Updates existing custom document fields in an existing template document.
        /// </summary>
        /// <remarks>
        /// Updates existing custom document fields in an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DocumentFieldsInformation> UpdateDocumentFieldsWithHttpInfo(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null);
        /// <summary>
        /// Adds documents to a template document.
        /// </summary>
        /// <remarks>
        /// Adds one or more documents to an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns></returns>
        TemplateDocumentsResult UpdateDocuments(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Adds documents to a template document.
        /// </summary>
        /// <remarks>
        /// Adds one or more documents to an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<TemplateDocumentsResult> UpdateDocumentsWithHttpInfo(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null);
        /// <summary>
        /// Shares a template with a group
        /// </summary>
        /// <remarks>
        /// Shares a template with the specified members group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns></returns>
        GroupInformation UpdateGroupShare(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null);

        /// <summary>
        /// Shares a template with a group
        /// </summary>
        /// <remarks>
        /// Shares a template with the specified members group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<GroupInformation> UpdateGroupShareWithHttpInfo(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null);
        /// <summary>
        /// Updates a template lock.
        /// </summary>
        /// <remarks>
        /// Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns></returns>
        LockInformation UpdateLock(string accountId, string templateId, LockRequest lockRequest = null);

        /// <summary>
        /// Updates a template lock.
        /// </summary>
        /// <remarks>
        /// Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<LockInformation> UpdateLockWithHttpInfo(string accountId, string templateId, LockRequest lockRequest = null);
        /// <summary>
        /// Updates the notification  structure for an existing template.
        /// </summary>
        /// <remarks>
        /// Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns></returns>
        Notification UpdateNotificationSettings(string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null);

        /// <summary>
        /// Updates the notification  structure for an existing template.
        /// </summary>
        /// <remarks>
        /// Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Notification> UpdateNotificationSettingsWithHttpInfo(string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null);
        /// <summary>
        /// Updates recipients in a template.
        /// </summary>
        /// <remarks>
        /// Updates recipients in a template.   You can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        RecipientsUpdateSummary UpdateRecipients(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.UpdateRecipientsOptions options = null);

        /// <summary>
        /// Updates recipients in a template.
        /// </summary>
        /// <remarks>
        /// Updates recipients in a template.   You can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<RecipientsUpdateSummary> UpdateRecipientsWithHttpInfo(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.UpdateRecipientsOptions options = null);
        /// <summary>
        /// Updates the tabs for a recipient.
        /// </summary>
        /// <remarks>
        /// Updates one or more tabs for a recipient in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns></returns>
        Tabs UpdateTabs(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null);

        /// <summary>
        /// Updates the tabs for a recipient.
        /// </summary>
        /// <remarks>
        /// Updates one or more tabs for a recipient in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Tabs> UpdateTabsWithHttpInfo(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null);
        /// <summary>
        /// Updates the tabs for a template
        /// </summary>
        /// <remarks>
        /// Updates tabs in the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns></returns>
        Tabs UpdateTemplateDocumentTabs(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null);

        /// <summary>
        /// Updates the tabs for a template
        /// </summary>
        /// <remarks>
        /// Updates tabs in the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Tabs> UpdateTemplateDocumentTabsWithHttpInfo(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null);
        /// <summary>
        /// Update template autoMatch setting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns></returns>
        TemplateAutoMatchList UpdateTemplates(string accountId, TemplateAutoMatchList templateAutoMatchList = null);

        /// <summary>
        /// Update template autoMatch setting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<TemplateAutoMatchList> UpdateTemplatesWithHttpInfo(string accountId, TemplateAutoMatchList templateAutoMatchList = null);
        /// <summary>
        /// Update template autoMatch setting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns></returns>
        TemplateAutoMatchList UpdateTemplatesAutoMatch(string accountId, TemplateAutoMatchList templateAutoMatchList = null);

        /// <summary>
        /// Update template autoMatch setting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<TemplateAutoMatchList> UpdateTemplatesAutoMatchWithHttpInfo(string accountId, TemplateAutoMatchList templateAutoMatchList = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates custom document fields in an existing template document.
        /// </summary>
        /// <remarks>
        /// Creates custom document fields in an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>Task of CustomFields</returns>
        System.Threading.Tasks.Task<CustomFields> CreateCustomFieldsAsync(string accountId, string templateId, TemplateCustomFields templateCustomFields = null);

        /// <summary>
        /// Creates custom document fields in an existing template document.
        /// </summary>
        /// <remarks>
        /// Creates custom document fields in an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomFields)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFields>> CreateCustomFieldsAsyncWithHttpInfo(string accountId, string templateId, TemplateCustomFields templateCustomFields = null);
        /// <summary>
        /// Creates custom document fields in an existing template document.
        /// </summary>
        /// <remarks>
        /// Creates custom document fields in an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>Task of DocumentFieldsInformation</returns>
        System.Threading.Tasks.Task<DocumentFieldsInformation> CreateDocumentFieldsAsync(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null);

        /// <summary>
        /// Creates custom document fields in an existing template document.
        /// </summary>
        /// <remarks>
        /// Creates custom document fields in an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentFieldsInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldsInformation>> CreateDocumentFieldsAsyncWithHttpInfo(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null);
        /// <summary>
        /// Provides a URL to start an edit view of the Template UI
        /// </summary>
        /// <remarks>
        /// This method returns a URL for starting an edit view of a template that uses the DocuSign Template UI.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateViewRequest"> (optional)</param>
        /// <returns>Task of ViewUrl</returns>
        System.Threading.Tasks.Task<ViewUrl> CreateEditViewAsync(string accountId, string templateId, TemplateViewRequest templateViewRequest = null);

        /// <summary>
        /// Provides a URL to start an edit view of the Template UI
        /// </summary>
        /// <remarks>
        /// This method returns a URL for starting an edit view of a template that uses the DocuSign Template UI.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateViewRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (ViewUrl)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewUrl>> CreateEditViewAsyncWithHttpInfo(string accountId, string templateId, TemplateViewRequest templateViewRequest = null);
        /// <summary>
        /// Lock a template.
        /// </summary>
        /// <remarks>
        /// Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of LockInformation</returns>
        System.Threading.Tasks.Task<LockInformation> CreateLockAsync(string accountId, string templateId, LockRequest lockRequest = null);

        /// <summary>
        /// Lock a template.
        /// </summary>
        /// <remarks>
        /// Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (LockInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<LockInformation>> CreateLockAsyncWithHttpInfo(string accountId, string templateId, LockRequest lockRequest = null);
        /// <summary>
        /// Adds tabs for a recipient.
        /// </summary>
        /// <remarks>
        /// Adds one or more recipients to a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of Recipients</returns>
        System.Threading.Tasks.Task<Recipients> CreateRecipientsAsync(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.CreateRecipientsOptions options = null);

        /// <summary>
        /// Adds tabs for a recipient.
        /// </summary>
        /// <remarks>
        /// Adds one or more recipients to a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (Recipients)</returns>
        System.Threading.Tasks.Task<ApiResponse<Recipients>> CreateRecipientsAsyncWithHttpInfo(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.CreateRecipientsOptions options = null);
        /// <summary>
        /// Adds tabs for a recipient.
        /// </summary>
        /// <remarks>
        /// Adds one or more tabs for a recipient.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of Tabs</returns>
        System.Threading.Tasks.Task<Tabs> CreateTabsAsync(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null);

        /// <summary>
        /// Adds tabs for a recipient.
        /// </summary>
        /// <remarks>
        /// Adds one or more tabs for a recipient.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tabs>> CreateTabsAsyncWithHttpInfo(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null);
        /// <summary>
        /// Creates an envelope from a template.
        /// </summary>
        /// <remarks>
        /// Creates a template definition using a multipart request.  ###Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_UserName]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_Email]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then [[&lt;roleName&gt;_UserName]] or [[&lt;roleName&gt;_Email]] is shown in the email subject.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns>Task of TemplateSummary</returns>
        System.Threading.Tasks.Task<TemplateSummary> CreateTemplateAsync(string accountId, EnvelopeTemplate envelopeTemplate = null);

        /// <summary>
        /// Creates an envelope from a template.
        /// </summary>
        /// <remarks>
        /// Creates a template definition using a multipart request.  ###Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_UserName]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_Email]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then [[&lt;roleName&gt;_UserName]] or [[&lt;roleName&gt;_Email]] is shown in the email subject.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateSummary>> CreateTemplateAsyncWithHttpInfo(string accountId, EnvelopeTemplate envelopeTemplate = null);
        /// <summary>
        /// Post Responsive HTML Preview for a document in a template.
        /// </summary>
        /// <remarks>
        /// Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML version of a specific template document. This method enables you to preview a PDF document conversion to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the signing document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns>Task of DocumentHtmlDefinitions</returns>
        System.Threading.Tasks.Task<DocumentHtmlDefinitions> CreateTemplateDocumentResponsiveHtmlPreviewAsync(string accountId, string templateId, string documentId, DocumentHtmlDefinition documentHtmlDefinition = null);

        /// <summary>
        /// Post Responsive HTML Preview for a document in a template.
        /// </summary>
        /// <remarks>
        /// Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML version of a specific template document. This method enables you to preview a PDF document conversion to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the signing document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentHtmlDefinitions)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentHtmlDefinitions>> CreateTemplateDocumentResponsiveHtmlPreviewAsyncWithHttpInfo(string accountId, string templateId, string documentId, DocumentHtmlDefinition documentHtmlDefinition = null);
        /// <summary>
        /// Adds the tabs to a tempate
        /// </summary>
        /// <remarks>
        /// Adds tabs to the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  In the request body, you only need to specify the tabs that your are adding. For example, to add a text [prefill tab](/docs/esign-rest-api/reference/templates/templatedocumenttabs/create/#definition__templatetabs_prefilltabs), your request body might look like this:  &#x60;&#x60;&#x60; {   \&quot;prefillTabs\&quot;: {     \&quot;textTabs\&quot;: [       {         \&quot;value\&quot;: \&quot;a prefill text tab\&quot;,         \&quot;pageNumber\&quot;: \&quot;1\&quot;,         \&quot;documentId\&quot;: \&quot;1\&quot;,         \&quot;xPosition\&quot;: 316,         \&quot;yPosition\&quot;: 97       }     ]   } } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of Tabs</returns>
        System.Threading.Tasks.Task<Tabs> CreateTemplateDocumentTabsAsync(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null);

        /// <summary>
        /// Adds the tabs to a tempate
        /// </summary>
        /// <remarks>
        /// Adds tabs to the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  In the request body, you only need to specify the tabs that your are adding. For example, to add a text [prefill tab](/docs/esign-rest-api/reference/templates/templatedocumenttabs/create/#definition__templatetabs_prefilltabs), your request body might look like this:  &#x60;&#x60;&#x60; {   \&quot;prefillTabs\&quot;: {     \&quot;textTabs\&quot;: [       {         \&quot;value\&quot;: \&quot;a prefill text tab\&quot;,         \&quot;pageNumber\&quot;: \&quot;1\&quot;,         \&quot;documentId\&quot;: \&quot;1\&quot;,         \&quot;xPosition\&quot;: 316,         \&quot;yPosition\&quot;: 97       }     ]   } } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tabs>> CreateTemplateDocumentTabsAsyncWithHttpInfo(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null);
        /// <summary>
        /// Provides a URL to start a recipient view of the Envelope UI
        /// </summary>
        /// <remarks>
        /// This method returns a URL for a template recipient preview  in the DocuSign UI that you can embed in your application. You use this method to enable the sender to preview the recipients&#39; experience.  For more information, see [Preview and Send](https://support.docusign.com/en/guides/ndse-user-guide-send-your-documents).
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientPreviewRequest"> (optional)</param>
        /// <returns>Task of ViewUrl</returns>
        System.Threading.Tasks.Task<ViewUrl> CreateTemplateRecipientPreviewAsync(string accountId, string templateId, RecipientPreviewRequest recipientPreviewRequest = null);

        /// <summary>
        /// Provides a URL to start a recipient view of the Envelope UI
        /// </summary>
        /// <remarks>
        /// This method returns a URL for a template recipient preview  in the DocuSign UI that you can embed in your application. You use this method to enable the sender to preview the recipients&#39; experience.  For more information, see [Preview and Send](https://support.docusign.com/en/guides/ndse-user-guide-send-your-documents).
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientPreviewRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (ViewUrl)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewUrl>> CreateTemplateRecipientPreviewAsyncWithHttpInfo(string accountId, string templateId, RecipientPreviewRequest recipientPreviewRequest = null);
        /// <summary>
        /// Get Responsive HTML Preview for all documents in a template.
        /// </summary>
        /// <remarks>
        /// Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML versions of all of the documents associated with a template. This method enables you to preview the PDF document conversions to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the documents.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns>Task of DocumentHtmlDefinitions</returns>
        System.Threading.Tasks.Task<DocumentHtmlDefinitions> CreateTemplateResponsiveHtmlPreviewAsync(string accountId, string templateId, DocumentHtmlDefinition documentHtmlDefinition = null);

        /// <summary>
        /// Get Responsive HTML Preview for all documents in a template.
        /// </summary>
        /// <remarks>
        /// Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML versions of all of the documents associated with a template. This method enables you to preview the PDF document conversions to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the documents.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentHtmlDefinitions)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentHtmlDefinitions>> CreateTemplateResponsiveHtmlPreviewAsyncWithHttpInfo(string accountId, string templateId, DocumentHtmlDefinition documentHtmlDefinition = null);
        /// <summary>
        /// Deletes envelope custom fields in a template.
        /// </summary>
        /// <remarks>
        /// Deletes envelope custom fields in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>Task of CustomFields</returns>
        System.Threading.Tasks.Task<CustomFields> DeleteCustomFieldsAsync(string accountId, string templateId, TemplateCustomFields templateCustomFields = null);

        /// <summary>
        /// Deletes envelope custom fields in a template.
        /// </summary>
        /// <remarks>
        /// Deletes envelope custom fields in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomFields)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFields>> DeleteCustomFieldsAsyncWithHttpInfo(string accountId, string templateId, TemplateCustomFields templateCustomFields = null);
        /// <summary>
        /// Deletes custom document fields from an existing template document.
        /// </summary>
        /// <remarks>
        /// Deletes custom document fields from an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>Task of DocumentFieldsInformation</returns>
        System.Threading.Tasks.Task<DocumentFieldsInformation> DeleteDocumentFieldsAsync(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null);

        /// <summary>
        /// Deletes custom document fields from an existing template document.
        /// </summary>
        /// <remarks>
        /// Deletes custom document fields from an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentFieldsInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldsInformation>> DeleteDocumentFieldsAsyncWithHttpInfo(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null);
        /// <summary>
        /// Deletes a page from a document in an template.
        /// </summary>
        /// <remarks>
        /// Deletes a page from a document in a template based on the page number.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDocumentPageAsync(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null);

        /// <summary>
        /// Deletes a page from a document in an template.
        /// </summary>
        /// <remarks>
        /// Deletes a page from a document in a template based on the page number.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDocumentPageAsyncWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null);
        /// <summary>
        /// Deletes documents from a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents from an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of TemplateDocumentsResult</returns>
        System.Threading.Tasks.Task<TemplateDocumentsResult> DeleteDocumentsAsync(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Deletes documents from a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents from an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateDocumentsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateDocumentsResult>> DeleteDocumentsAsyncWithHttpInfo(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null);
        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template.
        /// </summary>
        /// <remarks>
        /// Removes a member group&#39;s sharing permissions for a specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of GroupInformation</returns>
        System.Threading.Tasks.Task<GroupInformation> DeleteGroupShareAsync(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null);

        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template.
        /// </summary>
        /// <remarks>
        /// Removes a member group&#39;s sharing permissions for a specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInformation>> DeleteGroupShareAsyncWithHttpInfo(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null);
        /// <summary>
        /// Deletes a template lock.
        /// </summary>
        /// <remarks>
        /// Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of LockInformation</returns>
        System.Threading.Tasks.Task<LockInformation> DeleteLockAsync(string accountId, string templateId, LockRequest lockRequest = null);

        /// <summary>
        /// Deletes a template lock.
        /// </summary>
        /// <remarks>
        /// Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (LockInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<LockInformation>> DeleteLockAsyncWithHttpInfo(string accountId, string templateId, LockRequest lockRequest = null);
        /// <summary>
        /// Deletes the specified recipient file from a template.
        /// </summary>
        /// <remarks>
        /// Deletes the specified recipient file from the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns>Task of Recipients</returns>
        System.Threading.Tasks.Task<Recipients> DeleteRecipientAsync(string accountId, string templateId, string recipientId, TemplateRecipients templateRecipients = null);

        /// <summary>
        /// Deletes the specified recipient file from a template.
        /// </summary>
        /// <remarks>
        /// Deletes the specified recipient file from the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns>Task of ApiResponse (Recipients)</returns>
        System.Threading.Tasks.Task<ApiResponse<Recipients>> DeleteRecipientAsyncWithHttpInfo(string accountId, string templateId, string recipientId, TemplateRecipients templateRecipients = null);
        /// <summary>
        /// Deletes recipients from a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more recipients from a template. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns>Task of Recipients</returns>
        System.Threading.Tasks.Task<Recipients> DeleteRecipientsAsync(string accountId, string templateId, TemplateRecipients templateRecipients = null);

        /// <summary>
        /// Deletes recipients from a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more recipients from a template. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns>Task of ApiResponse (Recipients)</returns>
        System.Threading.Tasks.Task<ApiResponse<Recipients>> DeleteRecipientsAsyncWithHttpInfo(string accountId, string templateId, TemplateRecipients templateRecipients = null);
        /// <summary>
        /// Deletes the tabs associated with a recipient in a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more tabs associated with a recipient in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of Tabs</returns>
        System.Threading.Tasks.Task<Tabs> DeleteTabsAsync(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null);

        /// <summary>
        /// Deletes the tabs associated with a recipient in a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more tabs associated with a recipient in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tabs>> DeleteTabsAsyncWithHttpInfo(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null);
        /// <summary>
        /// Deletes tabs from an envelope document
        /// </summary>
        /// <remarks>
        /// Deletes tabs from the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of Tabs</returns>
        System.Threading.Tasks.Task<Tabs> DeleteTemplateDocumentTabsAsync(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null);

        /// <summary>
        /// Deletes tabs from an envelope document
        /// </summary>
        /// <remarks>
        /// Deletes tabs from the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tabs>> DeleteTemplateDocumentTabsAsyncWithHttpInfo(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null);
        /// <summary>
        /// Gets a list of templates for a specified account.
        /// </summary>
        /// <remarks>
        /// Retrieves the definition of the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of EnvelopeTemplate</returns>
        System.Threading.Tasks.Task<EnvelopeTemplate> GetAsync(string accountId, string templateId, TemplatesApi.GetOptions options = null);

        /// <summary>
        /// Gets a list of templates for a specified account.
        /// </summary>
        /// <remarks>
        /// Retrieves the definition of the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (EnvelopeTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeTemplate>> GetAsyncWithHttpInfo(string accountId, string templateId, TemplatesApi.GetOptions options = null);
        /// <summary>
        /// Gets PDF documents from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDocumentAsync(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentOptions options = null);

        /// <summary>
        /// Gets PDF documents from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentAsyncWithHttpInfo(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentOptions options = null);
        /// <summary>
        /// Gets a page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Retrieves a page image for display from the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDocumentPageImageAsync(string accountId, string templateId, string documentId, string pageNumber, TemplatesApi.GetDocumentPageImageOptions options = null);

        /// <summary>
        /// Gets a page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Retrieves a page image for display from the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentPageImageAsyncWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber, TemplatesApi.GetDocumentPageImageOptions options = null);
        /// <summary>
        /// Returns tabs on the document.
        /// </summary>
        /// <remarks>
        /// Returns the tabs on the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of Tabs</returns>
        System.Threading.Tasks.Task<Tabs> GetDocumentTabsAsync(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentTabsOptions options = null);

        /// <summary>
        /// Returns tabs on the document.
        /// </summary>
        /// <remarks>
        /// Returns the tabs on the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tabs>> GetDocumentTabsAsyncWithHttpInfo(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentTabsOptions options = null);
        /// <summary>
        /// Gets template lock information.
        /// </summary>
        /// <remarks>
        /// Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of LockInformation</returns>
        System.Threading.Tasks.Task<LockInformation> GetLockAsync(string accountId, string templateId);

        /// <summary>
        /// Gets template lock information.
        /// </summary>
        /// <remarks>
        /// Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of ApiResponse (LockInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<LockInformation>> GetLockAsyncWithHttpInfo(string accountId, string templateId);
        /// <summary>
        /// Gets template notification information.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> GetNotificationSettingsAsync(string accountId, string templateId);

        /// <summary>
        /// Gets template notification information.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> GetNotificationSettingsAsyncWithHttpInfo(string accountId, string templateId);
        /// <summary>
        /// Returns tabs on the specified page.
        /// </summary>
        /// <remarks>
        /// Returns the tabs from the page specified by &#x60;pageNumber&#x60; of the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns>Task of Tabs</returns>
        System.Threading.Tasks.Task<Tabs> GetPageTabsAsync(string accountId, string templateId, string documentId, string pageNumber);

        /// <summary>
        /// Returns tabs on the specified page.
        /// </summary>
        /// <remarks>
        /// Returns the tabs from the page specified by &#x60;pageNumber&#x60; of the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tabs>> GetPageTabsAsyncWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber);
        /// <summary>
        /// Returns document page image(s) based on input.
        /// </summary>
        /// <remarks>
        /// Returns images of the pages in a template document for display based on the parameters that you specify.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of PageImages</returns>
        System.Threading.Tasks.Task<PageImages> GetPagesAsync(string accountId, string templateId, string documentId, TemplatesApi.GetPagesOptions options = null);

        /// <summary>
        /// Returns document page image(s) based on input.
        /// </summary>
        /// <remarks>
        /// Returns images of the pages in a template document for display based on the parameters that you specify.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (PageImages)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageImages>> GetPagesAsyncWithHttpInfo(string accountId, string templateId, string documentId, TemplatesApi.GetPagesOptions options = null);
        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for a given document in a template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns>Task of DocumentHtmlDefinitionOriginals</returns>
        System.Threading.Tasks.Task<DocumentHtmlDefinitionOriginals> GetTemplateDocumentHtmlDefinitionsAsync(string accountId, string templateId, string documentId);

        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for a given document in a template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns>Task of ApiResponse (DocumentHtmlDefinitionOriginals)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentHtmlDefinitionOriginals>> GetTemplateDocumentHtmlDefinitionsAsyncWithHttpInfo(string accountId, string templateId, string documentId);
        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for the template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of DocumentHtmlDefinitionOriginals</returns>
        System.Threading.Tasks.Task<DocumentHtmlDefinitionOriginals> GetTemplateHtmlDefinitionsAsync(string accountId, string templateId);

        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for the template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of ApiResponse (DocumentHtmlDefinitionOriginals)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentHtmlDefinitionOriginals>> GetTemplateHtmlDefinitionsAsyncWithHttpInfo(string accountId, string templateId);
        /// <summary>
        /// Gets the custom document fields from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the custom document field information from an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of CustomFields</returns>
        System.Threading.Tasks.Task<CustomFields> ListCustomFieldsAsync(string accountId, string templateId);

        /// <summary>
        /// Gets the custom document fields from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the custom document field information from an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of ApiResponse (CustomFields)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFields>> ListCustomFieldsAsyncWithHttpInfo(string accountId, string templateId);
        /// <summary>
        /// Gets the custom document fields for a an existing template document.
        /// </summary>
        /// <remarks>
        /// Retrieves the custom document fields for an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns>Task of DocumentFieldsInformation</returns>
        System.Threading.Tasks.Task<DocumentFieldsInformation> ListDocumentFieldsAsync(string accountId, string templateId, string documentId);

        /// <summary>
        /// Gets the custom document fields for a an existing template document.
        /// </summary>
        /// <remarks>
        /// Retrieves the custom document fields for an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns>Task of ApiResponse (DocumentFieldsInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldsInformation>> ListDocumentFieldsAsyncWithHttpInfo(string accountId, string templateId, string documentId);
        /// <summary>
        /// Gets a list of documents associated with a template.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of documents associated with the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of TemplateDocumentsResult</returns>
        System.Threading.Tasks.Task<TemplateDocumentsResult> ListDocumentsAsync(string accountId, string templateId, TemplatesApi.ListDocumentsOptions options = null);

        /// <summary>
        /// Gets a list of documents associated with a template.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of documents associated with the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (TemplateDocumentsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateDocumentsResult>> ListDocumentsAsyncWithHttpInfo(string accountId, string templateId, TemplatesApi.ListDocumentsOptions options = null);
        /// <summary>
        /// Gets recipient information from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the information for all recipients in the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of Recipients</returns>
        System.Threading.Tasks.Task<Recipients> ListRecipientsAsync(string accountId, string templateId, TemplatesApi.ListRecipientsOptions options = null);

        /// <summary>
        /// Gets recipient information from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the information for all recipients in the specified template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (Recipients)</returns>
        System.Threading.Tasks.Task<ApiResponse<Recipients>> ListRecipientsAsyncWithHttpInfo(string accountId, string templateId, TemplatesApi.ListRecipientsOptions options = null);
        /// <summary>
        /// Gets the tabs information for a signer or sign-in-person recipient in a template.
        /// </summary>
        /// <remarks>
        /// Gets the tabs information for a signer or sign-in-person recipient in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of Tabs</returns>
        System.Threading.Tasks.Task<Tabs> ListTabsAsync(string accountId, string templateId, string recipientId, TemplatesApi.ListTabsOptions options = null);

        /// <summary>
        /// Gets the tabs information for a signer or sign-in-person recipient in a template.
        /// </summary>
        /// <remarks>
        /// Gets the tabs information for a signer or sign-in-person recipient in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tabs>> ListTabsAsyncWithHttpInfo(string accountId, string templateId, string recipientId, TemplatesApi.ListTabsOptions options = null);
        /// <summary>
        /// Gets the definition of a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of EnvelopeTemplateResults</returns>
        System.Threading.Tasks.Task<EnvelopeTemplateResults> ListTemplatesAsync(string accountId, TemplatesApi.ListTemplatesOptions options = null);

        /// <summary>
        /// Gets the definition of a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (EnvelopeTemplateResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeTemplateResults>> ListTemplatesAsyncWithHttpInfo(string accountId, TemplatesApi.ListTemplatesOptions options = null);
        /// <summary>
        /// Rotates page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RotateDocumentPageAsync(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null);

        /// <summary>
        /// Rotates page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RotateDocumentPageAsyncWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null);
        /// <summary>
        /// Updates an existing template.
        /// </summary>
        /// <remarks>
        /// Updates an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns>Task of TemplateUpdateSummary</returns>
        System.Threading.Tasks.Task<TemplateUpdateSummary> UpdateAsync(string accountId, string templateId, EnvelopeTemplate envelopeTemplate = null);

        /// <summary>
        /// Updates an existing template.
        /// </summary>
        /// <remarks>
        /// Updates an existing template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateUpdateSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateUpdateSummary>> UpdateAsyncWithHttpInfo(string accountId, string templateId, EnvelopeTemplate envelopeTemplate = null);
        /// <summary>
        /// Updates envelope custom fields in a template.
        /// </summary>
        /// <remarks>
        /// Updates the custom fields in a template.  Each custom field used in a template must have a unique name.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>Task of CustomFields</returns>
        System.Threading.Tasks.Task<CustomFields> UpdateCustomFieldsAsync(string accountId, string templateId, TemplateCustomFields templateCustomFields = null);

        /// <summary>
        /// Updates envelope custom fields in a template.
        /// </summary>
        /// <remarks>
        /// Updates the custom fields in a template.  Each custom field used in a template must have a unique name.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomFields)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFields>> UpdateCustomFieldsAsyncWithHttpInfo(string accountId, string templateId, TemplateCustomFields templateCustomFields = null);
        /// <summary>
        /// Adds a document to a template document.
        /// </summary>
        /// <remarks>
        /// Adds the specified document to an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of EnvelopeDocument</returns>
        System.Threading.Tasks.Task<EnvelopeDocument> UpdateDocumentAsync(string accountId, string templateId, string documentId, EnvelopeDefinition envelopeDefinition = null, TemplatesApi.UpdateDocumentOptions options = null);

        /// <summary>
        /// Adds a document to a template document.
        /// </summary>
        /// <remarks>
        /// Adds the specified document to an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (EnvelopeDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeDocument>> UpdateDocumentAsyncWithHttpInfo(string accountId, string templateId, string documentId, EnvelopeDefinition envelopeDefinition = null, TemplatesApi.UpdateDocumentOptions options = null);
        /// <summary>
        /// Updates existing custom document fields in an existing template document.
        /// </summary>
        /// <remarks>
        /// Updates existing custom document fields in an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>Task of DocumentFieldsInformation</returns>
        System.Threading.Tasks.Task<DocumentFieldsInformation> UpdateDocumentFieldsAsync(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null);

        /// <summary>
        /// Updates existing custom document fields in an existing template document.
        /// </summary>
        /// <remarks>
        /// Updates existing custom document fields in an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentFieldsInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldsInformation>> UpdateDocumentFieldsAsyncWithHttpInfo(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null);
        /// <summary>
        /// Adds documents to a template document.
        /// </summary>
        /// <remarks>
        /// Adds one or more documents to an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of TemplateDocumentsResult</returns>
        System.Threading.Tasks.Task<TemplateDocumentsResult> UpdateDocumentsAsync(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Adds documents to a template document.
        /// </summary>
        /// <remarks>
        /// Adds one or more documents to an existing template document.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateDocumentsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateDocumentsResult>> UpdateDocumentsAsyncWithHttpInfo(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null);
        /// <summary>
        /// Shares a template with a group
        /// </summary>
        /// <remarks>
        /// Shares a template with the specified members group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of GroupInformation</returns>
        System.Threading.Tasks.Task<GroupInformation> UpdateGroupShareAsync(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null);

        /// <summary>
        /// Shares a template with a group
        /// </summary>
        /// <remarks>
        /// Shares a template with the specified members group.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInformation>> UpdateGroupShareAsyncWithHttpInfo(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null);
        /// <summary>
        /// Updates a template lock.
        /// </summary>
        /// <remarks>
        /// Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of LockInformation</returns>
        System.Threading.Tasks.Task<LockInformation> UpdateLockAsync(string accountId, string templateId, LockRequest lockRequest = null);

        /// <summary>
        /// Updates a template lock.
        /// </summary>
        /// <remarks>
        /// Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (LockInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<LockInformation>> UpdateLockAsyncWithHttpInfo(string accountId, string templateId, LockRequest lockRequest = null);
        /// <summary>
        /// Updates the notification  structure for an existing template.
        /// </summary>
        /// <remarks>
        /// Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> UpdateNotificationSettingsAsync(string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null);

        /// <summary>
        /// Updates the notification  structure for an existing template.
        /// </summary>
        /// <remarks>
        /// Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> UpdateNotificationSettingsAsyncWithHttpInfo(string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null);
        /// <summary>
        /// Updates recipients in a template.
        /// </summary>
        /// <remarks>
        /// Updates recipients in a template.   You can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of RecipientsUpdateSummary</returns>
        System.Threading.Tasks.Task<RecipientsUpdateSummary> UpdateRecipientsAsync(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.UpdateRecipientsOptions options = null);

        /// <summary>
        /// Updates recipients in a template.
        /// </summary>
        /// <remarks>
        /// Updates recipients in a template.   You can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (RecipientsUpdateSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecipientsUpdateSummary>> UpdateRecipientsAsyncWithHttpInfo(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.UpdateRecipientsOptions options = null);
        /// <summary>
        /// Updates the tabs for a recipient.
        /// </summary>
        /// <remarks>
        /// Updates one or more tabs for a recipient in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of Tabs</returns>
        System.Threading.Tasks.Task<Tabs> UpdateTabsAsync(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null);

        /// <summary>
        /// Updates the tabs for a recipient.
        /// </summary>
        /// <remarks>
        /// Updates one or more tabs for a recipient in a template.
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tabs>> UpdateTabsAsyncWithHttpInfo(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null);
        /// <summary>
        /// Updates the tabs for a template
        /// </summary>
        /// <remarks>
        /// Updates tabs in the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of Tabs</returns>
        System.Threading.Tasks.Task<Tabs> UpdateTemplateDocumentTabsAsync(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null);

        /// <summary>
        /// Updates the tabs for a template
        /// </summary>
        /// <remarks>
        /// Updates tabs in the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tabs>> UpdateTemplateDocumentTabsAsyncWithHttpInfo(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null);
        /// <summary>
        /// Update template autoMatch setting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns>Task of TemplateAutoMatchList</returns>
        System.Threading.Tasks.Task<TemplateAutoMatchList> UpdateTemplatesAsync(string accountId, TemplateAutoMatchList templateAutoMatchList = null);

        /// <summary>
        /// Update template autoMatch setting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateAutoMatchList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateAutoMatchList>> UpdateTemplatesAsyncWithHttpInfo(string accountId, TemplateAutoMatchList templateAutoMatchList = null);
        /// <summary>
        /// Update template autoMatch setting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns>Task of TemplateAutoMatchList</returns>
        System.Threading.Tasks.Task<TemplateAutoMatchList> UpdateTemplatesAutoMatchAsync(string accountId, TemplateAutoMatchList templateAutoMatchList = null);

        /// <summary>
        /// Update template autoMatch setting.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateAutoMatchList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateAutoMatchList>> UpdateTemplatesAutoMatchAsyncWithHttpInfo(string accountId, TemplateAutoMatchList templateAutoMatchList = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplatesApi : ITemplatesApi
    {
        private DocuSign.eSign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public TemplatesApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.eSign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Creates custom document fields in an existing template document. Creates custom document fields in an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>CustomFields</returns>
        public CustomFields CreateCustomFields(string accountId, string templateId, TemplateCustomFields templateCustomFields = null)
        {
             ApiResponse<CustomFields> localVarResponse = CreateCustomFieldsWithHttpInfo(accountId, templateId, templateCustomFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates custom document fields in an existing template document. Creates custom document fields in an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>ApiResponse of CustomFields</returns>
        public ApiResponse<CustomFields> CreateCustomFieldsWithHttpInfo(string accountId, string templateId, TemplateCustomFields templateCustomFields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateCustomFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateCustomFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templateCustomFields != null && templateCustomFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateCustomFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateCustomFields; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomFields>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CustomFields)this.ApiClient.Deserialize(localVarResponse, typeof(CustomFields)));
        }

        /// <summary>
        /// Creates custom document fields in an existing template document. Creates custom document fields in an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>Task of CustomFields</returns>
        public async System.Threading.Tasks.Task<CustomFields> CreateCustomFieldsAsync(string accountId, string templateId, TemplateCustomFields templateCustomFields = null)
        {
             ApiResponse<CustomFields> localVarResponse = await CreateCustomFieldsAsyncWithHttpInfo(accountId, templateId, templateCustomFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates custom document fields in an existing template document. Creates custom document fields in an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomFields)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomFields>> CreateCustomFieldsAsyncWithHttpInfo(string accountId, string templateId, TemplateCustomFields templateCustomFields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateCustomFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateCustomFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templateCustomFields != null && templateCustomFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateCustomFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateCustomFields; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomFields>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CustomFields)this.ApiClient.Deserialize(localVarResponse, typeof(CustomFields)));
        }


        /// <summary>
        /// Creates custom document fields in an existing template document. Creates custom document fields in an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>DocumentFieldsInformation</returns>
        public DocumentFieldsInformation CreateDocumentFields(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null)
        {
             ApiResponse<DocumentFieldsInformation> localVarResponse = CreateDocumentFieldsWithHttpInfo(accountId, templateId, documentId, documentFieldsInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates custom document fields in an existing template document. Creates custom document fields in an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldsInformation</returns>
        public ApiResponse<DocumentFieldsInformation> CreateDocumentFieldsWithHttpInfo(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateDocumentFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateDocumentFields");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->CreateDocumentFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (documentFieldsInformation != null && documentFieldsInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(documentFieldsInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldsInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDocumentFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldsInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentFieldsInformation)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldsInformation)));
        }

        /// <summary>
        /// Creates custom document fields in an existing template document. Creates custom document fields in an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>Task of DocumentFieldsInformation</returns>
        public async System.Threading.Tasks.Task<DocumentFieldsInformation> CreateDocumentFieldsAsync(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null)
        {
             ApiResponse<DocumentFieldsInformation> localVarResponse = await CreateDocumentFieldsAsyncWithHttpInfo(accountId, templateId, documentId, documentFieldsInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates custom document fields in an existing template document. Creates custom document fields in an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentFieldsInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldsInformation>> CreateDocumentFieldsAsyncWithHttpInfo(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateDocumentFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateDocumentFields");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->CreateDocumentFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (documentFieldsInformation != null && documentFieldsInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(documentFieldsInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldsInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDocumentFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldsInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentFieldsInformation)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldsInformation)));
        }


        /// <summary>
        /// Provides a URL to start an edit view of the Template UI This method returns a URL for starting an edit view of a template that uses the DocuSign Template UI.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateViewRequest"> (optional)</param>
        /// <returns>ViewUrl</returns>
        public ViewUrl CreateEditView(string accountId, string templateId, TemplateViewRequest templateViewRequest = null)
        {
             ApiResponse<ViewUrl> localVarResponse = CreateEditViewWithHttpInfo(accountId, templateId, templateViewRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a URL to start an edit view of the Template UI This method returns a URL for starting an edit view of a template that uses the DocuSign Template UI.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateViewRequest"> (optional)</param>
        /// <returns>ApiResponse of ViewUrl</returns>
        public ApiResponse<ViewUrl> CreateEditViewWithHttpInfo(string accountId, string templateId, TemplateViewRequest templateViewRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateEditView");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateEditView");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/views/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templateViewRequest != null && templateViewRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateViewRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateViewRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEditView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewUrl>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (ViewUrl)this.ApiClient.Deserialize(localVarResponse, typeof(ViewUrl)));
        }

        /// <summary>
        /// Provides a URL to start an edit view of the Template UI This method returns a URL for starting an edit view of a template that uses the DocuSign Template UI.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateViewRequest"> (optional)</param>
        /// <returns>Task of ViewUrl</returns>
        public async System.Threading.Tasks.Task<ViewUrl> CreateEditViewAsync(string accountId, string templateId, TemplateViewRequest templateViewRequest = null)
        {
             ApiResponse<ViewUrl> localVarResponse = await CreateEditViewAsyncWithHttpInfo(accountId, templateId, templateViewRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a URL to start an edit view of the Template UI This method returns a URL for starting an edit view of a template that uses the DocuSign Template UI.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateViewRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (ViewUrl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewUrl>> CreateEditViewAsyncWithHttpInfo(string accountId, string templateId, TemplateViewRequest templateViewRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateEditView");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateEditView");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/views/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templateViewRequest != null && templateViewRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateViewRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateViewRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEditView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewUrl>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (ViewUrl)this.ApiClient.Deserialize(localVarResponse, typeof(ViewUrl)));
        }


        /// <summary>
        /// Lock a template. Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>LockInformation</returns>
        public LockInformation CreateLock(string accountId, string templateId, LockRequest lockRequest = null)
        {
             ApiResponse<LockInformation> localVarResponse = CreateLockWithHttpInfo(accountId, templateId, lockRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lock a template. Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of LockInformation</returns>
        public ApiResponse<LockInformation> CreateLockWithHttpInfo(string accountId, string templateId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateLock");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LockInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (LockInformation)this.ApiClient.Deserialize(localVarResponse, typeof(LockInformation)));
        }

        /// <summary>
        /// Lock a template. Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of LockInformation</returns>
        public async System.Threading.Tasks.Task<LockInformation> CreateLockAsync(string accountId, string templateId, LockRequest lockRequest = null)
        {
             ApiResponse<LockInformation> localVarResponse = await CreateLockAsyncWithHttpInfo(accountId, templateId, lockRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lock a template. Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (LockInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LockInformation>> CreateLockAsyncWithHttpInfo(string accountId, string templateId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateLock");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LockInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (LockInformation)this.ApiClient.Deserialize(localVarResponse, typeof(LockInformation)));
        }

        /// <summary>
        /// Adds tabs for a recipient. Adds one or more recipients to a template.
        /// </summary>
        public class CreateRecipientsOptions
        {
            /// 
            public string resendEnvelope {get; set;}
        }

        /// <summary>
        /// Adds tabs for a recipient. Adds one or more recipients to a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Recipients</returns>
        public Recipients CreateRecipients(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.CreateRecipientsOptions options = null)
        {
             ApiResponse<Recipients> localVarResponse = CreateRecipientsWithHttpInfo(accountId, templateId, templateRecipients, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds tabs for a recipient. Adds one or more recipients to a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of Recipients</returns>
        public ApiResponse<Recipients> CreateRecipientsWithHttpInfo(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.CreateRecipientsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateRecipients");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateRecipients");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (options != null)
            {
                if (options.resendEnvelope != null) localVarQueryParams.Add("resend_envelope", this.ApiClient.ParameterToString(options.resendEnvelope)); // query parameter
            }
            if (templateRecipients != null && templateRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateRecipients; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Recipients>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Recipients)this.ApiClient.Deserialize(localVarResponse, typeof(Recipients)));
        }

        /// <summary>
        /// Adds tabs for a recipient. Adds one or more recipients to a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of Recipients</returns>
        public async System.Threading.Tasks.Task<Recipients> CreateRecipientsAsync(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.CreateRecipientsOptions options = null)
        {
             ApiResponse<Recipients> localVarResponse = await CreateRecipientsAsyncWithHttpInfo(accountId, templateId, templateRecipients, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds tabs for a recipient. Adds one or more recipients to a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (Recipients)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Recipients>> CreateRecipientsAsyncWithHttpInfo(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.CreateRecipientsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateRecipients");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateRecipients");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (options != null)
            {
                if (options.resendEnvelope != null) localVarQueryParams.Add("resend_envelope", this.ApiClient.ParameterToString(options.resendEnvelope)); // query parameter
            }
            if (templateRecipients != null && templateRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateRecipients; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Recipients>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Recipients)this.ApiClient.Deserialize(localVarResponse, typeof(Recipients)));
        }


        /// <summary>
        /// Adds tabs for a recipient. Adds one or more tabs for a recipient.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Tabs</returns>
        public Tabs CreateTabs(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null)
        {
             ApiResponse<Tabs> localVarResponse = CreateTabsWithHttpInfo(accountId, templateId, recipientId, templateTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds tabs for a recipient. Adds one or more tabs for a recipient.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>ApiResponse of Tabs</returns>
        public ApiResponse<Tabs> CreateTabsWithHttpInfo(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateTabs");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TemplatesApi->CreateTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", this.ApiClient.ParameterToString(recipientId)); // path parameter
            if (templateTabs != null && templateTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateTabs; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }

        /// <summary>
        /// Adds tabs for a recipient. Adds one or more tabs for a recipient.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of Tabs</returns>
        public async System.Threading.Tasks.Task<Tabs> CreateTabsAsync(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null)
        {
             ApiResponse<Tabs> localVarResponse = await CreateTabsAsyncWithHttpInfo(accountId, templateId, recipientId, templateTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds tabs for a recipient. Adds one or more tabs for a recipient.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tabs>> CreateTabsAsyncWithHttpInfo(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateTabs");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TemplatesApi->CreateTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", this.ApiClient.ParameterToString(recipientId)); // path parameter
            if (templateTabs != null && templateTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateTabs; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }


        /// <summary>
        /// Creates an envelope from a template. Creates a template definition using a multipart request.  ###Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_UserName]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_Email]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then [[&lt;roleName&gt;_UserName]] or [[&lt;roleName&gt;_Email]] is shown in the email subject.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns>TemplateSummary</returns>
        public TemplateSummary CreateTemplate(string accountId, EnvelopeTemplate envelopeTemplate = null)
        {
             ApiResponse<TemplateSummary> localVarResponse = CreateTemplateWithHttpInfo(accountId, envelopeTemplate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an envelope from a template. Creates a template definition using a multipart request.  ###Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_UserName]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_Email]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then [[&lt;roleName&gt;_UserName]] or [[&lt;roleName&gt;_Email]] is shown in the email subject.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns>ApiResponse of TemplateSummary</returns>
        public ApiResponse<TemplateSummary> CreateTemplateWithHttpInfo(string accountId, EnvelopeTemplate envelopeTemplate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateTemplate");

            var localVarPath = "/v2.1/accounts/{accountId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeTemplate != null && envelopeTemplate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(envelopeTemplate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeTemplate; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateSummary>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (TemplateSummary)this.ApiClient.Deserialize(localVarResponse, typeof(TemplateSummary)));
        }

        /// <summary>
        /// Creates an envelope from a template. Creates a template definition using a multipart request.  ###Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_UserName]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_Email]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then [[&lt;roleName&gt;_UserName]] or [[&lt;roleName&gt;_Email]] is shown in the email subject.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns>Task of TemplateSummary</returns>
        public async System.Threading.Tasks.Task<TemplateSummary> CreateTemplateAsync(string accountId, EnvelopeTemplate envelopeTemplate = null)
        {
             ApiResponse<TemplateSummary> localVarResponse = await CreateTemplateAsyncWithHttpInfo(accountId, envelopeTemplate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an envelope from a template. Creates a template definition using a multipart request.  ###Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_UserName]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  [[&lt;roleName&gt;_Email]]  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then [[&lt;roleName&gt;_UserName]] or [[&lt;roleName&gt;_Email]] is shown in the email subject.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateSummary>> CreateTemplateAsyncWithHttpInfo(string accountId, EnvelopeTemplate envelopeTemplate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateTemplate");

            var localVarPath = "/v2.1/accounts/{accountId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeTemplate != null && envelopeTemplate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(envelopeTemplate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeTemplate; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateSummary>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (TemplateSummary)this.ApiClient.Deserialize(localVarResponse, typeof(TemplateSummary)));
        }


        /// <summary>
        /// Post Responsive HTML Preview for a document in a template. Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML version of a specific template document. This method enables you to preview a PDF document conversion to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the signing document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns>DocumentHtmlDefinitions</returns>
        public DocumentHtmlDefinitions CreateTemplateDocumentResponsiveHtmlPreview(string accountId, string templateId, string documentId, DocumentHtmlDefinition documentHtmlDefinition = null)
        {
             ApiResponse<DocumentHtmlDefinitions> localVarResponse = CreateTemplateDocumentResponsiveHtmlPreviewWithHttpInfo(accountId, templateId, documentId, documentHtmlDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Responsive HTML Preview for a document in a template. Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML version of a specific template document. This method enables you to preview a PDF document conversion to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the signing document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns>ApiResponse of DocumentHtmlDefinitions</returns>
        public ApiResponse<DocumentHtmlDefinitions> CreateTemplateDocumentResponsiveHtmlPreviewWithHttpInfo(string accountId, string templateId, string documentId, DocumentHtmlDefinition documentHtmlDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateTemplateDocumentResponsiveHtmlPreview");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateTemplateDocumentResponsiveHtmlPreview");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->CreateTemplateDocumentResponsiveHtmlPreview");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/responsive_html_preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (documentHtmlDefinition != null && documentHtmlDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(documentHtmlDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentHtmlDefinition; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateDocumentResponsiveHtmlPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentHtmlDefinitions>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentHtmlDefinitions)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentHtmlDefinitions)));
        }

        /// <summary>
        /// Post Responsive HTML Preview for a document in a template. Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML version of a specific template document. This method enables you to preview a PDF document conversion to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the signing document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns>Task of DocumentHtmlDefinitions</returns>
        public async System.Threading.Tasks.Task<DocumentHtmlDefinitions> CreateTemplateDocumentResponsiveHtmlPreviewAsync(string accountId, string templateId, string documentId, DocumentHtmlDefinition documentHtmlDefinition = null)
        {
             ApiResponse<DocumentHtmlDefinitions> localVarResponse = await CreateTemplateDocumentResponsiveHtmlPreviewAsyncWithHttpInfo(accountId, templateId, documentId, documentHtmlDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Responsive HTML Preview for a document in a template. Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML version of a specific template document. This method enables you to preview a PDF document conversion to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the signing document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentHtmlDefinitions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentHtmlDefinitions>> CreateTemplateDocumentResponsiveHtmlPreviewAsyncWithHttpInfo(string accountId, string templateId, string documentId, DocumentHtmlDefinition documentHtmlDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateTemplateDocumentResponsiveHtmlPreview");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateTemplateDocumentResponsiveHtmlPreview");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->CreateTemplateDocumentResponsiveHtmlPreview");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/responsive_html_preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (documentHtmlDefinition != null && documentHtmlDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(documentHtmlDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentHtmlDefinition; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateDocumentResponsiveHtmlPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentHtmlDefinitions>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentHtmlDefinitions)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentHtmlDefinitions)));
        }


        /// <summary>
        /// Adds the tabs to a tempate Adds tabs to the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  In the request body, you only need to specify the tabs that your are adding. For example, to add a text [prefill tab](/docs/esign-rest-api/reference/templates/templatedocumenttabs/create/#definition__templatetabs_prefilltabs), your request body might look like this:  &#x60;&#x60;&#x60; {   \&quot;prefillTabs\&quot;: {     \&quot;textTabs\&quot;: [       {         \&quot;value\&quot;: \&quot;a prefill text tab\&quot;,         \&quot;pageNumber\&quot;: \&quot;1\&quot;,         \&quot;documentId\&quot;: \&quot;1\&quot;,         \&quot;xPosition\&quot;: 316,         \&quot;yPosition\&quot;: 97       }     ]   } } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Tabs</returns>
        public Tabs CreateTemplateDocumentTabs(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null)
        {
             ApiResponse<Tabs> localVarResponse = CreateTemplateDocumentTabsWithHttpInfo(accountId, templateId, documentId, templateTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds the tabs to a tempate Adds tabs to the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  In the request body, you only need to specify the tabs that your are adding. For example, to add a text [prefill tab](/docs/esign-rest-api/reference/templates/templatedocumenttabs/create/#definition__templatetabs_prefilltabs), your request body might look like this:  &#x60;&#x60;&#x60; {   \&quot;prefillTabs\&quot;: {     \&quot;textTabs\&quot;: [       {         \&quot;value\&quot;: \&quot;a prefill text tab\&quot;,         \&quot;pageNumber\&quot;: \&quot;1\&quot;,         \&quot;documentId\&quot;: \&quot;1\&quot;,         \&quot;xPosition\&quot;: 316,         \&quot;yPosition\&quot;: 97       }     ]   } } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>ApiResponse of Tabs</returns>
        public ApiResponse<Tabs> CreateTemplateDocumentTabsWithHttpInfo(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateTemplateDocumentTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateTemplateDocumentTabs");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->CreateTemplateDocumentTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (templateTabs != null && templateTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateTabs; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateDocumentTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }

        /// <summary>
        /// Adds the tabs to a tempate Adds tabs to the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  In the request body, you only need to specify the tabs that your are adding. For example, to add a text [prefill tab](/docs/esign-rest-api/reference/templates/templatedocumenttabs/create/#definition__templatetabs_prefilltabs), your request body might look like this:  &#x60;&#x60;&#x60; {   \&quot;prefillTabs\&quot;: {     \&quot;textTabs\&quot;: [       {         \&quot;value\&quot;: \&quot;a prefill text tab\&quot;,         \&quot;pageNumber\&quot;: \&quot;1\&quot;,         \&quot;documentId\&quot;: \&quot;1\&quot;,         \&quot;xPosition\&quot;: 316,         \&quot;yPosition\&quot;: 97       }     ]   } } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of Tabs</returns>
        public async System.Threading.Tasks.Task<Tabs> CreateTemplateDocumentTabsAsync(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null)
        {
             ApiResponse<Tabs> localVarResponse = await CreateTemplateDocumentTabsAsyncWithHttpInfo(accountId, templateId, documentId, templateTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds the tabs to a tempate Adds tabs to the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  In the request body, you only need to specify the tabs that your are adding. For example, to add a text [prefill tab](/docs/esign-rest-api/reference/templates/templatedocumenttabs/create/#definition__templatetabs_prefilltabs), your request body might look like this:  &#x60;&#x60;&#x60; {   \&quot;prefillTabs\&quot;: {     \&quot;textTabs\&quot;: [       {         \&quot;value\&quot;: \&quot;a prefill text tab\&quot;,         \&quot;pageNumber\&quot;: \&quot;1\&quot;,         \&quot;documentId\&quot;: \&quot;1\&quot;,         \&quot;xPosition\&quot;: 316,         \&quot;yPosition\&quot;: 97       }     ]   } } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tabs>> CreateTemplateDocumentTabsAsyncWithHttpInfo(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateTemplateDocumentTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateTemplateDocumentTabs");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->CreateTemplateDocumentTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (templateTabs != null && templateTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateTabs; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateDocumentTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }


        /// <summary>
        /// Provides a URL to start a recipient view of the Envelope UI This method returns a URL for a template recipient preview  in the DocuSign UI that you can embed in your application. You use this method to enable the sender to preview the recipients&#39; experience.  For more information, see [Preview and Send](https://support.docusign.com/en/guides/ndse-user-guide-send-your-documents).
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientPreviewRequest"> (optional)</param>
        /// <returns>ViewUrl</returns>
        public ViewUrl CreateTemplateRecipientPreview(string accountId, string templateId, RecipientPreviewRequest recipientPreviewRequest = null)
        {
             ApiResponse<ViewUrl> localVarResponse = CreateTemplateRecipientPreviewWithHttpInfo(accountId, templateId, recipientPreviewRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a URL to start a recipient view of the Envelope UI This method returns a URL for a template recipient preview  in the DocuSign UI that you can embed in your application. You use this method to enable the sender to preview the recipients&#39; experience.  For more information, see [Preview and Send](https://support.docusign.com/en/guides/ndse-user-guide-send-your-documents).
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientPreviewRequest"> (optional)</param>
        /// <returns>ApiResponse of ViewUrl</returns>
        public ApiResponse<ViewUrl> CreateTemplateRecipientPreviewWithHttpInfo(string accountId, string templateId, RecipientPreviewRequest recipientPreviewRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateTemplateRecipientPreview");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateTemplateRecipientPreview");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/views/recipient_preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (recipientPreviewRequest != null && recipientPreviewRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(recipientPreviewRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = recipientPreviewRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateRecipientPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewUrl>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (ViewUrl)this.ApiClient.Deserialize(localVarResponse, typeof(ViewUrl)));
        }

        /// <summary>
        /// Provides a URL to start a recipient view of the Envelope UI This method returns a URL for a template recipient preview  in the DocuSign UI that you can embed in your application. You use this method to enable the sender to preview the recipients&#39; experience.  For more information, see [Preview and Send](https://support.docusign.com/en/guides/ndse-user-guide-send-your-documents).
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientPreviewRequest"> (optional)</param>
        /// <returns>Task of ViewUrl</returns>
        public async System.Threading.Tasks.Task<ViewUrl> CreateTemplateRecipientPreviewAsync(string accountId, string templateId, RecipientPreviewRequest recipientPreviewRequest = null)
        {
             ApiResponse<ViewUrl> localVarResponse = await CreateTemplateRecipientPreviewAsyncWithHttpInfo(accountId, templateId, recipientPreviewRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a URL to start a recipient view of the Envelope UI This method returns a URL for a template recipient preview  in the DocuSign UI that you can embed in your application. You use this method to enable the sender to preview the recipients&#39; experience.  For more information, see [Preview and Send](https://support.docusign.com/en/guides/ndse-user-guide-send-your-documents).
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientPreviewRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (ViewUrl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewUrl>> CreateTemplateRecipientPreviewAsyncWithHttpInfo(string accountId, string templateId, RecipientPreviewRequest recipientPreviewRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateTemplateRecipientPreview");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateTemplateRecipientPreview");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/views/recipient_preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (recipientPreviewRequest != null && recipientPreviewRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(recipientPreviewRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = recipientPreviewRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateRecipientPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewUrl>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (ViewUrl)this.ApiClient.Deserialize(localVarResponse, typeof(ViewUrl)));
        }


        /// <summary>
        /// Get Responsive HTML Preview for all documents in a template. Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML versions of all of the documents associated with a template. This method enables you to preview the PDF document conversions to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the documents.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns>DocumentHtmlDefinitions</returns>
        public DocumentHtmlDefinitions CreateTemplateResponsiveHtmlPreview(string accountId, string templateId, DocumentHtmlDefinition documentHtmlDefinition = null)
        {
             ApiResponse<DocumentHtmlDefinitions> localVarResponse = CreateTemplateResponsiveHtmlPreviewWithHttpInfo(accountId, templateId, documentHtmlDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Responsive HTML Preview for all documents in a template. Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML versions of all of the documents associated with a template. This method enables you to preview the PDF document conversions to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the documents.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns>ApiResponse of DocumentHtmlDefinitions</returns>
        public ApiResponse<DocumentHtmlDefinitions> CreateTemplateResponsiveHtmlPreviewWithHttpInfo(string accountId, string templateId, DocumentHtmlDefinition documentHtmlDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateTemplateResponsiveHtmlPreview");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateTemplateResponsiveHtmlPreview");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/responsive_html_preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentHtmlDefinition != null && documentHtmlDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(documentHtmlDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentHtmlDefinition; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateResponsiveHtmlPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentHtmlDefinitions>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentHtmlDefinitions)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentHtmlDefinitions)));
        }

        /// <summary>
        /// Get Responsive HTML Preview for all documents in a template. Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML versions of all of the documents associated with a template. This method enables you to preview the PDF document conversions to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the documents.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns>Task of DocumentHtmlDefinitions</returns>
        public async System.Threading.Tasks.Task<DocumentHtmlDefinitions> CreateTemplateResponsiveHtmlPreviewAsync(string accountId, string templateId, DocumentHtmlDefinition documentHtmlDefinition = null)
        {
             ApiResponse<DocumentHtmlDefinitions> localVarResponse = await CreateTemplateResponsiveHtmlPreviewAsyncWithHttpInfo(accountId, templateId, documentHtmlDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Responsive HTML Preview for all documents in a template. Creates a preview of the [responsive](/docs/esign-rest-api/esign101/concepts/responsive/), HTML versions of all of the documents associated with a template. This method enables you to preview the PDF document conversions to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the documents.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentHtmlDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentHtmlDefinitions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentHtmlDefinitions>> CreateTemplateResponsiveHtmlPreviewAsyncWithHttpInfo(string accountId, string templateId, DocumentHtmlDefinition documentHtmlDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->CreateTemplateResponsiveHtmlPreview");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->CreateTemplateResponsiveHtmlPreview");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/responsive_html_preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentHtmlDefinition != null && documentHtmlDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(documentHtmlDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentHtmlDefinition; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateResponsiveHtmlPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentHtmlDefinitions>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentHtmlDefinitions)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentHtmlDefinitions)));
        }


        /// <summary>
        /// Deletes envelope custom fields in a template. Deletes envelope custom fields in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>CustomFields</returns>
        public CustomFields DeleteCustomFields(string accountId, string templateId, TemplateCustomFields templateCustomFields = null)
        {
             ApiResponse<CustomFields> localVarResponse = DeleteCustomFieldsWithHttpInfo(accountId, templateId, templateCustomFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes envelope custom fields in a template. Deletes envelope custom fields in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>ApiResponse of CustomFields</returns>
        public ApiResponse<CustomFields> DeleteCustomFieldsWithHttpInfo(string accountId, string templateId, TemplateCustomFields templateCustomFields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteCustomFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteCustomFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templateCustomFields != null && templateCustomFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateCustomFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateCustomFields; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomFields>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CustomFields)this.ApiClient.Deserialize(localVarResponse, typeof(CustomFields)));
        }

        /// <summary>
        /// Deletes envelope custom fields in a template. Deletes envelope custom fields in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>Task of CustomFields</returns>
        public async System.Threading.Tasks.Task<CustomFields> DeleteCustomFieldsAsync(string accountId, string templateId, TemplateCustomFields templateCustomFields = null)
        {
             ApiResponse<CustomFields> localVarResponse = await DeleteCustomFieldsAsyncWithHttpInfo(accountId, templateId, templateCustomFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes envelope custom fields in a template. Deletes envelope custom fields in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomFields)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomFields>> DeleteCustomFieldsAsyncWithHttpInfo(string accountId, string templateId, TemplateCustomFields templateCustomFields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteCustomFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteCustomFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templateCustomFields != null && templateCustomFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateCustomFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateCustomFields; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomFields>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CustomFields)this.ApiClient.Deserialize(localVarResponse, typeof(CustomFields)));
        }


        /// <summary>
        /// Deletes custom document fields from an existing template document. Deletes custom document fields from an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>DocumentFieldsInformation</returns>
        public DocumentFieldsInformation DeleteDocumentFields(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null)
        {
             ApiResponse<DocumentFieldsInformation> localVarResponse = DeleteDocumentFieldsWithHttpInfo(accountId, templateId, documentId, documentFieldsInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes custom document fields from an existing template document. Deletes custom document fields from an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldsInformation</returns>
        public ApiResponse<DocumentFieldsInformation> DeleteDocumentFieldsWithHttpInfo(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteDocumentFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteDocumentFields");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->DeleteDocumentFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (documentFieldsInformation != null && documentFieldsInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(documentFieldsInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldsInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumentFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldsInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentFieldsInformation)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldsInformation)));
        }

        /// <summary>
        /// Deletes custom document fields from an existing template document. Deletes custom document fields from an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>Task of DocumentFieldsInformation</returns>
        public async System.Threading.Tasks.Task<DocumentFieldsInformation> DeleteDocumentFieldsAsync(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null)
        {
             ApiResponse<DocumentFieldsInformation> localVarResponse = await DeleteDocumentFieldsAsyncWithHttpInfo(accountId, templateId, documentId, documentFieldsInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes custom document fields from an existing template document. Deletes custom document fields from an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentFieldsInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldsInformation>> DeleteDocumentFieldsAsyncWithHttpInfo(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteDocumentFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteDocumentFields");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->DeleteDocumentFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (documentFieldsInformation != null && documentFieldsInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(documentFieldsInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldsInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumentFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldsInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentFieldsInformation)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldsInformation)));
        }


        /// <summary>
        /// Deletes a page from a document in an template. Deletes a page from a document in a template based on the page number.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns></returns>
        public void DeleteDocumentPage(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null)
        {
             DeleteDocumentPageWithHttpInfo(accountId, templateId, documentId, pageNumber, pageRequest);
        }

        /// <summary>
        /// Deletes a page from a document in an template. Deletes a page from a document in a template based on the page number.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDocumentPageWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteDocumentPage");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteDocumentPage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->DeleteDocumentPage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TemplatesApi->DeleteDocumentPage");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", this.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (pageRequest != null && pageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(pageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumentPage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a page from a document in an template. Deletes a page from a document in a template based on the page number.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDocumentPageAsync(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null)
        {
             await DeleteDocumentPageAsyncWithHttpInfo(accountId, templateId, documentId, pageNumber, pageRequest);
        }

        /// <summary>
        /// Deletes a page from a document in an template. Deletes a page from a document in a template based on the page number.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDocumentPageAsyncWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteDocumentPage");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteDocumentPage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->DeleteDocumentPage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TemplatesApi->DeleteDocumentPage");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", this.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (pageRequest != null && pageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(pageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumentPage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }


        /// <summary>
        /// Deletes documents from a template. Deletes one or more documents from an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>TemplateDocumentsResult</returns>
        public TemplateDocumentsResult DeleteDocuments(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<TemplateDocumentsResult> localVarResponse = DeleteDocumentsWithHttpInfo(accountId, templateId, envelopeDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes documents from a template. Deletes one or more documents from an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of TemplateDocumentsResult</returns>
        public ApiResponse<TemplateDocumentsResult> DeleteDocumentsWithHttpInfo(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteDocuments");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteDocuments");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateDocumentsResult>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (TemplateDocumentsResult)this.ApiClient.Deserialize(localVarResponse, typeof(TemplateDocumentsResult)));
        }

        /// <summary>
        /// Deletes documents from a template. Deletes one or more documents from an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of TemplateDocumentsResult</returns>
        public async System.Threading.Tasks.Task<TemplateDocumentsResult> DeleteDocumentsAsync(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<TemplateDocumentsResult> localVarResponse = await DeleteDocumentsAsyncWithHttpInfo(accountId, templateId, envelopeDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes documents from a template. Deletes one or more documents from an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateDocumentsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateDocumentsResult>> DeleteDocumentsAsyncWithHttpInfo(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteDocuments");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteDocuments");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateDocumentsResult>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (TemplateDocumentsResult)this.ApiClient.Deserialize(localVarResponse, typeof(TemplateDocumentsResult)));
        }


        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template. Removes a member group&#39;s sharing permissions for a specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>GroupInformation</returns>
        public GroupInformation DeleteGroupShare(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null)
        {
             ApiResponse<GroupInformation> localVarResponse = DeleteGroupShareWithHttpInfo(accountId, templateId, templatePart, groupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template. Removes a member group&#39;s sharing permissions for a specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>ApiResponse of GroupInformation</returns>
        public ApiResponse<GroupInformation> DeleteGroupShareWithHttpInfo(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteGroupShare");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteGroupShare");
            // verify the required parameter 'templatePart' is set
            if (templatePart == null)
                throw new ApiException(400, "Missing required parameter 'templatePart' when calling TemplatesApi->DeleteGroupShare");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/{templatePart}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templatePart != null) localVarPathParams.Add("templatePart", this.ApiClient.ParameterToString(templatePart)); // path parameter
            if (groupInformation != null && groupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(groupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroupShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (GroupInformation)this.ApiClient.Deserialize(localVarResponse, typeof(GroupInformation)));
        }

        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template. Removes a member group&#39;s sharing permissions for a specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of GroupInformation</returns>
        public async System.Threading.Tasks.Task<GroupInformation> DeleteGroupShareAsync(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null)
        {
             ApiResponse<GroupInformation> localVarResponse = await DeleteGroupShareAsyncWithHttpInfo(accountId, templateId, templatePart, groupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template. Removes a member group&#39;s sharing permissions for a specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInformation>> DeleteGroupShareAsyncWithHttpInfo(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteGroupShare");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteGroupShare");
            // verify the required parameter 'templatePart' is set
            if (templatePart == null)
                throw new ApiException(400, "Missing required parameter 'templatePart' when calling TemplatesApi->DeleteGroupShare");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/{templatePart}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templatePart != null) localVarPathParams.Add("templatePart", this.ApiClient.ParameterToString(templatePart)); // path parameter
            if (groupInformation != null && groupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(groupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroupShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (GroupInformation)this.ApiClient.Deserialize(localVarResponse, typeof(GroupInformation)));
        }


        /// <summary>
        /// Deletes a template lock. Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>LockInformation</returns>
        public LockInformation DeleteLock(string accountId, string templateId, LockRequest lockRequest = null)
        {
             ApiResponse<LockInformation> localVarResponse = DeleteLockWithHttpInfo(accountId, templateId, lockRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a template lock. Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of LockInformation</returns>
        public ApiResponse<LockInformation> DeleteLockWithHttpInfo(string accountId, string templateId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteLock");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LockInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (LockInformation)this.ApiClient.Deserialize(localVarResponse, typeof(LockInformation)));
        }

        /// <summary>
        /// Deletes a template lock. Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of LockInformation</returns>
        public async System.Threading.Tasks.Task<LockInformation> DeleteLockAsync(string accountId, string templateId, LockRequest lockRequest = null)
        {
             ApiResponse<LockInformation> localVarResponse = await DeleteLockAsyncWithHttpInfo(accountId, templateId, lockRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a template lock. Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (LockInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LockInformation>> DeleteLockAsyncWithHttpInfo(string accountId, string templateId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteLock");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LockInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (LockInformation)this.ApiClient.Deserialize(localVarResponse, typeof(LockInformation)));
        }


        /// <summary>
        /// Deletes the specified recipient file from a template. Deletes the specified recipient file from the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns>Recipients</returns>
        public Recipients DeleteRecipient(string accountId, string templateId, string recipientId, TemplateRecipients templateRecipients = null)
        {
             ApiResponse<Recipients> localVarResponse = DeleteRecipientWithHttpInfo(accountId, templateId, recipientId, templateRecipients);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the specified recipient file from a template. Deletes the specified recipient file from the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns>ApiResponse of Recipients</returns>
        public ApiResponse<Recipients> DeleteRecipientWithHttpInfo(string accountId, string templateId, string recipientId, TemplateRecipients templateRecipients = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteRecipient");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteRecipient");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TemplatesApi->DeleteRecipient");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", this.ApiClient.ParameterToString(recipientId)); // path parameter
            if (templateRecipients != null && templateRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateRecipients; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Recipients>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Recipients)this.ApiClient.Deserialize(localVarResponse, typeof(Recipients)));
        }

        /// <summary>
        /// Deletes the specified recipient file from a template. Deletes the specified recipient file from the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns>Task of Recipients</returns>
        public async System.Threading.Tasks.Task<Recipients> DeleteRecipientAsync(string accountId, string templateId, string recipientId, TemplateRecipients templateRecipients = null)
        {
             ApiResponse<Recipients> localVarResponse = await DeleteRecipientAsyncWithHttpInfo(accountId, templateId, recipientId, templateRecipients);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the specified recipient file from a template. Deletes the specified recipient file from the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns>Task of ApiResponse (Recipients)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Recipients>> DeleteRecipientAsyncWithHttpInfo(string accountId, string templateId, string recipientId, TemplateRecipients templateRecipients = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteRecipient");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteRecipient");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TemplatesApi->DeleteRecipient");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", this.ApiClient.ParameterToString(recipientId)); // path parameter
            if (templateRecipients != null && templateRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateRecipients; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Recipients>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Recipients)this.ApiClient.Deserialize(localVarResponse, typeof(Recipients)));
        }


        /// <summary>
        /// Deletes recipients from a template. Deletes one or more recipients from a template. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns>Recipients</returns>
        public Recipients DeleteRecipients(string accountId, string templateId, TemplateRecipients templateRecipients = null)
        {
             ApiResponse<Recipients> localVarResponse = DeleteRecipientsWithHttpInfo(accountId, templateId, templateRecipients);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes recipients from a template. Deletes one or more recipients from a template. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns>ApiResponse of Recipients</returns>
        public ApiResponse<Recipients> DeleteRecipientsWithHttpInfo(string accountId, string templateId, TemplateRecipients templateRecipients = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteRecipients");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteRecipients");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templateRecipients != null && templateRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateRecipients; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Recipients>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Recipients)this.ApiClient.Deserialize(localVarResponse, typeof(Recipients)));
        }

        /// <summary>
        /// Deletes recipients from a template. Deletes one or more recipients from a template. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns>Task of Recipients</returns>
        public async System.Threading.Tasks.Task<Recipients> DeleteRecipientsAsync(string accountId, string templateId, TemplateRecipients templateRecipients = null)
        {
             ApiResponse<Recipients> localVarResponse = await DeleteRecipientsAsyncWithHttpInfo(accountId, templateId, templateRecipients);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes recipients from a template. Deletes one or more recipients from a template. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <returns>Task of ApiResponse (Recipients)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Recipients>> DeleteRecipientsAsyncWithHttpInfo(string accountId, string templateId, TemplateRecipients templateRecipients = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteRecipients");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteRecipients");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templateRecipients != null && templateRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateRecipients; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Recipients>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Recipients)this.ApiClient.Deserialize(localVarResponse, typeof(Recipients)));
        }


        /// <summary>
        /// Deletes the tabs associated with a recipient in a template. Deletes one or more tabs associated with a recipient in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Tabs</returns>
        public Tabs DeleteTabs(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null)
        {
             ApiResponse<Tabs> localVarResponse = DeleteTabsWithHttpInfo(accountId, templateId, recipientId, templateTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the tabs associated with a recipient in a template. Deletes one or more tabs associated with a recipient in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>ApiResponse of Tabs</returns>
        public ApiResponse<Tabs> DeleteTabsWithHttpInfo(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteTabs");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TemplatesApi->DeleteTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", this.ApiClient.ParameterToString(recipientId)); // path parameter
            if (templateTabs != null && templateTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateTabs; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }

        /// <summary>
        /// Deletes the tabs associated with a recipient in a template. Deletes one or more tabs associated with a recipient in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of Tabs</returns>
        public async System.Threading.Tasks.Task<Tabs> DeleteTabsAsync(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null)
        {
             ApiResponse<Tabs> localVarResponse = await DeleteTabsAsyncWithHttpInfo(accountId, templateId, recipientId, templateTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the tabs associated with a recipient in a template. Deletes one or more tabs associated with a recipient in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tabs>> DeleteTabsAsyncWithHttpInfo(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteTabs");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TemplatesApi->DeleteTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", this.ApiClient.ParameterToString(recipientId)); // path parameter
            if (templateTabs != null && templateTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateTabs; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }


        /// <summary>
        /// Deletes tabs from an envelope document Deletes tabs from the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Tabs</returns>
        public Tabs DeleteTemplateDocumentTabs(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null)
        {
             ApiResponse<Tabs> localVarResponse = DeleteTemplateDocumentTabsWithHttpInfo(accountId, templateId, documentId, templateTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes tabs from an envelope document Deletes tabs from the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>ApiResponse of Tabs</returns>
        public ApiResponse<Tabs> DeleteTemplateDocumentTabsWithHttpInfo(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteTemplateDocumentTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteTemplateDocumentTabs");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->DeleteTemplateDocumentTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (templateTabs != null && templateTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateTabs; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplateDocumentTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }

        /// <summary>
        /// Deletes tabs from an envelope document Deletes tabs from the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of Tabs</returns>
        public async System.Threading.Tasks.Task<Tabs> DeleteTemplateDocumentTabsAsync(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null)
        {
             ApiResponse<Tabs> localVarResponse = await DeleteTemplateDocumentTabsAsyncWithHttpInfo(accountId, templateId, documentId, templateTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes tabs from an envelope document Deletes tabs from the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tabs>> DeleteTemplateDocumentTabsAsyncWithHttpInfo(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->DeleteTemplateDocumentTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->DeleteTemplateDocumentTabs");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->DeleteTemplateDocumentTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (templateTabs != null && templateTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateTabs; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplateDocumentTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }

        /// <summary>
        /// Gets a list of templates for a specified account. Retrieves the definition of the specified template.
        /// </summary>
        public class GetOptions
        {
            /// 
            public string include {get; set;}
        }

        /// <summary>
        /// Gets a list of templates for a specified account. Retrieves the definition of the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>EnvelopeTemplate</returns>
        public EnvelopeTemplate Get(string accountId, string templateId, TemplatesApi.GetOptions options = null)
        {
             ApiResponse<EnvelopeTemplate> localVarResponse = GetWithHttpInfo(accountId, templateId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of templates for a specified account. Retrieves the definition of the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of EnvelopeTemplate</returns>
        public ApiResponse<EnvelopeTemplate> GetWithHttpInfo(string accountId, string templateId, TemplatesApi.GetOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->Get");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->Get");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (options != null)
            {
                if (options.include != null) localVarQueryParams.Add("include", this.ApiClient.ParameterToString(options.include)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeTemplate>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (EnvelopeTemplate)this.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeTemplate)));
        }

        /// <summary>
        /// Gets a list of templates for a specified account. Retrieves the definition of the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of EnvelopeTemplate</returns>
        public async System.Threading.Tasks.Task<EnvelopeTemplate> GetAsync(string accountId, string templateId, TemplatesApi.GetOptions options = null)
        {
             ApiResponse<EnvelopeTemplate> localVarResponse = await GetAsyncWithHttpInfo(accountId, templateId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of templates for a specified account. Retrieves the definition of the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (EnvelopeTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeTemplate>> GetAsyncWithHttpInfo(string accountId, string templateId, TemplatesApi.GetOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->Get");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->Get");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (options != null)
            {
                if (options.include != null) localVarQueryParams.Add("include", this.ApiClient.ParameterToString(options.include)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeTemplate>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (EnvelopeTemplate)this.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeTemplate)));
        }

        /// <summary>
        /// Gets PDF documents from a template. Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </summary>
        public class GetDocumentOptions
        {
            /// 
            public string encrypt {get; set;}
            /// 
            public string fileType {get; set;}
            /// 
            public string showChanges {get; set;}
        }

        /// <summary>
        /// Gets PDF documents from a template. Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDocument(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentOptions options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDocumentWithHttpInfo(accountId, templateId, documentId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets PDF documents from a template. Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetDocumentWithHttpInfo(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetDocument");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->GetDocument");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (options != null)
            {
                if (options.encrypt != null) localVarQueryParams.Add("encrypt", this.ApiClient.ParameterToString(options.encrypt)); // query parameter
                if (options.fileType != null) localVarQueryParams.Add("file_type", this.ApiClient.ParameterToString(options.fileType)); // query parameter
                if (options.showChanges != null) localVarQueryParams.Add("show_changes", this.ApiClient.ParameterToString(options.showChanges)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (System.IO.Stream)this.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets PDF documents from a template. Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDocumentAsync(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentOptions options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDocumentAsyncWithHttpInfo(accountId, templateId, documentId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets PDF documents from a template. Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentAsyncWithHttpInfo(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetDocument");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->GetDocument");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (options != null)
            {
                if (options.encrypt != null) localVarQueryParams.Add("encrypt", this.ApiClient.ParameterToString(options.encrypt)); // query parameter
                if (options.fileType != null) localVarQueryParams.Add("file_type", this.ApiClient.ParameterToString(options.fileType)); // query parameter
                if (options.showChanges != null) localVarQueryParams.Add("show_changes", this.ApiClient.ParameterToString(options.showChanges)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (System.IO.Stream)this.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a page image from a template for display. Retrieves a page image for display from the specified template.
        /// </summary>
        public class GetDocumentPageImageOptions
        {
            /// 
            public string dpi {get; set;}
            /// 
            public string maxHeight {get; set;}
            /// 
            public string maxWidth {get; set;}
            /// 
            public string showChanges {get; set;}
        }

        /// <summary>
        /// Gets a page image from a template for display. Retrieves a page image for display from the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDocumentPageImage(string accountId, string templateId, string documentId, string pageNumber, TemplatesApi.GetDocumentPageImageOptions options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDocumentPageImageWithHttpInfo(accountId, templateId, documentId, pageNumber, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a page image from a template for display. Retrieves a page image for display from the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetDocumentPageImageWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber, TemplatesApi.GetDocumentPageImageOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetDocumentPageImage");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetDocumentPageImage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->GetDocumentPageImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TemplatesApi->GetDocumentPageImage");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/page_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", this.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (options != null)
            {
                if (options.dpi != null) localVarQueryParams.Add("dpi", this.ApiClient.ParameterToString(options.dpi)); // query parameter
                if (options.maxHeight != null) localVarQueryParams.Add("max_height", this.ApiClient.ParameterToString(options.maxHeight)); // query parameter
                if (options.maxWidth != null) localVarQueryParams.Add("max_width", this.ApiClient.ParameterToString(options.maxWidth)); // query parameter
                if (options.showChanges != null) localVarQueryParams.Add("show_changes", this.ApiClient.ParameterToString(options.showChanges)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentPageImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (System.IO.Stream)this.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a page image from a template for display. Retrieves a page image for display from the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDocumentPageImageAsync(string accountId, string templateId, string documentId, string pageNumber, TemplatesApi.GetDocumentPageImageOptions options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDocumentPageImageAsyncWithHttpInfo(accountId, templateId, documentId, pageNumber, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a page image from a template for display. Retrieves a page image for display from the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentPageImageAsyncWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber, TemplatesApi.GetDocumentPageImageOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetDocumentPageImage");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetDocumentPageImage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->GetDocumentPageImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TemplatesApi->GetDocumentPageImage");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/page_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", this.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (options != null)
            {
                if (options.dpi != null) localVarQueryParams.Add("dpi", this.ApiClient.ParameterToString(options.dpi)); // query parameter
                if (options.maxHeight != null) localVarQueryParams.Add("max_height", this.ApiClient.ParameterToString(options.maxHeight)); // query parameter
                if (options.maxWidth != null) localVarQueryParams.Add("max_width", this.ApiClient.ParameterToString(options.maxWidth)); // query parameter
                if (options.showChanges != null) localVarQueryParams.Add("show_changes", this.ApiClient.ParameterToString(options.showChanges)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentPageImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (System.IO.Stream)this.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Returns tabs on the document. Returns the tabs on the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  
        /// </summary>
        public class GetDocumentTabsOptions
        {
            /// 
            public string pageNumbers {get; set;}
        }

        /// <summary>
        /// Returns tabs on the document. Returns the tabs on the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Tabs</returns>
        public Tabs GetDocumentTabs(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentTabsOptions options = null)
        {
             ApiResponse<Tabs> localVarResponse = GetDocumentTabsWithHttpInfo(accountId, templateId, documentId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns tabs on the document. Returns the tabs on the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of Tabs</returns>
        public ApiResponse<Tabs> GetDocumentTabsWithHttpInfo(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentTabsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetDocumentTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetDocumentTabs");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->GetDocumentTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (options != null)
            {
                if (options.pageNumbers != null) localVarQueryParams.Add("page_numbers", this.ApiClient.ParameterToString(options.pageNumbers)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }

        /// <summary>
        /// Returns tabs on the document. Returns the tabs on the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of Tabs</returns>
        public async System.Threading.Tasks.Task<Tabs> GetDocumentTabsAsync(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentTabsOptions options = null)
        {
             ApiResponse<Tabs> localVarResponse = await GetDocumentTabsAsyncWithHttpInfo(accountId, templateId, documentId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns tabs on the document. Returns the tabs on the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;.  
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tabs>> GetDocumentTabsAsyncWithHttpInfo(string accountId, string templateId, string documentId, TemplatesApi.GetDocumentTabsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetDocumentTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetDocumentTabs");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->GetDocumentTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (options != null)
            {
                if (options.pageNumbers != null) localVarQueryParams.Add("page_numbers", this.ApiClient.ParameterToString(options.pageNumbers)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }


        /// <summary>
        /// Gets template lock information. Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>LockInformation</returns>
        public LockInformation GetLock(string accountId, string templateId)
        {
             ApiResponse<LockInformation> localVarResponse = GetLockWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets template lock information. Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>ApiResponse of LockInformation</returns>
        public ApiResponse<LockInformation> GetLockWithHttpInfo(string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetLock");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LockInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (LockInformation)this.ApiClient.Deserialize(localVarResponse, typeof(LockInformation)));
        }

        /// <summary>
        /// Gets template lock information. Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of LockInformation</returns>
        public async System.Threading.Tasks.Task<LockInformation> GetLockAsync(string accountId, string templateId)
        {
             ApiResponse<LockInformation> localVarResponse = await GetLockAsyncWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets template lock information. Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of ApiResponse (LockInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LockInformation>> GetLockAsyncWithHttpInfo(string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetLock");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LockInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (LockInformation)this.ApiClient.Deserialize(localVarResponse, typeof(LockInformation)));
        }


        /// <summary>
        /// Gets template notification information. Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Notification</returns>
        public Notification GetNotificationSettings(string accountId, string templateId)
        {
             ApiResponse<Notification> localVarResponse = GetNotificationSettingsWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets template notification information. Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>ApiResponse of Notification</returns>
        public ApiResponse<Notification> GetNotificationSettingsWithHttpInfo(string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetNotificationSettings");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetNotificationSettings");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Notification)this.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
        }

        /// <summary>
        /// Gets template notification information. Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> GetNotificationSettingsAsync(string accountId, string templateId)
        {
             ApiResponse<Notification> localVarResponse = await GetNotificationSettingsAsyncWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets template notification information. Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Notification>> GetNotificationSettingsAsyncWithHttpInfo(string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetNotificationSettings");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetNotificationSettings");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Notification)this.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
        }


        /// <summary>
        /// Returns tabs on the specified page. Returns the tabs from the page specified by &#x60;pageNumber&#x60; of the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns>Tabs</returns>
        public Tabs GetPageTabs(string accountId, string templateId, string documentId, string pageNumber)
        {
             ApiResponse<Tabs> localVarResponse = GetPageTabsWithHttpInfo(accountId, templateId, documentId, pageNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns tabs on the specified page. Returns the tabs from the page specified by &#x60;pageNumber&#x60; of the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns>ApiResponse of Tabs</returns>
        public ApiResponse<Tabs> GetPageTabsWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetPageTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetPageTabs");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->GetPageTabs");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TemplatesApi->GetPageTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", this.ApiClient.ParameterToString(pageNumber)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }

        /// <summary>
        /// Returns tabs on the specified page. Returns the tabs from the page specified by &#x60;pageNumber&#x60; of the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns>Task of Tabs</returns>
        public async System.Threading.Tasks.Task<Tabs> GetPageTabsAsync(string accountId, string templateId, string documentId, string pageNumber)
        {
             ApiResponse<Tabs> localVarResponse = await GetPageTabsAsyncWithHttpInfo(accountId, templateId, documentId, pageNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns tabs on the specified page. Returns the tabs from the page specified by &#x60;pageNumber&#x60; of the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tabs>> GetPageTabsAsyncWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetPageTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetPageTabs");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->GetPageTabs");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TemplatesApi->GetPageTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", this.ApiClient.ParameterToString(pageNumber)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }

        /// <summary>
        /// Returns document page image(s) based on input. Returns images of the pages in a template document for display based on the parameters that you specify.
        /// </summary>
        public class GetPagesOptions
        {
            /// 
            public string count {get; set;}
            /// 
            public string dpi {get; set;}
            /// 
            public string maxHeight {get; set;}
            /// 
            public string maxWidth {get; set;}
            /// 
            public string nocache {get; set;}
            /// 
            public string showChanges {get; set;}
            /// 
            public string startPosition {get; set;}
        }

        /// <summary>
        /// Returns document page image(s) based on input. Returns images of the pages in a template document for display based on the parameters that you specify.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>PageImages</returns>
        public PageImages GetPages(string accountId, string templateId, string documentId, TemplatesApi.GetPagesOptions options = null)
        {
             ApiResponse<PageImages> localVarResponse = GetPagesWithHttpInfo(accountId, templateId, documentId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns document page image(s) based on input. Returns images of the pages in a template document for display based on the parameters that you specify.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of PageImages</returns>
        public ApiResponse<PageImages> GetPagesWithHttpInfo(string accountId, string templateId, string documentId, TemplatesApi.GetPagesOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetPages");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetPages");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->GetPages");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.dpi != null) localVarQueryParams.Add("dpi", this.ApiClient.ParameterToString(options.dpi)); // query parameter
                if (options.maxHeight != null) localVarQueryParams.Add("max_height", this.ApiClient.ParameterToString(options.maxHeight)); // query parameter
                if (options.maxWidth != null) localVarQueryParams.Add("max_width", this.ApiClient.ParameterToString(options.maxWidth)); // query parameter
                if (options.nocache != null) localVarQueryParams.Add("nocache", this.ApiClient.ParameterToString(options.nocache)); // query parameter
                if (options.showChanges != null) localVarQueryParams.Add("show_changes", this.ApiClient.ParameterToString(options.showChanges)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageImages>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (PageImages)this.ApiClient.Deserialize(localVarResponse, typeof(PageImages)));
        }

        /// <summary>
        /// Returns document page image(s) based on input. Returns images of the pages in a template document for display based on the parameters that you specify.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of PageImages</returns>
        public async System.Threading.Tasks.Task<PageImages> GetPagesAsync(string accountId, string templateId, string documentId, TemplatesApi.GetPagesOptions options = null)
        {
             ApiResponse<PageImages> localVarResponse = await GetPagesAsyncWithHttpInfo(accountId, templateId, documentId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns document page image(s) based on input. Returns images of the pages in a template document for display based on the parameters that you specify.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (PageImages)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageImages>> GetPagesAsyncWithHttpInfo(string accountId, string templateId, string documentId, TemplatesApi.GetPagesOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetPages");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetPages");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->GetPages");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.dpi != null) localVarQueryParams.Add("dpi", this.ApiClient.ParameterToString(options.dpi)); // query parameter
                if (options.maxHeight != null) localVarQueryParams.Add("max_height", this.ApiClient.ParameterToString(options.maxHeight)); // query parameter
                if (options.maxWidth != null) localVarQueryParams.Add("max_width", this.ApiClient.ParameterToString(options.maxWidth)); // query parameter
                if (options.nocache != null) localVarQueryParams.Add("nocache", this.ApiClient.ParameterToString(options.nocache)); // query parameter
                if (options.showChanges != null) localVarQueryParams.Add("show_changes", this.ApiClient.ParameterToString(options.showChanges)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageImages>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (PageImages)this.ApiClient.Deserialize(localVarResponse, typeof(PageImages)));
        }


        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for a given document in a template. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns>DocumentHtmlDefinitionOriginals</returns>
        public DocumentHtmlDefinitionOriginals GetTemplateDocumentHtmlDefinitions(string accountId, string templateId, string documentId)
        {
             ApiResponse<DocumentHtmlDefinitionOriginals> localVarResponse = GetTemplateDocumentHtmlDefinitionsWithHttpInfo(accountId, templateId, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for a given document in a template. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns>ApiResponse of DocumentHtmlDefinitionOriginals</returns>
        public ApiResponse<DocumentHtmlDefinitionOriginals> GetTemplateDocumentHtmlDefinitionsWithHttpInfo(string accountId, string templateId, string documentId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetTemplateDocumentHtmlDefinitions");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetTemplateDocumentHtmlDefinitions");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->GetTemplateDocumentHtmlDefinitions");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/html_definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateDocumentHtmlDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentHtmlDefinitionOriginals>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentHtmlDefinitionOriginals)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentHtmlDefinitionOriginals)));
        }

        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for a given document in a template. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns>Task of DocumentHtmlDefinitionOriginals</returns>
        public async System.Threading.Tasks.Task<DocumentHtmlDefinitionOriginals> GetTemplateDocumentHtmlDefinitionsAsync(string accountId, string templateId, string documentId)
        {
             ApiResponse<DocumentHtmlDefinitionOriginals> localVarResponse = await GetTemplateDocumentHtmlDefinitionsAsyncWithHttpInfo(accountId, templateId, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for a given document in a template. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns>Task of ApiResponse (DocumentHtmlDefinitionOriginals)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentHtmlDefinitionOriginals>> GetTemplateDocumentHtmlDefinitionsAsyncWithHttpInfo(string accountId, string templateId, string documentId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetTemplateDocumentHtmlDefinitions");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetTemplateDocumentHtmlDefinitions");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->GetTemplateDocumentHtmlDefinitions");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/html_definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateDocumentHtmlDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentHtmlDefinitionOriginals>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentHtmlDefinitionOriginals)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentHtmlDefinitionOriginals)));
        }


        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for the template. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>DocumentHtmlDefinitionOriginals</returns>
        public DocumentHtmlDefinitionOriginals GetTemplateHtmlDefinitions(string accountId, string templateId)
        {
             ApiResponse<DocumentHtmlDefinitionOriginals> localVarResponse = GetTemplateHtmlDefinitionsWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for the template. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>ApiResponse of DocumentHtmlDefinitionOriginals</returns>
        public ApiResponse<DocumentHtmlDefinitionOriginals> GetTemplateHtmlDefinitionsWithHttpInfo(string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetTemplateHtmlDefinitions");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetTemplateHtmlDefinitions");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/html_definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateHtmlDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentHtmlDefinitionOriginals>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentHtmlDefinitionOriginals)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentHtmlDefinitionOriginals)));
        }

        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for the template. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of DocumentHtmlDefinitionOriginals</returns>
        public async System.Threading.Tasks.Task<DocumentHtmlDefinitionOriginals> GetTemplateHtmlDefinitionsAsync(string accountId, string templateId)
        {
             ApiResponse<DocumentHtmlDefinitionOriginals> localVarResponse = await GetTemplateHtmlDefinitionsAsyncWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Original HTML Definition used to generate the Responsive HTML for the template. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of ApiResponse (DocumentHtmlDefinitionOriginals)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentHtmlDefinitionOriginals>> GetTemplateHtmlDefinitionsAsyncWithHttpInfo(string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->GetTemplateHtmlDefinitions");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->GetTemplateHtmlDefinitions");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/html_definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateHtmlDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentHtmlDefinitionOriginals>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentHtmlDefinitionOriginals)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentHtmlDefinitionOriginals)));
        }


        /// <summary>
        /// Gets the custom document fields from a template. Retrieves the custom document field information from an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>CustomFields</returns>
        public CustomFields ListCustomFields(string accountId, string templateId)
        {
             ApiResponse<CustomFields> localVarResponse = ListCustomFieldsWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom document fields from a template. Retrieves the custom document field information from an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>ApiResponse of CustomFields</returns>
        public ApiResponse<CustomFields> ListCustomFieldsWithHttpInfo(string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->ListCustomFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->ListCustomFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomFields>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CustomFields)this.ApiClient.Deserialize(localVarResponse, typeof(CustomFields)));
        }

        /// <summary>
        /// Gets the custom document fields from a template. Retrieves the custom document field information from an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of CustomFields</returns>
        public async System.Threading.Tasks.Task<CustomFields> ListCustomFieldsAsync(string accountId, string templateId)
        {
             ApiResponse<CustomFields> localVarResponse = await ListCustomFieldsAsyncWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom document fields from a template. Retrieves the custom document field information from an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of ApiResponse (CustomFields)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomFields>> ListCustomFieldsAsyncWithHttpInfo(string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->ListCustomFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->ListCustomFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomFields>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CustomFields)this.ApiClient.Deserialize(localVarResponse, typeof(CustomFields)));
        }


        /// <summary>
        /// Gets the custom document fields for a an existing template document. Retrieves the custom document fields for an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns>DocumentFieldsInformation</returns>
        public DocumentFieldsInformation ListDocumentFields(string accountId, string templateId, string documentId)
        {
             ApiResponse<DocumentFieldsInformation> localVarResponse = ListDocumentFieldsWithHttpInfo(accountId, templateId, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom document fields for a an existing template document. Retrieves the custom document fields for an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns>ApiResponse of DocumentFieldsInformation</returns>
        public ApiResponse<DocumentFieldsInformation> ListDocumentFieldsWithHttpInfo(string accountId, string templateId, string documentId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->ListDocumentFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->ListDocumentFields");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->ListDocumentFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDocumentFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldsInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentFieldsInformation)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldsInformation)));
        }

        /// <summary>
        /// Gets the custom document fields for a an existing template document. Retrieves the custom document fields for an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns>Task of DocumentFieldsInformation</returns>
        public async System.Threading.Tasks.Task<DocumentFieldsInformation> ListDocumentFieldsAsync(string accountId, string templateId, string documentId)
        {
             ApiResponse<DocumentFieldsInformation> localVarResponse = await ListDocumentFieldsAsyncWithHttpInfo(accountId, templateId, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom document fields for a an existing template document. Retrieves the custom document fields for an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <returns>Task of ApiResponse (DocumentFieldsInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldsInformation>> ListDocumentFieldsAsyncWithHttpInfo(string accountId, string templateId, string documentId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->ListDocumentFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->ListDocumentFields");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->ListDocumentFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDocumentFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldsInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentFieldsInformation)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldsInformation)));
        }

        /// <summary>
        /// Gets a list of documents associated with a template. Retrieves a list of documents associated with the specified template.
        /// </summary>
        public class ListDocumentsOptions
        {
            /// 
            public string includeTabs {get; set;}
        }

        /// <summary>
        /// Gets a list of documents associated with a template. Retrieves a list of documents associated with the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>TemplateDocumentsResult</returns>
        public TemplateDocumentsResult ListDocuments(string accountId, string templateId, TemplatesApi.ListDocumentsOptions options = null)
        {
             ApiResponse<TemplateDocumentsResult> localVarResponse = ListDocumentsWithHttpInfo(accountId, templateId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of documents associated with a template. Retrieves a list of documents associated with the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of TemplateDocumentsResult</returns>
        public ApiResponse<TemplateDocumentsResult> ListDocumentsWithHttpInfo(string accountId, string templateId, TemplatesApi.ListDocumentsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->ListDocuments");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->ListDocuments");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (options != null)
            {
                if (options.includeTabs != null) localVarQueryParams.Add("include_tabs", this.ApiClient.ParameterToString(options.includeTabs)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateDocumentsResult>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (TemplateDocumentsResult)this.ApiClient.Deserialize(localVarResponse, typeof(TemplateDocumentsResult)));
        }

        /// <summary>
        /// Gets a list of documents associated with a template. Retrieves a list of documents associated with the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of TemplateDocumentsResult</returns>
        public async System.Threading.Tasks.Task<TemplateDocumentsResult> ListDocumentsAsync(string accountId, string templateId, TemplatesApi.ListDocumentsOptions options = null)
        {
             ApiResponse<TemplateDocumentsResult> localVarResponse = await ListDocumentsAsyncWithHttpInfo(accountId, templateId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of documents associated with a template. Retrieves a list of documents associated with the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (TemplateDocumentsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateDocumentsResult>> ListDocumentsAsyncWithHttpInfo(string accountId, string templateId, TemplatesApi.ListDocumentsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->ListDocuments");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->ListDocuments");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (options != null)
            {
                if (options.includeTabs != null) localVarQueryParams.Add("include_tabs", this.ApiClient.ParameterToString(options.includeTabs)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateDocumentsResult>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (TemplateDocumentsResult)this.ApiClient.Deserialize(localVarResponse, typeof(TemplateDocumentsResult)));
        }

        /// <summary>
        /// Gets recipient information from a template. Retrieves the information for all recipients in the specified template.
        /// </summary>
        public class ListRecipientsOptions
        {
            ///  When set to **true** and &#x60;include_tabs&#x60; is set to **true**, all tabs with anchor tab properties are included in the response.  
            public string includeAnchorTabLocations {get; set;}
            ///  When set to **true**, the extended properties are included in the response.  
            public string includeExtended {get; set;}
            /// When set to **true**, the tab information associated with the recipient is included in the response. 
            public string includeTabs {get; set;}
        }

        /// <summary>
        /// Gets recipient information from a template. Retrieves the information for all recipients in the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Recipients</returns>
        public Recipients ListRecipients(string accountId, string templateId, TemplatesApi.ListRecipientsOptions options = null)
        {
             ApiResponse<Recipients> localVarResponse = ListRecipientsWithHttpInfo(accountId, templateId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets recipient information from a template. Retrieves the information for all recipients in the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of Recipients</returns>
        public ApiResponse<Recipients> ListRecipientsWithHttpInfo(string accountId, string templateId, TemplatesApi.ListRecipientsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->ListRecipients");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->ListRecipients");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (options != null)
            {
                if (options.includeAnchorTabLocations != null) localVarQueryParams.Add("include_anchor_tab_locations", this.ApiClient.ParameterToString(options.includeAnchorTabLocations)); // query parameter
                if (options.includeExtended != null) localVarQueryParams.Add("include_extended", this.ApiClient.ParameterToString(options.includeExtended)); // query parameter
                if (options.includeTabs != null) localVarQueryParams.Add("include_tabs", this.ApiClient.ParameterToString(options.includeTabs)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Recipients>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Recipients)this.ApiClient.Deserialize(localVarResponse, typeof(Recipients)));
        }

        /// <summary>
        /// Gets recipient information from a template. Retrieves the information for all recipients in the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of Recipients</returns>
        public async System.Threading.Tasks.Task<Recipients> ListRecipientsAsync(string accountId, string templateId, TemplatesApi.ListRecipientsOptions options = null)
        {
             ApiResponse<Recipients> localVarResponse = await ListRecipientsAsyncWithHttpInfo(accountId, templateId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets recipient information from a template. Retrieves the information for all recipients in the specified template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (Recipients)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Recipients>> ListRecipientsAsyncWithHttpInfo(string accountId, string templateId, TemplatesApi.ListRecipientsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->ListRecipients");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->ListRecipients");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (options != null)
            {
                if (options.includeAnchorTabLocations != null) localVarQueryParams.Add("include_anchor_tab_locations", this.ApiClient.ParameterToString(options.includeAnchorTabLocations)); // query parameter
                if (options.includeExtended != null) localVarQueryParams.Add("include_extended", this.ApiClient.ParameterToString(options.includeExtended)); // query parameter
                if (options.includeTabs != null) localVarQueryParams.Add("include_tabs", this.ApiClient.ParameterToString(options.includeTabs)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Recipients>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Recipients)this.ApiClient.Deserialize(localVarResponse, typeof(Recipients)));
        }

        /// <summary>
        /// Gets the tabs information for a signer or sign-in-person recipient in a template. Gets the tabs information for a signer or sign-in-person recipient in a template.
        /// </summary>
        public class ListTabsOptions
        {
            /// When set to **true**, all tabs with anchor tab properties are included in the response.  
            public string includeAnchorTabLocations {get; set;}
            /// 
            public string includeMetadata {get; set;}
        }

        /// <summary>
        /// Gets the tabs information for a signer or sign-in-person recipient in a template. Gets the tabs information for a signer or sign-in-person recipient in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Tabs</returns>
        public Tabs ListTabs(string accountId, string templateId, string recipientId, TemplatesApi.ListTabsOptions options = null)
        {
             ApiResponse<Tabs> localVarResponse = ListTabsWithHttpInfo(accountId, templateId, recipientId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the tabs information for a signer or sign-in-person recipient in a template. Gets the tabs information for a signer or sign-in-person recipient in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of Tabs</returns>
        public ApiResponse<Tabs> ListTabsWithHttpInfo(string accountId, string templateId, string recipientId, TemplatesApi.ListTabsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->ListTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->ListTabs");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TemplatesApi->ListTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", this.ApiClient.ParameterToString(recipientId)); // path parameter
            if (options != null)
            {
                if (options.includeAnchorTabLocations != null) localVarQueryParams.Add("include_anchor_tab_locations", this.ApiClient.ParameterToString(options.includeAnchorTabLocations)); // query parameter
                if (options.includeMetadata != null) localVarQueryParams.Add("include_metadata", this.ApiClient.ParameterToString(options.includeMetadata)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }

        /// <summary>
        /// Gets the tabs information for a signer or sign-in-person recipient in a template. Gets the tabs information for a signer or sign-in-person recipient in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of Tabs</returns>
        public async System.Threading.Tasks.Task<Tabs> ListTabsAsync(string accountId, string templateId, string recipientId, TemplatesApi.ListTabsOptions options = null)
        {
             ApiResponse<Tabs> localVarResponse = await ListTabsAsyncWithHttpInfo(accountId, templateId, recipientId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the tabs information for a signer or sign-in-person recipient in a template. Gets the tabs information for a signer or sign-in-person recipient in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tabs>> ListTabsAsyncWithHttpInfo(string accountId, string templateId, string recipientId, TemplatesApi.ListTabsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->ListTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->ListTabs");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TemplatesApi->ListTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", this.ApiClient.ParameterToString(recipientId)); // path parameter
            if (options != null)
            {
                if (options.includeAnchorTabLocations != null) localVarQueryParams.Add("include_anchor_tab_locations", this.ApiClient.ParameterToString(options.includeAnchorTabLocations)); // query parameter
                if (options.includeMetadata != null) localVarQueryParams.Add("include_metadata", this.ApiClient.ParameterToString(options.includeMetadata)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }

        /// <summary>
        /// Gets the definition of a template. Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </summary>
        public class ListTemplatesOptions
        {
            /// Number of records to return in the cache. 
            public string count {get; set;}
            /// 
            public string createdFromDate {get; set;}
            /// 
            public string createdToDate {get; set;}
            /// A comma separated list of folder ID GUIDs. 
            public string folderIds {get; set;}
            /// 
            public string folderTypes {get; set;}
            /// Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. 
            public string fromDate {get; set;}
            /// A comma separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. 
            public string include {get; set;}
            /// 
            public string isDeletedTemplateOnly {get; set;}
            /// 
            public string isDownload {get; set;}
            /// 
            public string modifiedFromDate {get; set;}
            /// 
            public string modifiedToDate {get; set;}
            /// Sets the direction order used to sort the list. Valid values are: -asc &#x3D; ascending sort order (a to z)  -desc &#x3D; descending sort order (z to a) 
            public string order {get; set;}
            /// Sets the file attribute used to sort the list. Valid values are:  -name: template name  -modified: date/time template was last modified.  -used: date/time the template was last used. 
            public string orderBy {get; set;}
            /// 
            public string searchFields {get; set;}
            /// The search text used to search the names of templates. 
            public string searchText {get; set;}
            /// If true, the response only includes templates shared by the user. If false, the response only returns template not shared by the user. If not specified, the response is not affected. 
            public string sharedByMe {get; set;}
            /// The starting index for the first template shown in the response. This must be greater than or equal to 0 (zero). 
            public string startPosition {get; set;}
            /// 
            public string templateIds {get; set;}
            /// End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. 
            public string toDate {get; set;}
            /// Start of the search date range. Only returns templates used or edited on or after this date/time. If no value is specified, there is no limit on the earliest date used. 
            public string usedFromDate {get; set;}
            /// End of the search date range. Only returns templates used or edited up to this date/time. If no value is provided, this defaults to the current date. 
            public string usedToDate {get; set;}
            /// Sets if the templates shown in the response Valid values are:  -owned_by_me: only shows templates the user owns.  -shared_with_me: only shows templates that are shared with the user.  -all: shows all templates owned or shared with the user. 
            public string userFilter {get; set;}
            /// 
            public string userId {get; set;}
        }

        /// <summary>
        /// Gets the definition of a template. Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>EnvelopeTemplateResults</returns>
        public EnvelopeTemplateResults ListTemplates(string accountId, TemplatesApi.ListTemplatesOptions options = null)
        {
             ApiResponse<EnvelopeTemplateResults> localVarResponse = ListTemplatesWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the definition of a template. Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of EnvelopeTemplateResults</returns>
        public ApiResponse<EnvelopeTemplateResults> ListTemplatesWithHttpInfo(string accountId, TemplatesApi.ListTemplatesOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->ListTemplates");

            var localVarPath = "/v2.1/accounts/{accountId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.createdFromDate != null) localVarQueryParams.Add("created_from_date", this.ApiClient.ParameterToString(options.createdFromDate)); // query parameter
                if (options.createdToDate != null) localVarQueryParams.Add("created_to_date", this.ApiClient.ParameterToString(options.createdToDate)); // query parameter
                if (options.folderIds != null) localVarQueryParams.Add("folder_ids", this.ApiClient.ParameterToString(options.folderIds)); // query parameter
                if (options.folderTypes != null) localVarQueryParams.Add("folder_types", this.ApiClient.ParameterToString(options.folderTypes)); // query parameter
                if (options.fromDate != null) localVarQueryParams.Add("from_date", this.ApiClient.ParameterToString(options.fromDate)); // query parameter
                if (options.include != null) localVarQueryParams.Add("include", this.ApiClient.ParameterToString(options.include)); // query parameter
                if (options.isDeletedTemplateOnly != null) localVarQueryParams.Add("is_deleted_template_only", this.ApiClient.ParameterToString(options.isDeletedTemplateOnly)); // query parameter
                if (options.isDownload != null) localVarQueryParams.Add("is_download", this.ApiClient.ParameterToString(options.isDownload)); // query parameter
                if (options.modifiedFromDate != null) localVarQueryParams.Add("modified_from_date", this.ApiClient.ParameterToString(options.modifiedFromDate)); // query parameter
                if (options.modifiedToDate != null) localVarQueryParams.Add("modified_to_date", this.ApiClient.ParameterToString(options.modifiedToDate)); // query parameter
                if (options.order != null) localVarQueryParams.Add("order", this.ApiClient.ParameterToString(options.order)); // query parameter
                if (options.orderBy != null) localVarQueryParams.Add("order_by", this.ApiClient.ParameterToString(options.orderBy)); // query parameter
                if (options.searchFields != null) localVarQueryParams.Add("search_fields", this.ApiClient.ParameterToString(options.searchFields)); // query parameter
                if (options.searchText != null) localVarQueryParams.Add("search_text", this.ApiClient.ParameterToString(options.searchText)); // query parameter
                if (options.sharedByMe != null) localVarQueryParams.Add("shared_by_me", this.ApiClient.ParameterToString(options.sharedByMe)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.templateIds != null) localVarQueryParams.Add("template_ids", this.ApiClient.ParameterToString(options.templateIds)); // query parameter
                if (options.toDate != null) localVarQueryParams.Add("to_date", this.ApiClient.ParameterToString(options.toDate)); // query parameter
                if (options.usedFromDate != null) localVarQueryParams.Add("used_from_date", this.ApiClient.ParameterToString(options.usedFromDate)); // query parameter
                if (options.usedToDate != null) localVarQueryParams.Add("used_to_date", this.ApiClient.ParameterToString(options.usedToDate)); // query parameter
                if (options.userFilter != null) localVarQueryParams.Add("user_filter", this.ApiClient.ParameterToString(options.userFilter)); // query parameter
                if (options.userId != null) localVarQueryParams.Add("user_id", this.ApiClient.ParameterToString(options.userId)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeTemplateResults>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (EnvelopeTemplateResults)this.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeTemplateResults)));
        }

        /// <summary>
        /// Gets the definition of a template. Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of EnvelopeTemplateResults</returns>
        public async System.Threading.Tasks.Task<EnvelopeTemplateResults> ListTemplatesAsync(string accountId, TemplatesApi.ListTemplatesOptions options = null)
        {
             ApiResponse<EnvelopeTemplateResults> localVarResponse = await ListTemplatesAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the definition of a template. Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (EnvelopeTemplateResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeTemplateResults>> ListTemplatesAsyncWithHttpInfo(string accountId, TemplatesApi.ListTemplatesOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->ListTemplates");

            var localVarPath = "/v2.1/accounts/{accountId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.createdFromDate != null) localVarQueryParams.Add("created_from_date", this.ApiClient.ParameterToString(options.createdFromDate)); // query parameter
                if (options.createdToDate != null) localVarQueryParams.Add("created_to_date", this.ApiClient.ParameterToString(options.createdToDate)); // query parameter
                if (options.folderIds != null) localVarQueryParams.Add("folder_ids", this.ApiClient.ParameterToString(options.folderIds)); // query parameter
                if (options.folderTypes != null) localVarQueryParams.Add("folder_types", this.ApiClient.ParameterToString(options.folderTypes)); // query parameter
                if (options.fromDate != null) localVarQueryParams.Add("from_date", this.ApiClient.ParameterToString(options.fromDate)); // query parameter
                if (options.include != null) localVarQueryParams.Add("include", this.ApiClient.ParameterToString(options.include)); // query parameter
                if (options.isDeletedTemplateOnly != null) localVarQueryParams.Add("is_deleted_template_only", this.ApiClient.ParameterToString(options.isDeletedTemplateOnly)); // query parameter
                if (options.isDownload != null) localVarQueryParams.Add("is_download", this.ApiClient.ParameterToString(options.isDownload)); // query parameter
                if (options.modifiedFromDate != null) localVarQueryParams.Add("modified_from_date", this.ApiClient.ParameterToString(options.modifiedFromDate)); // query parameter
                if (options.modifiedToDate != null) localVarQueryParams.Add("modified_to_date", this.ApiClient.ParameterToString(options.modifiedToDate)); // query parameter
                if (options.order != null) localVarQueryParams.Add("order", this.ApiClient.ParameterToString(options.order)); // query parameter
                if (options.orderBy != null) localVarQueryParams.Add("order_by", this.ApiClient.ParameterToString(options.orderBy)); // query parameter
                if (options.searchFields != null) localVarQueryParams.Add("search_fields", this.ApiClient.ParameterToString(options.searchFields)); // query parameter
                if (options.searchText != null) localVarQueryParams.Add("search_text", this.ApiClient.ParameterToString(options.searchText)); // query parameter
                if (options.sharedByMe != null) localVarQueryParams.Add("shared_by_me", this.ApiClient.ParameterToString(options.sharedByMe)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("start_position", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.templateIds != null) localVarQueryParams.Add("template_ids", this.ApiClient.ParameterToString(options.templateIds)); // query parameter
                if (options.toDate != null) localVarQueryParams.Add("to_date", this.ApiClient.ParameterToString(options.toDate)); // query parameter
                if (options.usedFromDate != null) localVarQueryParams.Add("used_from_date", this.ApiClient.ParameterToString(options.usedFromDate)); // query parameter
                if (options.usedToDate != null) localVarQueryParams.Add("used_to_date", this.ApiClient.ParameterToString(options.usedToDate)); // query parameter
                if (options.userFilter != null) localVarQueryParams.Add("user_filter", this.ApiClient.ParameterToString(options.userFilter)); // query parameter
                if (options.userId != null) localVarQueryParams.Add("user_id", this.ApiClient.ParameterToString(options.userId)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeTemplateResults>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (EnvelopeTemplateResults)this.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeTemplateResults)));
        }


        /// <summary>
        /// Rotates page image from a template for display. Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns></returns>
        public void RotateDocumentPage(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null)
        {
             RotateDocumentPageWithHttpInfo(accountId, templateId, documentId, pageNumber, pageRequest);
        }

        /// <summary>
        /// Rotates page image from a template for display. Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RotateDocumentPageWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->RotateDocumentPage");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->RotateDocumentPage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->RotateDocumentPage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TemplatesApi->RotateDocumentPage");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/page_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", this.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (pageRequest != null && pageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(pageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RotateDocumentPage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Rotates page image from a template for display. Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RotateDocumentPageAsync(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null)
        {
             await RotateDocumentPageAsyncWithHttpInfo(accountId, templateId, documentId, pageNumber, pageRequest);
        }

        /// <summary>
        /// Rotates page image from a template for display. Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RotateDocumentPageAsyncWithHttpInfo(string accountId, string templateId, string documentId, string pageNumber, PageRequest pageRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->RotateDocumentPage");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->RotateDocumentPage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->RotateDocumentPage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TemplatesApi->RotateDocumentPage");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/page_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", this.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (pageRequest != null && pageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(pageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RotateDocumentPage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }


        /// <summary>
        /// Updates an existing template. Updates an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns>TemplateUpdateSummary</returns>
        public TemplateUpdateSummary Update(string accountId, string templateId, EnvelopeTemplate envelopeTemplate = null)
        {
             ApiResponse<TemplateUpdateSummary> localVarResponse = UpdateWithHttpInfo(accountId, templateId, envelopeTemplate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing template. Updates an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns>ApiResponse of TemplateUpdateSummary</returns>
        public ApiResponse<TemplateUpdateSummary> UpdateWithHttpInfo(string accountId, string templateId, EnvelopeTemplate envelopeTemplate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->Update");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->Update");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (envelopeTemplate != null && envelopeTemplate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(envelopeTemplate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeTemplate; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateUpdateSummary>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (TemplateUpdateSummary)this.ApiClient.Deserialize(localVarResponse, typeof(TemplateUpdateSummary)));
        }

        /// <summary>
        /// Updates an existing template. Updates an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns>Task of TemplateUpdateSummary</returns>
        public async System.Threading.Tasks.Task<TemplateUpdateSummary> UpdateAsync(string accountId, string templateId, EnvelopeTemplate envelopeTemplate = null)
        {
             ApiResponse<TemplateUpdateSummary> localVarResponse = await UpdateAsyncWithHttpInfo(accountId, templateId, envelopeTemplate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing template. Updates an existing template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeTemplate"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateUpdateSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateUpdateSummary>> UpdateAsyncWithHttpInfo(string accountId, string templateId, EnvelopeTemplate envelopeTemplate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->Update");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->Update");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (envelopeTemplate != null && envelopeTemplate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(envelopeTemplate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeTemplate; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateUpdateSummary>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (TemplateUpdateSummary)this.ApiClient.Deserialize(localVarResponse, typeof(TemplateUpdateSummary)));
        }


        /// <summary>
        /// Updates envelope custom fields in a template. Updates the custom fields in a template.  Each custom field used in a template must have a unique name.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>CustomFields</returns>
        public CustomFields UpdateCustomFields(string accountId, string templateId, TemplateCustomFields templateCustomFields = null)
        {
             ApiResponse<CustomFields> localVarResponse = UpdateCustomFieldsWithHttpInfo(accountId, templateId, templateCustomFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates envelope custom fields in a template. Updates the custom fields in a template.  Each custom field used in a template must have a unique name.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>ApiResponse of CustomFields</returns>
        public ApiResponse<CustomFields> UpdateCustomFieldsWithHttpInfo(string accountId, string templateId, TemplateCustomFields templateCustomFields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateCustomFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateCustomFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templateCustomFields != null && templateCustomFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateCustomFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateCustomFields; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomFields>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CustomFields)this.ApiClient.Deserialize(localVarResponse, typeof(CustomFields)));
        }

        /// <summary>
        /// Updates envelope custom fields in a template. Updates the custom fields in a template.  Each custom field used in a template must have a unique name.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>Task of CustomFields</returns>
        public async System.Threading.Tasks.Task<CustomFields> UpdateCustomFieldsAsync(string accountId, string templateId, TemplateCustomFields templateCustomFields = null)
        {
             ApiResponse<CustomFields> localVarResponse = await UpdateCustomFieldsAsyncWithHttpInfo(accountId, templateId, templateCustomFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates envelope custom fields in a template. Updates the custom fields in a template.  Each custom field used in a template must have a unique name.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateCustomFields"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomFields)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomFields>> UpdateCustomFieldsAsyncWithHttpInfo(string accountId, string templateId, TemplateCustomFields templateCustomFields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateCustomFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateCustomFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templateCustomFields != null && templateCustomFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateCustomFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateCustomFields; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomFields>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (CustomFields)this.ApiClient.Deserialize(localVarResponse, typeof(CustomFields)));
        }

        /// <summary>
        /// Adds a document to a template document. Adds the specified document to an existing template document.
        /// </summary>
        public class UpdateDocumentOptions
        {
            /// 
            public string isEnvelopeDefinition {get; set;}
        }

        /// <summary>
        /// Adds a document to a template document. Adds the specified document to an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>EnvelopeDocument</returns>
        public EnvelopeDocument UpdateDocument(string accountId, string templateId, string documentId, EnvelopeDefinition envelopeDefinition = null, TemplatesApi.UpdateDocumentOptions options = null)
        {
             ApiResponse<EnvelopeDocument> localVarResponse = UpdateDocumentWithHttpInfo(accountId, templateId, documentId, envelopeDefinition, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a document to a template document. Adds the specified document to an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of EnvelopeDocument</returns>
        public ApiResponse<EnvelopeDocument> UpdateDocumentWithHttpInfo(string accountId, string templateId, string documentId, EnvelopeDefinition envelopeDefinition = null, TemplatesApi.UpdateDocumentOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateDocument");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->UpdateDocument");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (options != null)
            {
                if (options.isEnvelopeDefinition != null) localVarQueryParams.Add("is_envelope_definition", this.ApiClient.ParameterToString(options.isEnvelopeDefinition)); // query parameter
            }
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeDocument>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (EnvelopeDocument)this.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeDocument)));
        }

        /// <summary>
        /// Adds a document to a template document. Adds the specified document to an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of EnvelopeDocument</returns>
        public async System.Threading.Tasks.Task<EnvelopeDocument> UpdateDocumentAsync(string accountId, string templateId, string documentId, EnvelopeDefinition envelopeDefinition = null, TemplatesApi.UpdateDocumentOptions options = null)
        {
             ApiResponse<EnvelopeDocument> localVarResponse = await UpdateDocumentAsyncWithHttpInfo(accountId, templateId, documentId, envelopeDefinition, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a document to a template document. Adds the specified document to an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (EnvelopeDocument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeDocument>> UpdateDocumentAsyncWithHttpInfo(string accountId, string templateId, string documentId, EnvelopeDefinition envelopeDefinition = null, TemplatesApi.UpdateDocumentOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateDocument");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->UpdateDocument");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (options != null)
            {
                if (options.isEnvelopeDefinition != null) localVarQueryParams.Add("is_envelope_definition", this.ApiClient.ParameterToString(options.isEnvelopeDefinition)); // query parameter
            }
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeDocument>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (EnvelopeDocument)this.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeDocument)));
        }


        /// <summary>
        /// Updates existing custom document fields in an existing template document. Updates existing custom document fields in an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>DocumentFieldsInformation</returns>
        public DocumentFieldsInformation UpdateDocumentFields(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null)
        {
             ApiResponse<DocumentFieldsInformation> localVarResponse = UpdateDocumentFieldsWithHttpInfo(accountId, templateId, documentId, documentFieldsInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates existing custom document fields in an existing template document. Updates existing custom document fields in an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldsInformation</returns>
        public ApiResponse<DocumentFieldsInformation> UpdateDocumentFieldsWithHttpInfo(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateDocumentFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateDocumentFields");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->UpdateDocumentFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (documentFieldsInformation != null && documentFieldsInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(documentFieldsInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldsInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDocumentFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldsInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentFieldsInformation)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldsInformation)));
        }

        /// <summary>
        /// Updates existing custom document fields in an existing template document. Updates existing custom document fields in an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>Task of DocumentFieldsInformation</returns>
        public async System.Threading.Tasks.Task<DocumentFieldsInformation> UpdateDocumentFieldsAsync(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null)
        {
             ApiResponse<DocumentFieldsInformation> localVarResponse = await UpdateDocumentFieldsAsyncWithHttpInfo(accountId, templateId, documentId, documentFieldsInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates existing custom document fields in an existing template document. Updates existing custom document fields in an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="documentFieldsInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentFieldsInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldsInformation>> UpdateDocumentFieldsAsyncWithHttpInfo(string accountId, string templateId, string documentId, DocumentFieldsInformation documentFieldsInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateDocumentFields");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateDocumentFields");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->UpdateDocumentFields");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (documentFieldsInformation != null && documentFieldsInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(documentFieldsInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldsInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDocumentFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldsInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DocumentFieldsInformation)this.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldsInformation)));
        }


        /// <summary>
        /// Adds documents to a template document. Adds one or more documents to an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>TemplateDocumentsResult</returns>
        public TemplateDocumentsResult UpdateDocuments(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<TemplateDocumentsResult> localVarResponse = UpdateDocumentsWithHttpInfo(accountId, templateId, envelopeDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds documents to a template document. Adds one or more documents to an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of TemplateDocumentsResult</returns>
        public ApiResponse<TemplateDocumentsResult> UpdateDocumentsWithHttpInfo(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateDocuments");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateDocuments");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateDocumentsResult>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (TemplateDocumentsResult)this.ApiClient.Deserialize(localVarResponse, typeof(TemplateDocumentsResult)));
        }

        /// <summary>
        /// Adds documents to a template document. Adds one or more documents to an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of TemplateDocumentsResult</returns>
        public async System.Threading.Tasks.Task<TemplateDocumentsResult> UpdateDocumentsAsync(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<TemplateDocumentsResult> localVarResponse = await UpdateDocumentsAsyncWithHttpInfo(accountId, templateId, envelopeDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds documents to a template document. Adds one or more documents to an existing template document.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateDocumentsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateDocumentsResult>> UpdateDocumentsAsyncWithHttpInfo(string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateDocuments");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateDocuments");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateDocumentsResult>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (TemplateDocumentsResult)this.ApiClient.Deserialize(localVarResponse, typeof(TemplateDocumentsResult)));
        }


        /// <summary>
        /// Shares a template with a group Shares a template with the specified members group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>GroupInformation</returns>
        public GroupInformation UpdateGroupShare(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null)
        {
             ApiResponse<GroupInformation> localVarResponse = UpdateGroupShareWithHttpInfo(accountId, templateId, templatePart, groupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Shares a template with a group Shares a template with the specified members group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>ApiResponse of GroupInformation</returns>
        public ApiResponse<GroupInformation> UpdateGroupShareWithHttpInfo(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateGroupShare");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateGroupShare");
            // verify the required parameter 'templatePart' is set
            if (templatePart == null)
                throw new ApiException(400, "Missing required parameter 'templatePart' when calling TemplatesApi->UpdateGroupShare");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/{templatePart}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templatePart != null) localVarPathParams.Add("templatePart", this.ApiClient.ParameterToString(templatePart)); // path parameter
            if (groupInformation != null && groupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(groupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroupShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (GroupInformation)this.ApiClient.Deserialize(localVarResponse, typeof(GroupInformation)));
        }

        /// <summary>
        /// Shares a template with a group Shares a template with the specified members group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of GroupInformation</returns>
        public async System.Threading.Tasks.Task<GroupInformation> UpdateGroupShareAsync(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null)
        {
             ApiResponse<GroupInformation> localVarResponse = await UpdateGroupShareAsyncWithHttpInfo(accountId, templateId, templatePart, groupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Shares a template with a group Shares a template with the specified members group.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInformation>> UpdateGroupShareAsyncWithHttpInfo(string accountId, string templateId, string templatePart, GroupInformation groupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateGroupShare");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateGroupShare");
            // verify the required parameter 'templatePart' is set
            if (templatePart == null)
                throw new ApiException(400, "Missing required parameter 'templatePart' when calling TemplatesApi->UpdateGroupShare");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/{templatePart}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templatePart != null) localVarPathParams.Add("templatePart", this.ApiClient.ParameterToString(templatePart)); // path parameter
            if (groupInformation != null && groupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(groupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupInformation; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroupShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (GroupInformation)this.ApiClient.Deserialize(localVarResponse, typeof(GroupInformation)));
        }


        /// <summary>
        /// Updates a template lock. Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>LockInformation</returns>
        public LockInformation UpdateLock(string accountId, string templateId, LockRequest lockRequest = null)
        {
             ApiResponse<LockInformation> localVarResponse = UpdateLockWithHttpInfo(accountId, templateId, lockRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a template lock. Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of LockInformation</returns>
        public ApiResponse<LockInformation> UpdateLockWithHttpInfo(string accountId, string templateId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateLock");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LockInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (LockInformation)this.ApiClient.Deserialize(localVarResponse, typeof(LockInformation)));
        }

        /// <summary>
        /// Updates a template lock. Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of LockInformation</returns>
        public async System.Threading.Tasks.Task<LockInformation> UpdateLockAsync(string accountId, string templateId, LockRequest lockRequest = null)
        {
             ApiResponse<LockInformation> localVarResponse = await UpdateLockAsyncWithHttpInfo(accountId, templateId, lockRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a template lock. Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (LockInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LockInformation>> UpdateLockAsyncWithHttpInfo(string accountId, string templateId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateLock");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LockInformation>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (LockInformation)this.ApiClient.Deserialize(localVarResponse, typeof(LockInformation)));
        }


        /// <summary>
        /// Updates the notification  structure for an existing template. Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>Notification</returns>
        public Notification UpdateNotificationSettings(string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null)
        {
             ApiResponse<Notification> localVarResponse = UpdateNotificationSettingsWithHttpInfo(accountId, templateId, templateNotificationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the notification  structure for an existing template. Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>ApiResponse of Notification</returns>
        public ApiResponse<Notification> UpdateNotificationSettingsWithHttpInfo(string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateNotificationSettings");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateNotificationSettings");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templateNotificationRequest != null && templateNotificationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateNotificationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateNotificationRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Notification)this.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
        }

        /// <summary>
        /// Updates the notification  structure for an existing template. Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> UpdateNotificationSettingsAsync(string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null)
        {
             ApiResponse<Notification> localVarResponse = await UpdateNotificationSettingsAsyncWithHttpInfo(accountId, templateId, templateNotificationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the notification  structure for an existing template. Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Notification>> UpdateNotificationSettingsAsyncWithHttpInfo(string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateNotificationSettings");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateNotificationSettings");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (templateNotificationRequest != null && templateNotificationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateNotificationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateNotificationRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Notification)this.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
        }

        /// <summary>
        /// Updates recipients in a template. Updates recipients in a template.   You can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.
        /// </summary>
        public class UpdateRecipientsOptions
        {
            /// 
            public string resendEnvelope {get; set;}
        }

        /// <summary>
        /// Updates recipients in a template. Updates recipients in a template.   You can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>RecipientsUpdateSummary</returns>
        public RecipientsUpdateSummary UpdateRecipients(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.UpdateRecipientsOptions options = null)
        {
             ApiResponse<RecipientsUpdateSummary> localVarResponse = UpdateRecipientsWithHttpInfo(accountId, templateId, templateRecipients, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates recipients in a template. Updates recipients in a template.   You can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of RecipientsUpdateSummary</returns>
        public ApiResponse<RecipientsUpdateSummary> UpdateRecipientsWithHttpInfo(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.UpdateRecipientsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateRecipients");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateRecipients");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (options != null)
            {
                if (options.resendEnvelope != null) localVarQueryParams.Add("resend_envelope", this.ApiClient.ParameterToString(options.resendEnvelope)); // query parameter
            }
            if (templateRecipients != null && templateRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateRecipients; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecipientsUpdateSummary>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (RecipientsUpdateSummary)this.ApiClient.Deserialize(localVarResponse, typeof(RecipientsUpdateSummary)));
        }

        /// <summary>
        /// Updates recipients in a template. Updates recipients in a template.   You can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of RecipientsUpdateSummary</returns>
        public async System.Threading.Tasks.Task<RecipientsUpdateSummary> UpdateRecipientsAsync(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.UpdateRecipientsOptions options = null)
        {
             ApiResponse<RecipientsUpdateSummary> localVarResponse = await UpdateRecipientsAsyncWithHttpInfo(accountId, templateId, templateRecipients, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates recipients in a template. Updates recipients in a template.   You can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateRecipients"> (optional)</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (RecipientsUpdateSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecipientsUpdateSummary>> UpdateRecipientsAsyncWithHttpInfo(string accountId, string templateId, TemplateRecipients templateRecipients = null, TemplatesApi.UpdateRecipientsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateRecipients");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateRecipients");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (options != null)
            {
                if (options.resendEnvelope != null) localVarQueryParams.Add("resend_envelope", this.ApiClient.ParameterToString(options.resendEnvelope)); // query parameter
            }
            if (templateRecipients != null && templateRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateRecipients; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecipientsUpdateSummary>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (RecipientsUpdateSummary)this.ApiClient.Deserialize(localVarResponse, typeof(RecipientsUpdateSummary)));
        }


        /// <summary>
        /// Updates the tabs for a recipient. Updates one or more tabs for a recipient in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Tabs</returns>
        public Tabs UpdateTabs(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null)
        {
             ApiResponse<Tabs> localVarResponse = UpdateTabsWithHttpInfo(accountId, templateId, recipientId, templateTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the tabs for a recipient. Updates one or more tabs for a recipient in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>ApiResponse of Tabs</returns>
        public ApiResponse<Tabs> UpdateTabsWithHttpInfo(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateTabs");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TemplatesApi->UpdateTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", this.ApiClient.ParameterToString(recipientId)); // path parameter
            if (templateTabs != null && templateTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateTabs; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }

        /// <summary>
        /// Updates the tabs for a recipient. Updates one or more tabs for a recipient in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of Tabs</returns>
        public async System.Threading.Tasks.Task<Tabs> UpdateTabsAsync(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null)
        {
             ApiResponse<Tabs> localVarResponse = await UpdateTabsAsyncWithHttpInfo(accountId, templateId, recipientId, templateTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the tabs for a recipient. Updates one or more tabs for a recipient in a template.
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="recipientId">The ID of the recipient being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tabs>> UpdateTabsAsyncWithHttpInfo(string accountId, string templateId, string recipientId, TemplateTabs templateTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateTabs");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TemplatesApi->UpdateTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", this.ApiClient.ParameterToString(recipientId)); // path parameter
            if (templateTabs != null && templateTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateTabs; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }


        /// <summary>
        /// Updates the tabs for a template Updates tabs in the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Tabs</returns>
        public Tabs UpdateTemplateDocumentTabs(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null)
        {
             ApiResponse<Tabs> localVarResponse = UpdateTemplateDocumentTabsWithHttpInfo(accountId, templateId, documentId, templateTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the tabs for a template Updates tabs in the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>ApiResponse of Tabs</returns>
        public ApiResponse<Tabs> UpdateTemplateDocumentTabsWithHttpInfo(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateTemplateDocumentTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateTemplateDocumentTabs");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->UpdateTemplateDocumentTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (templateTabs != null && templateTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateTabs; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplateDocumentTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }

        /// <summary>
        /// Updates the tabs for a template Updates tabs in the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of Tabs</returns>
        public async System.Threading.Tasks.Task<Tabs> UpdateTemplateDocumentTabsAsync(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null)
        {
             ApiResponse<Tabs> localVarResponse = await UpdateTemplateDocumentTabsAsyncWithHttpInfo(accountId, templateId, documentId, templateTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the tabs for a template Updates tabs in the document specified by &#x60;documentId&#x60; in the template specified by &#x60;templateId&#x60;. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (Tabs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tabs>> UpdateTemplateDocumentTabsAsyncWithHttpInfo(string accountId, string templateId, string documentId, TemplateTabs templateTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateTemplateDocumentTabs");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->UpdateTemplateDocumentTabs");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->UpdateTemplateDocumentTabs");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}/tabs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", this.ApiClient.ParameterToString(templateId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.ApiClient.ParameterToString(documentId)); // path parameter
            if (templateTabs != null && templateTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateTabs; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplateDocumentTabs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tabs>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Tabs)this.ApiClient.Deserialize(localVarResponse, typeof(Tabs)));
        }


        /// <summary>
        /// Update template autoMatch setting. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns>TemplateAutoMatchList</returns>
        public TemplateAutoMatchList UpdateTemplates(string accountId, TemplateAutoMatchList templateAutoMatchList = null)
        {
             ApiResponse<TemplateAutoMatchList> localVarResponse = UpdateTemplatesWithHttpInfo(accountId, templateAutoMatchList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update template autoMatch setting. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns>ApiResponse of TemplateAutoMatchList</returns>
        public ApiResponse<TemplateAutoMatchList> UpdateTemplatesWithHttpInfo(string accountId, TemplateAutoMatchList templateAutoMatchList = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateTemplates");

            var localVarPath = "/v2.1/accounts/{accountId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateAutoMatchList != null && templateAutoMatchList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateAutoMatchList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateAutoMatchList; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateAutoMatchList>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (TemplateAutoMatchList)this.ApiClient.Deserialize(localVarResponse, typeof(TemplateAutoMatchList)));
        }

        /// <summary>
        /// Update template autoMatch setting. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns>Task of TemplateAutoMatchList</returns>
        public async System.Threading.Tasks.Task<TemplateAutoMatchList> UpdateTemplatesAsync(string accountId, TemplateAutoMatchList templateAutoMatchList = null)
        {
             ApiResponse<TemplateAutoMatchList> localVarResponse = await UpdateTemplatesAsyncWithHttpInfo(accountId, templateAutoMatchList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update template autoMatch setting. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateAutoMatchList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateAutoMatchList>> UpdateTemplatesAsyncWithHttpInfo(string accountId, TemplateAutoMatchList templateAutoMatchList = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateTemplates");

            var localVarPath = "/v2.1/accounts/{accountId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateAutoMatchList != null && templateAutoMatchList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateAutoMatchList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateAutoMatchList; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateAutoMatchList>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (TemplateAutoMatchList)this.ApiClient.Deserialize(localVarResponse, typeof(TemplateAutoMatchList)));
        }


        /// <summary>
        /// Update template autoMatch setting. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns>TemplateAutoMatchList</returns>
        public TemplateAutoMatchList UpdateTemplatesAutoMatch(string accountId, TemplateAutoMatchList templateAutoMatchList = null)
        {
             ApiResponse<TemplateAutoMatchList> localVarResponse = UpdateTemplatesAutoMatchWithHttpInfo(accountId, templateAutoMatchList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update template autoMatch setting. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns>ApiResponse of TemplateAutoMatchList</returns>
        public ApiResponse<TemplateAutoMatchList> UpdateTemplatesAutoMatchWithHttpInfo(string accountId, TemplateAutoMatchList templateAutoMatchList = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateTemplatesAutoMatch");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/auto_match";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateAutoMatchList != null && templateAutoMatchList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateAutoMatchList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateAutoMatchList; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplatesAutoMatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateAutoMatchList>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (TemplateAutoMatchList)this.ApiClient.Deserialize(localVarResponse, typeof(TemplateAutoMatchList)));
        }

        /// <summary>
        /// Update template autoMatch setting. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns>Task of TemplateAutoMatchList</returns>
        public async System.Threading.Tasks.Task<TemplateAutoMatchList> UpdateTemplatesAutoMatchAsync(string accountId, TemplateAutoMatchList templateAutoMatchList = null)
        {
             ApiResponse<TemplateAutoMatchList> localVarResponse = await UpdateTemplatesAutoMatchAsyncWithHttpInfo(accountId, templateAutoMatchList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update template autoMatch setting. 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateAutoMatchList"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateAutoMatchList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateAutoMatchList>> UpdateTemplatesAutoMatchAsyncWithHttpInfo(string accountId, TemplateAutoMatchList templateAutoMatchList = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->UpdateTemplatesAutoMatch");

            var localVarPath = "/v2.1/accounts/{accountId}/templates/auto_match";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateAutoMatchList != null && templateAutoMatchList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(templateAutoMatchList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateAutoMatchList; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplatesAutoMatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateAutoMatchList>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (TemplateAutoMatchList)this.ApiClient.Deserialize(localVarResponse, typeof(TemplateAutoMatchList)));
        }

    }
}