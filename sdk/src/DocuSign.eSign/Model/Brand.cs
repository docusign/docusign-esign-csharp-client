/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
    /// </summary>
    [DataContract]
    public partial class Brand :  IEquatable<Brand>, IValidatableObject
    {
        public Brand()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Brand" /> class.
        /// </summary>
        /// <param name="BrandCompany">The name of the company associated with this brand..</param>
        /// <param name="BrandId">The ID used to identify a specific brand in API calls..</param>
        /// <param name="BrandLanguages">BrandLanguages.</param>
        /// <param name="BrandName">The name of the brand..</param>
        /// <param name="Colors">Colors.</param>
        /// <param name="DefaultBrandLanguage">DefaultBrandLanguage.</param>
        /// <param name="EmailContent">EmailContent.</param>
        /// <param name="ErrorDetails">Array or errors..</param>
        /// <param name="IsOrganizationBrand">IsOrganizationBrand.</param>
        /// <param name="IsOverridingCompanyName">IsOverridingCompanyName.</param>
        /// <param name="IsSendingDefault">IsSendingDefault.</param>
        /// <param name="IsSigningDefault">IsSigningDefault.</param>
        /// <param name="LandingPages">LandingPages.</param>
        /// <param name="Links">Links.</param>
        /// <param name="Logos">The URIs for retrieving the logos that are associated with the brand..</param>
        /// <param name="OrganizationBrandLogo">OrganizationBrandLogo.</param>
        /// <param name="Resources">An object containing the URLs for the four DocuSign master resource files that the brand uses for sending, signing, email messages, and captive (embedded) signing. You can modify the default email messages and formats in these file to customize the user experience.  **Note:** This object is returned only when the &#x60;resourceContentType&#x60; is &#x60;sending&#x60;, &#x60;signing&#x60;, &#x60;email&#x60;, or &#x60;signing_captive&#x60;..</param>
        public Brand(string BrandCompany = default(string), string BrandId = default(string), List<string> BrandLanguages = default(List<string>), string BrandName = default(string), List<NameValue> Colors = default(List<NameValue>), string DefaultBrandLanguage = default(string), List<BrandEmailContent> EmailContent = default(List<BrandEmailContent>), ErrorDetails ErrorDetails = default(ErrorDetails), string IsOrganizationBrand = default(string), bool? IsOverridingCompanyName = default(bool?), bool? IsSendingDefault = default(bool?), bool? IsSigningDefault = default(bool?), List<NameValue> LandingPages = default(List<NameValue>), List<BrandLink> Links = default(List<BrandLink>), BrandLogos Logos = default(BrandLogos), string OrganizationBrandLogo = default(string), BrandResourceUrls Resources = default(BrandResourceUrls))
        {
            this.BrandCompany = BrandCompany;
            this.BrandId = BrandId;
            this.BrandLanguages = BrandLanguages;
            this.BrandName = BrandName;
            this.Colors = Colors;
            this.DefaultBrandLanguage = DefaultBrandLanguage;
            this.EmailContent = EmailContent;
            this.ErrorDetails = ErrorDetails;
            this.IsOrganizationBrand = IsOrganizationBrand;
            this.IsOverridingCompanyName = IsOverridingCompanyName;
            this.IsSendingDefault = IsSendingDefault;
            this.IsSigningDefault = IsSigningDefault;
            this.LandingPages = LandingPages;
            this.Links = Links;
            this.Logos = Logos;
            this.OrganizationBrandLogo = OrganizationBrandLogo;
            this.Resources = Resources;
        }
        
        /// <summary>
        /// The name of the company associated with this brand.
        /// </summary>
        /// <value>The name of the company associated with this brand.</value>
        [DataMember(Name="brandCompany", EmitDefaultValue=false)]
        public string BrandCompany { get; set; }
        /// <summary>
        /// The ID used to identify a specific brand in API calls.
        /// </summary>
        /// <value>The ID used to identify a specific brand in API calls.</value>
        [DataMember(Name="brandId", EmitDefaultValue=false)]
        public string BrandId { get; set; }
        /// <summary>
        /// Gets or Sets BrandLanguages
        /// </summary>
        [DataMember(Name="brandLanguages", EmitDefaultValue=false)]
        public List<string> BrandLanguages { get; set; }
        /// <summary>
        /// The name of the brand.
        /// </summary>
        /// <value>The name of the brand.</value>
        [DataMember(Name="brandName", EmitDefaultValue=false)]
        public string BrandName { get; set; }
        /// <summary>
        /// Gets or Sets Colors
        /// </summary>
        [DataMember(Name="colors", EmitDefaultValue=false)]
        public List<NameValue> Colors { get; set; }
        /// <summary>
        /// Gets or Sets DefaultBrandLanguage
        /// </summary>
        [DataMember(Name="defaultBrandLanguage", EmitDefaultValue=false)]
        public string DefaultBrandLanguage { get; set; }
        /// <summary>
        /// Gets or Sets EmailContent
        /// </summary>
        [DataMember(Name="emailContent", EmitDefaultValue=false)]
        public List<BrandEmailContent> EmailContent { get; set; }
        /// <summary>
        /// Array or errors.
        /// </summary>
        /// <value>Array or errors.</value>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// Gets or Sets IsOrganizationBrand
        /// </summary>
        [DataMember(Name="isOrganizationBrand", EmitDefaultValue=false)]
        public string IsOrganizationBrand { get; set; }
        /// <summary>
        /// Gets or Sets IsOverridingCompanyName
        /// </summary>
        [DataMember(Name="isOverridingCompanyName", EmitDefaultValue=false)]
        public bool? IsOverridingCompanyName { get; set; }
        /// <summary>
        /// Gets or Sets IsSendingDefault
        /// </summary>
        [DataMember(Name="isSendingDefault", EmitDefaultValue=false)]
        public bool? IsSendingDefault { get; set; }
        /// <summary>
        /// Gets or Sets IsSigningDefault
        /// </summary>
        [DataMember(Name="isSigningDefault", EmitDefaultValue=false)]
        public bool? IsSigningDefault { get; set; }
        /// <summary>
        /// Gets or Sets LandingPages
        /// </summary>
        [DataMember(Name="landingPages", EmitDefaultValue=false)]
        public List<NameValue> LandingPages { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<BrandLink> Links { get; set; }
        /// <summary>
        /// The URIs for retrieving the logos that are associated with the brand.
        /// </summary>
        /// <value>The URIs for retrieving the logos that are associated with the brand.</value>
        [DataMember(Name="logos", EmitDefaultValue=false)]
        public BrandLogos Logos { get; set; }
        /// <summary>
        /// Gets or Sets OrganizationBrandLogo
        /// </summary>
        [DataMember(Name="organizationBrandLogo", EmitDefaultValue=false)]
        public string OrganizationBrandLogo { get; set; }
        /// <summary>
        /// An object containing the URLs for the four DocuSign master resource files that the brand uses for sending, signing, email messages, and captive (embedded) signing. You can modify the default email messages and formats in these file to customize the user experience.  **Note:** This object is returned only when the &#x60;resourceContentType&#x60; is &#x60;sending&#x60;, &#x60;signing&#x60;, &#x60;email&#x60;, or &#x60;signing_captive&#x60;.
        /// </summary>
        /// <value>An object containing the URLs for the four DocuSign master resource files that the brand uses for sending, signing, email messages, and captive (embedded) signing. You can modify the default email messages and formats in these file to customize the user experience.  **Note:** This object is returned only when the &#x60;resourceContentType&#x60; is &#x60;sending&#x60;, &#x60;signing&#x60;, &#x60;email&#x60;, or &#x60;signing_captive&#x60;.</value>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public BrandResourceUrls Resources { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Brand {\n");
            sb.Append("  BrandCompany: ").Append(BrandCompany).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  BrandLanguages: ").Append(BrandLanguages).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("  DefaultBrandLanguage: ").Append(DefaultBrandLanguage).Append("\n");
            sb.Append("  EmailContent: ").Append(EmailContent).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  IsOrganizationBrand: ").Append(IsOrganizationBrand).Append("\n");
            sb.Append("  IsOverridingCompanyName: ").Append(IsOverridingCompanyName).Append("\n");
            sb.Append("  IsSendingDefault: ").Append(IsSendingDefault).Append("\n");
            sb.Append("  IsSigningDefault: ").Append(IsSigningDefault).Append("\n");
            sb.Append("  LandingPages: ").Append(LandingPages).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Logos: ").Append(Logos).Append("\n");
            sb.Append("  OrganizationBrandLogo: ").Append(OrganizationBrandLogo).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Brand);
        }

        /// <summary>
        /// Returns true if Brand instances are equal
        /// </summary>
        /// <param name="other">Instance of Brand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Brand other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BrandCompany == other.BrandCompany ||
                    this.BrandCompany != null &&
                    this.BrandCompany.Equals(other.BrandCompany)
                ) && 
                (
                    this.BrandId == other.BrandId ||
                    this.BrandId != null &&
                    this.BrandId.Equals(other.BrandId)
                ) && 
                (
                    this.BrandLanguages == other.BrandLanguages ||
                    this.BrandLanguages != null &&
                    this.BrandLanguages.SequenceEqual(other.BrandLanguages)
                ) && 
                (
                    this.BrandName == other.BrandName ||
                    this.BrandName != null &&
                    this.BrandName.Equals(other.BrandName)
                ) && 
                (
                    this.Colors == other.Colors ||
                    this.Colors != null &&
                    this.Colors.SequenceEqual(other.Colors)
                ) && 
                (
                    this.DefaultBrandLanguage == other.DefaultBrandLanguage ||
                    this.DefaultBrandLanguage != null &&
                    this.DefaultBrandLanguage.Equals(other.DefaultBrandLanguage)
                ) && 
                (
                    this.EmailContent == other.EmailContent ||
                    this.EmailContent != null &&
                    this.EmailContent.SequenceEqual(other.EmailContent)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.IsOrganizationBrand == other.IsOrganizationBrand ||
                    this.IsOrganizationBrand != null &&
                    this.IsOrganizationBrand.Equals(other.IsOrganizationBrand)
                ) && 
                (
                    this.IsOverridingCompanyName == other.IsOverridingCompanyName ||
                    this.IsOverridingCompanyName != null &&
                    this.IsOverridingCompanyName.Equals(other.IsOverridingCompanyName)
                ) && 
                (
                    this.IsSendingDefault == other.IsSendingDefault ||
                    this.IsSendingDefault != null &&
                    this.IsSendingDefault.Equals(other.IsSendingDefault)
                ) && 
                (
                    this.IsSigningDefault == other.IsSigningDefault ||
                    this.IsSigningDefault != null &&
                    this.IsSigningDefault.Equals(other.IsSigningDefault)
                ) && 
                (
                    this.LandingPages == other.LandingPages ||
                    this.LandingPages != null &&
                    this.LandingPages.SequenceEqual(other.LandingPages)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(other.Links)
                ) && 
                (
                    this.Logos == other.Logos ||
                    this.Logos != null &&
                    this.Logos.Equals(other.Logos)
                ) && 
                (
                    this.OrganizationBrandLogo == other.OrganizationBrandLogo ||
                    this.OrganizationBrandLogo != null &&
                    this.OrganizationBrandLogo.Equals(other.OrganizationBrandLogo)
                ) && 
                (
                    this.Resources == other.Resources ||
                    this.Resources != null &&
                    this.Resources.Equals(other.Resources)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BrandCompany != null)
                    hash = hash * 59 + this.BrandCompany.GetHashCode();
                if (this.BrandId != null)
                    hash = hash * 59 + this.BrandId.GetHashCode();
                if (this.BrandLanguages != null)
                    hash = hash * 59 + this.BrandLanguages.GetHashCode();
                if (this.BrandName != null)
                    hash = hash * 59 + this.BrandName.GetHashCode();
                if (this.Colors != null)
                    hash = hash * 59 + this.Colors.GetHashCode();
                if (this.DefaultBrandLanguage != null)
                    hash = hash * 59 + this.DefaultBrandLanguage.GetHashCode();
                if (this.EmailContent != null)
                    hash = hash * 59 + this.EmailContent.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.IsOrganizationBrand != null)
                    hash = hash * 59 + this.IsOrganizationBrand.GetHashCode();
                if (this.IsOverridingCompanyName != null)
                    hash = hash * 59 + this.IsOverridingCompanyName.GetHashCode();
                if (this.IsSendingDefault != null)
                    hash = hash * 59 + this.IsSendingDefault.GetHashCode();
                if (this.IsSigningDefault != null)
                    hash = hash * 59 + this.IsSigningDefault.GetHashCode();
                if (this.LandingPages != null)
                    hash = hash * 59 + this.LandingPages.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.Logos != null)
                    hash = hash * 59 + this.Logos.GetHashCode();
                if (this.OrganizationBrandLogo != null)
                    hash = hash * 59 + this.OrganizationBrandLogo.GetHashCode();
                if (this.Resources != null)
                    hash = hash * 59 + this.Resources.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
