/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// The &#x60;connectCustomConfiguration&#x60; object describes how Connect is configured for your account.
    /// </summary>
    [DataContract]
    public partial class ConnectCustomConfiguration :  IEquatable<ConnectCustomConfiguration>, IValidatableObject
    {
        public ConnectCustomConfiguration()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectCustomConfiguration" /> class.
        /// </summary>
        /// <param name="AllowEnvelopePublish">When set to **true**, data is sent to the urlToPublishTo web address. This option can be set to false to stop sending data while maintaining the Connect configuration information..</param>
        /// <param name="AllowSalesforcePublish">AllowSalesforcePublish.</param>
        /// <param name="AllUsers">When set to **true**, the tracked envelope and recipient events for all users, including users that are added a later time, are sent through Connect..</param>
        /// <param name="AllUsersExcept">AllUsersExcept.</param>
        /// <param name="ConfigurationType">If merge field&#39;s are being used, specifies the type of the merge field. The only  supported value is **salesforce**..</param>
        /// <param name="ConnectId"> Specifies the DocuSign generated ID for the Connect configuration.  .</param>
        /// <param name="DeliveryMode">DeliveryMode.</param>
        /// <param name="DisabledBy">DisabledBy.</param>
        /// <param name="EnableLog">This turns Connect logging on or off. When set to **true**, logging is turned on..</param>
        /// <param name="EnvelopeEvents">A comma separated list of ï¿½Envelopeï¿½ related events that are tracked through Connect. The possible event values are: Sent, Delivered, Completed, Declined, and Voided..</param>
        /// <param name="EventData">Allows you to specify the format of the information the Connect webhooks returns. For more information, see [Connect webhooks with JSON notifications](https://www.docusign.com/blog/developers/connect-webhooks-json-notifications).</param>
        /// <param name="Events">Events.</param>
        /// <param name="ExternalFolderId">ExternalFolderId.</param>
        /// <param name="ExternalFolderLabel">ExternalFolderLabel.</param>
        /// <param name="GroupIds">GroupIds.</param>
        /// <param name="IncludeCertificateOfCompletion">When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes. .</param>
        /// <param name="IncludeCertSoapHeader">IncludeCertSoapHeader.</param>
        /// <param name="IncludeDocumentFields">When set to **true**, the Document Fields associated with envelope documents are included in the data. Document Fields are optional custom name-value pairs added to documents using the API. .</param>
        /// <param name="IncludeDocuments">When set to **true**, Connect will send the PDF document along with the update XML..</param>
        /// <param name="IncludeEnvelopeVoidReason">When set to **true**, Connect will include the voidedReason for voided envelopes..</param>
        /// <param name="IncludeHMAC">IncludeHMAC.</param>
        /// <param name="IncludeOAuth">IncludeOAuth.</param>
        /// <param name="IncludeSenderAccountasCustomField">When set to **true**, Connect will include the sender account as Custom Field in the data..</param>
        /// <param name="IncludeTimeZoneInformation">When set to **true**, Connect will include the envelope time zone information..</param>
        /// <param name="IntegratorManaged">IntegratorManaged.</param>
        /// <param name="Name">The name of the Connect configuration. The name helps identify the configuration in the list..</param>
        /// <param name="Password">Password.</param>
        /// <param name="PausePublish">PausePublish.</param>
        /// <param name="RecipientEvents">A comma separated list of ï¿½Recipientï¿½ related events that are tracked through Connect. The possible event values are: Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded..</param>
        /// <param name="RequireMutualTls">RequireMutualTls.</param>
        /// <param name="RequiresAcknowledgement">When set to **true**, and a publication message fails to be acknowledged, the message goes back into the queue and the system will retry delivery after a successful acknowledgement is received. If the delivery fails a second time, the message is not returned to the queue for sending until Connect receives a successful acknowledgement and it has been at least 24 hours since the previous retry. There is a maximum of ten retries Alternately, you can use Republish Connect Information to manually republish the envelope information..</param>
        /// <param name="SalesforceApiVersion">SalesforceApiVersion.</param>
        /// <param name="SalesforceAuthcode">SalesforceAuthcode.</param>
        /// <param name="SalesforceCallBackUrl">SalesforceCallBackUrl.</param>
        /// <param name="SalesforceDocumentsAsContentFiles">SalesforceDocumentsAsContentFiles.</param>
        /// <param name="SenderOverride">SenderOverride.</param>
        /// <param name="SenderSelectableItems">SenderSelectableItems.</param>
        /// <param name="SfObjects">SfObjects.</param>
        /// <param name="SignMessageWithX509Certificate">When set to **true**, Connect messages are signed with an X509 certificate. This provides support for 2-way SSL..</param>
        /// <param name="SoapNamespace">The namespace of the SOAP interface.  The namespace value must be set if useSoapInterface is set to true..</param>
        /// <param name="UrlToPublishTo">This is the web address and name of your listener or Retrieving Service endpoint. You need to include HTTPS:// in the web address..</param>
        /// <param name="UserIds">A comma separated list of userIds. This sets the users associated with the tracked envelope and recipient events. When one of the event occurs for a set user, the information is sent through Connect.   ###### Note: If allUsers is set to ï¿½falseï¿½ then you must provide a list of user idï¿½s..</param>
        /// <param name="UserName">UserName.</param>
        /// <param name="UseSoapInterface">When set to **true**, indicates that the &#x60;urlToPublishTo&#x60; property contains a SOAP endpoint..</param>
        public ConnectCustomConfiguration(string AllowEnvelopePublish = default(string), string AllowSalesforcePublish = default(string), string AllUsers = default(string), string AllUsersExcept = default(string), string ConfigurationType = default(string), string ConnectId = default(string), string DeliveryMode = default(string), string DisabledBy = default(string), string EnableLog = default(string), List<string> EnvelopeEvents = default(List<string>), ConnectEventData EventData = default(ConnectEventData), List<string> Events = default(List<string>), string ExternalFolderId = default(string), string ExternalFolderLabel = default(string), List<string> GroupIds = default(List<string>), string IncludeCertificateOfCompletion = default(string), string IncludeCertSoapHeader = default(string), string IncludeDocumentFields = default(string), string IncludeDocuments = default(string), string IncludeEnvelopeVoidReason = default(string), string IncludeHMAC = default(string), string IncludeOAuth = default(string), string IncludeSenderAccountasCustomField = default(string), string IncludeTimeZoneInformation = default(string), string IntegratorManaged = default(string), string Name = default(string), string Password = default(string), string PausePublish = default(string), List<string> RecipientEvents = default(List<string>), string RequireMutualTls = default(string), string RequiresAcknowledgement = default(string), string SalesforceApiVersion = default(string), string SalesforceAuthcode = default(string), string SalesforceCallBackUrl = default(string), string SalesforceDocumentsAsContentFiles = default(string), string SenderOverride = default(string), List<string> SenderSelectableItems = default(List<string>), List<ConnectSalesforceObject> SfObjects = default(List<ConnectSalesforceObject>), string SignMessageWithX509Certificate = default(string), string SoapNamespace = default(string), string UrlToPublishTo = default(string), List<string> UserIds = default(List<string>), string UserName = default(string), string UseSoapInterface = default(string))
        {
            this.AllowEnvelopePublish = AllowEnvelopePublish;
            this.AllowSalesforcePublish = AllowSalesforcePublish;
            this.AllUsers = AllUsers;
            this.AllUsersExcept = AllUsersExcept;
            this.ConfigurationType = ConfigurationType;
            this.ConnectId = ConnectId;
            this.DeliveryMode = DeliveryMode;
            this.DisabledBy = DisabledBy;
            this.EnableLog = EnableLog;
            this.EnvelopeEvents = EnvelopeEvents;
            this.EventData = EventData;
            this.Events = Events;
            this.ExternalFolderId = ExternalFolderId;
            this.ExternalFolderLabel = ExternalFolderLabel;
            this.GroupIds = GroupIds;
            this.IncludeCertificateOfCompletion = IncludeCertificateOfCompletion;
            this.IncludeCertSoapHeader = IncludeCertSoapHeader;
            this.IncludeDocumentFields = IncludeDocumentFields;
            this.IncludeDocuments = IncludeDocuments;
            this.IncludeEnvelopeVoidReason = IncludeEnvelopeVoidReason;
            this.IncludeHMAC = IncludeHMAC;
            this.IncludeOAuth = IncludeOAuth;
            this.IncludeSenderAccountasCustomField = IncludeSenderAccountasCustomField;
            this.IncludeTimeZoneInformation = IncludeTimeZoneInformation;
            this.IntegratorManaged = IntegratorManaged;
            this.Name = Name;
            this.Password = Password;
            this.PausePublish = PausePublish;
            this.RecipientEvents = RecipientEvents;
            this.RequireMutualTls = RequireMutualTls;
            this.RequiresAcknowledgement = RequiresAcknowledgement;
            this.SalesforceApiVersion = SalesforceApiVersion;
            this.SalesforceAuthcode = SalesforceAuthcode;
            this.SalesforceCallBackUrl = SalesforceCallBackUrl;
            this.SalesforceDocumentsAsContentFiles = SalesforceDocumentsAsContentFiles;
            this.SenderOverride = SenderOverride;
            this.SenderSelectableItems = SenderSelectableItems;
            this.SfObjects = SfObjects;
            this.SignMessageWithX509Certificate = SignMessageWithX509Certificate;
            this.SoapNamespace = SoapNamespace;
            this.UrlToPublishTo = UrlToPublishTo;
            this.UserIds = UserIds;
            this.UserName = UserName;
            this.UseSoapInterface = UseSoapInterface;
        }
        
        /// <summary>
        /// When set to **true**, data is sent to the urlToPublishTo web address. This option can be set to false to stop sending data while maintaining the Connect configuration information.
        /// </summary>
        /// <value>When set to **true**, data is sent to the urlToPublishTo web address. This option can be set to false to stop sending data while maintaining the Connect configuration information.</value>
        [DataMember(Name="allowEnvelopePublish", EmitDefaultValue=false)]
        public string AllowEnvelopePublish { get; set; }
        /// <summary>
        /// Gets or Sets AllowSalesforcePublish
        /// </summary>
        [DataMember(Name="allowSalesforcePublish", EmitDefaultValue=false)]
        public string AllowSalesforcePublish { get; set; }
        /// <summary>
        /// When set to **true**, the tracked envelope and recipient events for all users, including users that are added a later time, are sent through Connect.
        /// </summary>
        /// <value>When set to **true**, the tracked envelope and recipient events for all users, including users that are added a later time, are sent through Connect.</value>
        [DataMember(Name="allUsers", EmitDefaultValue=false)]
        public string AllUsers { get; set; }
        /// <summary>
        /// Gets or Sets AllUsersExcept
        /// </summary>
        [DataMember(Name="allUsersExcept", EmitDefaultValue=false)]
        public string AllUsersExcept { get; set; }
        /// <summary>
        /// If merge field&#39;s are being used, specifies the type of the merge field. The only  supported value is **salesforce**.
        /// </summary>
        /// <value>If merge field&#39;s are being used, specifies the type of the merge field. The only  supported value is **salesforce**.</value>
        [DataMember(Name="configurationType", EmitDefaultValue=false)]
        public string ConfigurationType { get; set; }
        /// <summary>
        ///  Specifies the DocuSign generated ID for the Connect configuration.  
        /// </summary>
        /// <value> Specifies the DocuSign generated ID for the Connect configuration.  </value>
        [DataMember(Name="connectId", EmitDefaultValue=false)]
        public string ConnectId { get; set; }
        /// <summary>
        /// Gets or Sets DeliveryMode
        /// </summary>
        [DataMember(Name="deliveryMode", EmitDefaultValue=false)]
        public string DeliveryMode { get; set; }
        /// <summary>
        /// Gets or Sets DisabledBy
        /// </summary>
        [DataMember(Name="disabledBy", EmitDefaultValue=false)]
        public string DisabledBy { get; set; }
        /// <summary>
        /// This turns Connect logging on or off. When set to **true**, logging is turned on.
        /// </summary>
        /// <value>This turns Connect logging on or off. When set to **true**, logging is turned on.</value>
        [DataMember(Name="enableLog", EmitDefaultValue=false)]
        public string EnableLog { get; set; }
        /// <summary>
        /// A comma separated list of ï¿½Envelopeï¿½ related events that are tracked through Connect. The possible event values are: Sent, Delivered, Completed, Declined, and Voided.
        /// </summary>
        /// <value>A comma separated list of ï¿½Envelopeï¿½ related events that are tracked through Connect. The possible event values are: Sent, Delivered, Completed, Declined, and Voided.</value>
        [DataMember(Name="envelopeEvents", EmitDefaultValue=false)]
        public List<string> EnvelopeEvents { get; set; }
        /// <summary>
        /// Allows you to specify the format of the information the Connect webhooks returns. For more information, see [Connect webhooks with JSON notifications](https://www.docusign.com/blog/developers/connect-webhooks-json-notifications)
        /// </summary>
        /// <value>Allows you to specify the format of the information the Connect webhooks returns. For more information, see [Connect webhooks with JSON notifications](https://www.docusign.com/blog/developers/connect-webhooks-json-notifications)</value>
        [DataMember(Name="eventData", EmitDefaultValue=false)]
        public ConnectEventData EventData { get; set; }
        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<string> Events { get; set; }
        /// <summary>
        /// Gets or Sets ExternalFolderId
        /// </summary>
        [DataMember(Name="externalFolderId", EmitDefaultValue=false)]
        public string ExternalFolderId { get; set; }
        /// <summary>
        /// Gets or Sets ExternalFolderLabel
        /// </summary>
        [DataMember(Name="externalFolderLabel", EmitDefaultValue=false)]
        public string ExternalFolderLabel { get; set; }
        /// <summary>
        /// Gets or Sets GroupIds
        /// </summary>
        [DataMember(Name="groupIds", EmitDefaultValue=false)]
        public List<string> GroupIds { get; set; }
        /// <summary>
        /// When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes. 
        /// </summary>
        /// <value>When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes. </value>
        [DataMember(Name="includeCertificateOfCompletion", EmitDefaultValue=false)]
        public string IncludeCertificateOfCompletion { get; set; }
        /// <summary>
        /// Gets or Sets IncludeCertSoapHeader
        /// </summary>
        [DataMember(Name="includeCertSoapHeader", EmitDefaultValue=false)]
        public string IncludeCertSoapHeader { get; set; }
        /// <summary>
        /// When set to **true**, the Document Fields associated with envelope documents are included in the data. Document Fields are optional custom name-value pairs added to documents using the API. 
        /// </summary>
        /// <value>When set to **true**, the Document Fields associated with envelope documents are included in the data. Document Fields are optional custom name-value pairs added to documents using the API. </value>
        [DataMember(Name="includeDocumentFields", EmitDefaultValue=false)]
        public string IncludeDocumentFields { get; set; }
        /// <summary>
        /// When set to **true**, Connect will send the PDF document along with the update XML.
        /// </summary>
        /// <value>When set to **true**, Connect will send the PDF document along with the update XML.</value>
        [DataMember(Name="includeDocuments", EmitDefaultValue=false)]
        public string IncludeDocuments { get; set; }
        /// <summary>
        /// When set to **true**, Connect will include the voidedReason for voided envelopes.
        /// </summary>
        /// <value>When set to **true**, Connect will include the voidedReason for voided envelopes.</value>
        [DataMember(Name="includeEnvelopeVoidReason", EmitDefaultValue=false)]
        public string IncludeEnvelopeVoidReason { get; set; }
        /// <summary>
        /// Gets or Sets IncludeHMAC
        /// </summary>
        [DataMember(Name="includeHMAC", EmitDefaultValue=false)]
        public string IncludeHMAC { get; set; }
        /// <summary>
        /// Gets or Sets IncludeOAuth
        /// </summary>
        [DataMember(Name="includeOAuth", EmitDefaultValue=false)]
        public string IncludeOAuth { get; set; }
        /// <summary>
        /// When set to **true**, Connect will include the sender account as Custom Field in the data.
        /// </summary>
        /// <value>When set to **true**, Connect will include the sender account as Custom Field in the data.</value>
        [DataMember(Name="includeSenderAccountasCustomField", EmitDefaultValue=false)]
        public string IncludeSenderAccountasCustomField { get; set; }
        /// <summary>
        /// When set to **true**, Connect will include the envelope time zone information.
        /// </summary>
        /// <value>When set to **true**, Connect will include the envelope time zone information.</value>
        [DataMember(Name="includeTimeZoneInformation", EmitDefaultValue=false)]
        public string IncludeTimeZoneInformation { get; set; }
        /// <summary>
        /// Gets or Sets IntegratorManaged
        /// </summary>
        [DataMember(Name="integratorManaged", EmitDefaultValue=false)]
        public string IntegratorManaged { get; set; }
        /// <summary>
        /// The name of the Connect configuration. The name helps identify the configuration in the list.
        /// </summary>
        /// <value>The name of the Connect configuration. The name helps identify the configuration in the list.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// Gets or Sets PausePublish
        /// </summary>
        [DataMember(Name="pausePublish", EmitDefaultValue=false)]
        public string PausePublish { get; set; }
        /// <summary>
        /// A comma separated list of ï¿½Recipientï¿½ related events that are tracked through Connect. The possible event values are: Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.
        /// </summary>
        /// <value>A comma separated list of ï¿½Recipientï¿½ related events that are tracked through Connect. The possible event values are: Sent, Delivered, Completed, Declined, AuthenticationFailed, and AutoResponded.</value>
        [DataMember(Name="recipientEvents", EmitDefaultValue=false)]
        public List<string> RecipientEvents { get; set; }
        /// <summary>
        /// Gets or Sets RequireMutualTls
        /// </summary>
        [DataMember(Name="requireMutualTls", EmitDefaultValue=false)]
        public string RequireMutualTls { get; set; }
        /// <summary>
        /// When set to **true**, and a publication message fails to be acknowledged, the message goes back into the queue and the system will retry delivery after a successful acknowledgement is received. If the delivery fails a second time, the message is not returned to the queue for sending until Connect receives a successful acknowledgement and it has been at least 24 hours since the previous retry. There is a maximum of ten retries Alternately, you can use Republish Connect Information to manually republish the envelope information.
        /// </summary>
        /// <value>When set to **true**, and a publication message fails to be acknowledged, the message goes back into the queue and the system will retry delivery after a successful acknowledgement is received. If the delivery fails a second time, the message is not returned to the queue for sending until Connect receives a successful acknowledgement and it has been at least 24 hours since the previous retry. There is a maximum of ten retries Alternately, you can use Republish Connect Information to manually republish the envelope information.</value>
        [DataMember(Name="requiresAcknowledgement", EmitDefaultValue=false)]
        public string RequiresAcknowledgement { get; set; }
        /// <summary>
        /// Gets or Sets SalesforceApiVersion
        /// </summary>
        [DataMember(Name="salesforceApiVersion", EmitDefaultValue=false)]
        public string SalesforceApiVersion { get; set; }
        /// <summary>
        /// Gets or Sets SalesforceAuthcode
        /// </summary>
        [DataMember(Name="salesforceAuthcode", EmitDefaultValue=false)]
        public string SalesforceAuthcode { get; set; }
        /// <summary>
        /// Gets or Sets SalesforceCallBackUrl
        /// </summary>
        [DataMember(Name="salesforceCallBackUrl", EmitDefaultValue=false)]
        public string SalesforceCallBackUrl { get; set; }
        /// <summary>
        /// Gets or Sets SalesforceDocumentsAsContentFiles
        /// </summary>
        [DataMember(Name="salesforceDocumentsAsContentFiles", EmitDefaultValue=false)]
        public string SalesforceDocumentsAsContentFiles { get; set; }
        /// <summary>
        /// Gets or Sets SenderOverride
        /// </summary>
        [DataMember(Name="senderOverride", EmitDefaultValue=false)]
        public string SenderOverride { get; set; }
        /// <summary>
        /// Gets or Sets SenderSelectableItems
        /// </summary>
        [DataMember(Name="senderSelectableItems", EmitDefaultValue=false)]
        public List<string> SenderSelectableItems { get; set; }
        /// <summary>
        /// Gets or Sets SfObjects
        /// </summary>
        [DataMember(Name="sfObjects", EmitDefaultValue=false)]
        public List<ConnectSalesforceObject> SfObjects { get; set; }
        /// <summary>
        /// When set to **true**, Connect messages are signed with an X509 certificate. This provides support for 2-way SSL.
        /// </summary>
        /// <value>When set to **true**, Connect messages are signed with an X509 certificate. This provides support for 2-way SSL.</value>
        [DataMember(Name="signMessageWithX509Certificate", EmitDefaultValue=false)]
        public string SignMessageWithX509Certificate { get; set; }
        /// <summary>
        /// The namespace of the SOAP interface.  The namespace value must be set if useSoapInterface is set to true.
        /// </summary>
        /// <value>The namespace of the SOAP interface.  The namespace value must be set if useSoapInterface is set to true.</value>
        [DataMember(Name="soapNamespace", EmitDefaultValue=false)]
        public string SoapNamespace { get; set; }
        /// <summary>
        /// This is the web address and name of your listener or Retrieving Service endpoint. You need to include HTTPS:// in the web address.
        /// </summary>
        /// <value>This is the web address and name of your listener or Retrieving Service endpoint. You need to include HTTPS:// in the web address.</value>
        [DataMember(Name="urlToPublishTo", EmitDefaultValue=false)]
        public string UrlToPublishTo { get; set; }
        /// <summary>
        /// A comma separated list of userIds. This sets the users associated with the tracked envelope and recipient events. When one of the event occurs for a set user, the information is sent through Connect.   ###### Note: If allUsers is set to ï¿½falseï¿½ then you must provide a list of user idï¿½s.
        /// </summary>
        /// <value>A comma separated list of userIds. This sets the users associated with the tracked envelope and recipient events. When one of the event occurs for a set user, the information is sent through Connect.   ###### Note: If allUsers is set to ï¿½falseï¿½ then you must provide a list of user idï¿½s.</value>
        [DataMember(Name="userIds", EmitDefaultValue=false)]
        public List<string> UserIds { get; set; }
        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }
        /// <summary>
        /// When set to **true**, indicates that the &#x60;urlToPublishTo&#x60; property contains a SOAP endpoint.
        /// </summary>
        /// <value>When set to **true**, indicates that the &#x60;urlToPublishTo&#x60; property contains a SOAP endpoint.</value>
        [DataMember(Name="useSoapInterface", EmitDefaultValue=false)]
        public string UseSoapInterface { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectCustomConfiguration {\n");
            sb.Append("  AllowEnvelopePublish: ").Append(AllowEnvelopePublish).Append("\n");
            sb.Append("  AllowSalesforcePublish: ").Append(AllowSalesforcePublish).Append("\n");
            sb.Append("  AllUsers: ").Append(AllUsers).Append("\n");
            sb.Append("  AllUsersExcept: ").Append(AllUsersExcept).Append("\n");
            sb.Append("  ConfigurationType: ").Append(ConfigurationType).Append("\n");
            sb.Append("  ConnectId: ").Append(ConnectId).Append("\n");
            sb.Append("  DeliveryMode: ").Append(DeliveryMode).Append("\n");
            sb.Append("  DisabledBy: ").Append(DisabledBy).Append("\n");
            sb.Append("  EnableLog: ").Append(EnableLog).Append("\n");
            sb.Append("  EnvelopeEvents: ").Append(EnvelopeEvents).Append("\n");
            sb.Append("  EventData: ").Append(EventData).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  ExternalFolderId: ").Append(ExternalFolderId).Append("\n");
            sb.Append("  ExternalFolderLabel: ").Append(ExternalFolderLabel).Append("\n");
            sb.Append("  GroupIds: ").Append(GroupIds).Append("\n");
            sb.Append("  IncludeCertificateOfCompletion: ").Append(IncludeCertificateOfCompletion).Append("\n");
            sb.Append("  IncludeCertSoapHeader: ").Append(IncludeCertSoapHeader).Append("\n");
            sb.Append("  IncludeDocumentFields: ").Append(IncludeDocumentFields).Append("\n");
            sb.Append("  IncludeDocuments: ").Append(IncludeDocuments).Append("\n");
            sb.Append("  IncludeEnvelopeVoidReason: ").Append(IncludeEnvelopeVoidReason).Append("\n");
            sb.Append("  IncludeHMAC: ").Append(IncludeHMAC).Append("\n");
            sb.Append("  IncludeOAuth: ").Append(IncludeOAuth).Append("\n");
            sb.Append("  IncludeSenderAccountasCustomField: ").Append(IncludeSenderAccountasCustomField).Append("\n");
            sb.Append("  IncludeTimeZoneInformation: ").Append(IncludeTimeZoneInformation).Append("\n");
            sb.Append("  IntegratorManaged: ").Append(IntegratorManaged).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PausePublish: ").Append(PausePublish).Append("\n");
            sb.Append("  RecipientEvents: ").Append(RecipientEvents).Append("\n");
            sb.Append("  RequireMutualTls: ").Append(RequireMutualTls).Append("\n");
            sb.Append("  RequiresAcknowledgement: ").Append(RequiresAcknowledgement).Append("\n");
            sb.Append("  SalesforceApiVersion: ").Append(SalesforceApiVersion).Append("\n");
            sb.Append("  SalesforceAuthcode: ").Append(SalesforceAuthcode).Append("\n");
            sb.Append("  SalesforceCallBackUrl: ").Append(SalesforceCallBackUrl).Append("\n");
            sb.Append("  SalesforceDocumentsAsContentFiles: ").Append(SalesforceDocumentsAsContentFiles).Append("\n");
            sb.Append("  SenderOverride: ").Append(SenderOverride).Append("\n");
            sb.Append("  SenderSelectableItems: ").Append(SenderSelectableItems).Append("\n");
            sb.Append("  SfObjects: ").Append(SfObjects).Append("\n");
            sb.Append("  SignMessageWithX509Certificate: ").Append(SignMessageWithX509Certificate).Append("\n");
            sb.Append("  SoapNamespace: ").Append(SoapNamespace).Append("\n");
            sb.Append("  UrlToPublishTo: ").Append(UrlToPublishTo).Append("\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  UseSoapInterface: ").Append(UseSoapInterface).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConnectCustomConfiguration);
        }

        /// <summary>
        /// Returns true if ConnectCustomConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of ConnectCustomConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectCustomConfiguration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AllowEnvelopePublish == other.AllowEnvelopePublish ||
                    this.AllowEnvelopePublish != null &&
                    this.AllowEnvelopePublish.Equals(other.AllowEnvelopePublish)
                ) && 
                (
                    this.AllowSalesforcePublish == other.AllowSalesforcePublish ||
                    this.AllowSalesforcePublish != null &&
                    this.AllowSalesforcePublish.Equals(other.AllowSalesforcePublish)
                ) && 
                (
                    this.AllUsers == other.AllUsers ||
                    this.AllUsers != null &&
                    this.AllUsers.Equals(other.AllUsers)
                ) && 
                (
                    this.AllUsersExcept == other.AllUsersExcept ||
                    this.AllUsersExcept != null &&
                    this.AllUsersExcept.Equals(other.AllUsersExcept)
                ) && 
                (
                    this.ConfigurationType == other.ConfigurationType ||
                    this.ConfigurationType != null &&
                    this.ConfigurationType.Equals(other.ConfigurationType)
                ) && 
                (
                    this.ConnectId == other.ConnectId ||
                    this.ConnectId != null &&
                    this.ConnectId.Equals(other.ConnectId)
                ) && 
                (
                    this.DeliveryMode == other.DeliveryMode ||
                    this.DeliveryMode != null &&
                    this.DeliveryMode.Equals(other.DeliveryMode)
                ) && 
                (
                    this.DisabledBy == other.DisabledBy ||
                    this.DisabledBy != null &&
                    this.DisabledBy.Equals(other.DisabledBy)
                ) && 
                (
                    this.EnableLog == other.EnableLog ||
                    this.EnableLog != null &&
                    this.EnableLog.Equals(other.EnableLog)
                ) && 
                (
                    this.EnvelopeEvents == other.EnvelopeEvents ||
                    this.EnvelopeEvents != null &&
                    this.EnvelopeEvents.SequenceEqual(other.EnvelopeEvents)
                ) && 
                (
                    this.EventData == other.EventData ||
                    this.EventData != null &&
                    this.EventData.Equals(other.EventData)
                ) && 
                (
                    this.Events == other.Events ||
                    this.Events != null &&
                    this.Events.SequenceEqual(other.Events)
                ) && 
                (
                    this.ExternalFolderId == other.ExternalFolderId ||
                    this.ExternalFolderId != null &&
                    this.ExternalFolderId.Equals(other.ExternalFolderId)
                ) && 
                (
                    this.ExternalFolderLabel == other.ExternalFolderLabel ||
                    this.ExternalFolderLabel != null &&
                    this.ExternalFolderLabel.Equals(other.ExternalFolderLabel)
                ) && 
                (
                    this.GroupIds == other.GroupIds ||
                    this.GroupIds != null &&
                    this.GroupIds.SequenceEqual(other.GroupIds)
                ) && 
                (
                    this.IncludeCertificateOfCompletion == other.IncludeCertificateOfCompletion ||
                    this.IncludeCertificateOfCompletion != null &&
                    this.IncludeCertificateOfCompletion.Equals(other.IncludeCertificateOfCompletion)
                ) && 
                (
                    this.IncludeCertSoapHeader == other.IncludeCertSoapHeader ||
                    this.IncludeCertSoapHeader != null &&
                    this.IncludeCertSoapHeader.Equals(other.IncludeCertSoapHeader)
                ) && 
                (
                    this.IncludeDocumentFields == other.IncludeDocumentFields ||
                    this.IncludeDocumentFields != null &&
                    this.IncludeDocumentFields.Equals(other.IncludeDocumentFields)
                ) && 
                (
                    this.IncludeDocuments == other.IncludeDocuments ||
                    this.IncludeDocuments != null &&
                    this.IncludeDocuments.Equals(other.IncludeDocuments)
                ) && 
                (
                    this.IncludeEnvelopeVoidReason == other.IncludeEnvelopeVoidReason ||
                    this.IncludeEnvelopeVoidReason != null &&
                    this.IncludeEnvelopeVoidReason.Equals(other.IncludeEnvelopeVoidReason)
                ) && 
                (
                    this.IncludeHMAC == other.IncludeHMAC ||
                    this.IncludeHMAC != null &&
                    this.IncludeHMAC.Equals(other.IncludeHMAC)
                ) && 
                (
                    this.IncludeOAuth == other.IncludeOAuth ||
                    this.IncludeOAuth != null &&
                    this.IncludeOAuth.Equals(other.IncludeOAuth)
                ) && 
                (
                    this.IncludeSenderAccountasCustomField == other.IncludeSenderAccountasCustomField ||
                    this.IncludeSenderAccountasCustomField != null &&
                    this.IncludeSenderAccountasCustomField.Equals(other.IncludeSenderAccountasCustomField)
                ) && 
                (
                    this.IncludeTimeZoneInformation == other.IncludeTimeZoneInformation ||
                    this.IncludeTimeZoneInformation != null &&
                    this.IncludeTimeZoneInformation.Equals(other.IncludeTimeZoneInformation)
                ) && 
                (
                    this.IntegratorManaged == other.IntegratorManaged ||
                    this.IntegratorManaged != null &&
                    this.IntegratorManaged.Equals(other.IntegratorManaged)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.PausePublish == other.PausePublish ||
                    this.PausePublish != null &&
                    this.PausePublish.Equals(other.PausePublish)
                ) && 
                (
                    this.RecipientEvents == other.RecipientEvents ||
                    this.RecipientEvents != null &&
                    this.RecipientEvents.SequenceEqual(other.RecipientEvents)
                ) && 
                (
                    this.RequireMutualTls == other.RequireMutualTls ||
                    this.RequireMutualTls != null &&
                    this.RequireMutualTls.Equals(other.RequireMutualTls)
                ) && 
                (
                    this.RequiresAcknowledgement == other.RequiresAcknowledgement ||
                    this.RequiresAcknowledgement != null &&
                    this.RequiresAcknowledgement.Equals(other.RequiresAcknowledgement)
                ) && 
                (
                    this.SalesforceApiVersion == other.SalesforceApiVersion ||
                    this.SalesforceApiVersion != null &&
                    this.SalesforceApiVersion.Equals(other.SalesforceApiVersion)
                ) && 
                (
                    this.SalesforceAuthcode == other.SalesforceAuthcode ||
                    this.SalesforceAuthcode != null &&
                    this.SalesforceAuthcode.Equals(other.SalesforceAuthcode)
                ) && 
                (
                    this.SalesforceCallBackUrl == other.SalesforceCallBackUrl ||
                    this.SalesforceCallBackUrl != null &&
                    this.SalesforceCallBackUrl.Equals(other.SalesforceCallBackUrl)
                ) && 
                (
                    this.SalesforceDocumentsAsContentFiles == other.SalesforceDocumentsAsContentFiles ||
                    this.SalesforceDocumentsAsContentFiles != null &&
                    this.SalesforceDocumentsAsContentFiles.Equals(other.SalesforceDocumentsAsContentFiles)
                ) && 
                (
                    this.SenderOverride == other.SenderOverride ||
                    this.SenderOverride != null &&
                    this.SenderOverride.Equals(other.SenderOverride)
                ) && 
                (
                    this.SenderSelectableItems == other.SenderSelectableItems ||
                    this.SenderSelectableItems != null &&
                    this.SenderSelectableItems.SequenceEqual(other.SenderSelectableItems)
                ) && 
                (
                    this.SfObjects == other.SfObjects ||
                    this.SfObjects != null &&
                    this.SfObjects.SequenceEqual(other.SfObjects)
                ) && 
                (
                    this.SignMessageWithX509Certificate == other.SignMessageWithX509Certificate ||
                    this.SignMessageWithX509Certificate != null &&
                    this.SignMessageWithX509Certificate.Equals(other.SignMessageWithX509Certificate)
                ) && 
                (
                    this.SoapNamespace == other.SoapNamespace ||
                    this.SoapNamespace != null &&
                    this.SoapNamespace.Equals(other.SoapNamespace)
                ) && 
                (
                    this.UrlToPublishTo == other.UrlToPublishTo ||
                    this.UrlToPublishTo != null &&
                    this.UrlToPublishTo.Equals(other.UrlToPublishTo)
                ) && 
                (
                    this.UserIds == other.UserIds ||
                    this.UserIds != null &&
                    this.UserIds.SequenceEqual(other.UserIds)
                ) && 
                (
                    this.UserName == other.UserName ||
                    this.UserName != null &&
                    this.UserName.Equals(other.UserName)
                ) && 
                (
                    this.UseSoapInterface == other.UseSoapInterface ||
                    this.UseSoapInterface != null &&
                    this.UseSoapInterface.Equals(other.UseSoapInterface)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AllowEnvelopePublish != null)
                    hash = hash * 59 + this.AllowEnvelopePublish.GetHashCode();
                if (this.AllowSalesforcePublish != null)
                    hash = hash * 59 + this.AllowSalesforcePublish.GetHashCode();
                if (this.AllUsers != null)
                    hash = hash * 59 + this.AllUsers.GetHashCode();
                if (this.AllUsersExcept != null)
                    hash = hash * 59 + this.AllUsersExcept.GetHashCode();
                if (this.ConfigurationType != null)
                    hash = hash * 59 + this.ConfigurationType.GetHashCode();
                if (this.ConnectId != null)
                    hash = hash * 59 + this.ConnectId.GetHashCode();
                if (this.DeliveryMode != null)
                    hash = hash * 59 + this.DeliveryMode.GetHashCode();
                if (this.DisabledBy != null)
                    hash = hash * 59 + this.DisabledBy.GetHashCode();
                if (this.EnableLog != null)
                    hash = hash * 59 + this.EnableLog.GetHashCode();
                if (this.EnvelopeEvents != null)
                    hash = hash * 59 + this.EnvelopeEvents.GetHashCode();
                if (this.EventData != null)
                    hash = hash * 59 + this.EventData.GetHashCode();
                if (this.Events != null)
                    hash = hash * 59 + this.Events.GetHashCode();
                if (this.ExternalFolderId != null)
                    hash = hash * 59 + this.ExternalFolderId.GetHashCode();
                if (this.ExternalFolderLabel != null)
                    hash = hash * 59 + this.ExternalFolderLabel.GetHashCode();
                if (this.GroupIds != null)
                    hash = hash * 59 + this.GroupIds.GetHashCode();
                if (this.IncludeCertificateOfCompletion != null)
                    hash = hash * 59 + this.IncludeCertificateOfCompletion.GetHashCode();
                if (this.IncludeCertSoapHeader != null)
                    hash = hash * 59 + this.IncludeCertSoapHeader.GetHashCode();
                if (this.IncludeDocumentFields != null)
                    hash = hash * 59 + this.IncludeDocumentFields.GetHashCode();
                if (this.IncludeDocuments != null)
                    hash = hash * 59 + this.IncludeDocuments.GetHashCode();
                if (this.IncludeEnvelopeVoidReason != null)
                    hash = hash * 59 + this.IncludeEnvelopeVoidReason.GetHashCode();
                if (this.IncludeHMAC != null)
                    hash = hash * 59 + this.IncludeHMAC.GetHashCode();
                if (this.IncludeOAuth != null)
                    hash = hash * 59 + this.IncludeOAuth.GetHashCode();
                if (this.IncludeSenderAccountasCustomField != null)
                    hash = hash * 59 + this.IncludeSenderAccountasCustomField.GetHashCode();
                if (this.IncludeTimeZoneInformation != null)
                    hash = hash * 59 + this.IncludeTimeZoneInformation.GetHashCode();
                if (this.IntegratorManaged != null)
                    hash = hash * 59 + this.IntegratorManaged.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.PausePublish != null)
                    hash = hash * 59 + this.PausePublish.GetHashCode();
                if (this.RecipientEvents != null)
                    hash = hash * 59 + this.RecipientEvents.GetHashCode();
                if (this.RequireMutualTls != null)
                    hash = hash * 59 + this.RequireMutualTls.GetHashCode();
                if (this.RequiresAcknowledgement != null)
                    hash = hash * 59 + this.RequiresAcknowledgement.GetHashCode();
                if (this.SalesforceApiVersion != null)
                    hash = hash * 59 + this.SalesforceApiVersion.GetHashCode();
                if (this.SalesforceAuthcode != null)
                    hash = hash * 59 + this.SalesforceAuthcode.GetHashCode();
                if (this.SalesforceCallBackUrl != null)
                    hash = hash * 59 + this.SalesforceCallBackUrl.GetHashCode();
                if (this.SalesforceDocumentsAsContentFiles != null)
                    hash = hash * 59 + this.SalesforceDocumentsAsContentFiles.GetHashCode();
                if (this.SenderOverride != null)
                    hash = hash * 59 + this.SenderOverride.GetHashCode();
                if (this.SenderSelectableItems != null)
                    hash = hash * 59 + this.SenderSelectableItems.GetHashCode();
                if (this.SfObjects != null)
                    hash = hash * 59 + this.SfObjects.GetHashCode();
                if (this.SignMessageWithX509Certificate != null)
                    hash = hash * 59 + this.SignMessageWithX509Certificate.GetHashCode();
                if (this.SoapNamespace != null)
                    hash = hash * 59 + this.SoapNamespace.GetHashCode();
                if (this.UrlToPublishTo != null)
                    hash = hash * 59 + this.UrlToPublishTo.GetHashCode();
                if (this.UserIds != null)
                    hash = hash * 59 + this.UserIds.GetHashCode();
                if (this.UserName != null)
                    hash = hash * 59 + this.UserName.GetHashCode();
                if (this.UseSoapInterface != null)
                    hash = hash * 59 + this.UseSoapInterface.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
