/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// ConnectedData
    /// </summary>
    [DataContract]
    public partial class ConnectedData :  IEquatable<ConnectedData>, IValidatableObject
    {
        public ConnectedData()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectedData" /> class.
        /// </summary>
        /// <param name="PropertyName">PropertyName.</param>
        /// <param name="SupportedOperation">SupportedOperation.</param>
        /// <param name="SupportedUri">SupportedUri.</param>
        /// <param name="TypeName">TypeName.</param>
        /// <param name="TypeSystemNamespace">TypeSystemNamespace.</param>
        public ConnectedData(string PropertyName = default(string), string SupportedOperation = default(string), string SupportedUri = default(string), string TypeName = default(string), string TypeSystemNamespace = default(string))
        {
            this.PropertyName = PropertyName;
            this.SupportedOperation = SupportedOperation;
            this.SupportedUri = SupportedUri;
            this.TypeName = TypeName;
            this.TypeSystemNamespace = TypeSystemNamespace;
        }
        
        /// <summary>
        /// Gets or Sets PropertyName
        /// </summary>
        [DataMember(Name="propertyName", EmitDefaultValue=false)]
        public string PropertyName { get; set; }
        /// <summary>
        /// Gets or Sets SupportedOperation
        /// </summary>
        [DataMember(Name="supportedOperation", EmitDefaultValue=false)]
        public string SupportedOperation { get; set; }
        /// <summary>
        /// Gets or Sets SupportedUri
        /// </summary>
        [DataMember(Name="supportedUri", EmitDefaultValue=false)]
        public string SupportedUri { get; set; }
        /// <summary>
        /// Gets or Sets TypeName
        /// </summary>
        [DataMember(Name="typeName", EmitDefaultValue=false)]
        public string TypeName { get; set; }
        /// <summary>
        /// Gets or Sets TypeSystemNamespace
        /// </summary>
        [DataMember(Name="typeSystemNamespace", EmitDefaultValue=false)]
        public string TypeSystemNamespace { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectedData {\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  SupportedOperation: ").Append(SupportedOperation).Append("\n");
            sb.Append("  SupportedUri: ").Append(SupportedUri).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  TypeSystemNamespace: ").Append(TypeSystemNamespace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConnectedData);
        }

        /// <summary>
        /// Returns true if ConnectedData instances are equal
        /// </summary>
        /// <param name="other">Instance of ConnectedData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectedData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PropertyName == other.PropertyName ||
                    this.PropertyName != null &&
                    this.PropertyName.Equals(other.PropertyName)
                ) && 
                (
                    this.SupportedOperation == other.SupportedOperation ||
                    this.SupportedOperation != null &&
                    this.SupportedOperation.Equals(other.SupportedOperation)
                ) && 
                (
                    this.SupportedUri == other.SupportedUri ||
                    this.SupportedUri != null &&
                    this.SupportedUri.Equals(other.SupportedUri)
                ) && 
                (
                    this.TypeName == other.TypeName ||
                    this.TypeName != null &&
                    this.TypeName.Equals(other.TypeName)
                ) && 
                (
                    this.TypeSystemNamespace == other.TypeSystemNamespace ||
                    this.TypeSystemNamespace != null &&
                    this.TypeSystemNamespace.Equals(other.TypeSystemNamespace)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PropertyName != null)
                    hash = hash * 59 + this.PropertyName.GetHashCode();
                if (this.SupportedOperation != null)
                    hash = hash * 59 + this.SupportedOperation.GetHashCode();
                if (this.SupportedUri != null)
                    hash = hash * 59 + this.SupportedUri.GetHashCode();
                if (this.TypeName != null)
                    hash = hash * 59 + this.TypeName.GetHashCode();
                if (this.TypeSystemNamespace != null)
                    hash = hash * 59 + this.TypeSystemNamespace.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
