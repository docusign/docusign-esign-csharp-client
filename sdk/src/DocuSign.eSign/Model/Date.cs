/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// A tab that allows the recipient to enter a date. Date tabs are one-line fields that allow date information to be entered in any format. The tooltip for this tab recommends entering the date as MM/DD/YYYY, but this is not enforced. The format entered by the signer is retained. If you need a particular date format enforced, DocuSign recommends using a Text tab with a validation pattern and a validation message to enforce the format. 
    /// </summary>
    [DataContract]
    public partial class Date :  IEquatable<Date>, IValidatableObject
    {
        public Date()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Date" /> class.
        /// </summary>
        /// <param name="AnchorAllowWhiteSpaceInCharacters">AnchorAllowWhiteSpaceInCharacters.</param>
        /// <param name="AnchorAllowWhiteSpaceInCharactersMetadata">Metadata that indicates whether the &#x60;anchorAllowWhiteSpaceInCharacters&#x60; property is editable..</param>
        /// <param name="AnchorCaseSensitive">When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**..</param>
        /// <param name="AnchorCaseSensitiveMetadata">Metadata that indicates whether the &#x60;anchorCaseSensitive&#x60; property is editable..</param>
        /// <param name="AnchorHorizontalAlignment">Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**..</param>
        /// <param name="AnchorHorizontalAlignmentMetadata">Metadata that indicates whether the &#x60;anchorHorizontalAlignment&#x60; property is editable..</param>
        /// <param name="AnchorIgnoreIfNotPresent">When set to **true**, this tab is ignored if anchorString is not found in the document..</param>
        /// <param name="AnchorIgnoreIfNotPresentMetadata">Metadata that indicates whether the &#x60;anchorIgnoreIfNotPresent&#x60; property is editable..</param>
        /// <param name="AnchorMatchWholeWord">When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**..</param>
        /// <param name="AnchorMatchWholeWordMetadata">Metadata that indicates whether the &#x60;anchorMatchWholeWord&#x60; property is editable..</param>
        /// <param name="AnchorString">Anchor text information for a radio button..</param>
        /// <param name="AnchorStringMetadata">Metadata that indicates whether the &#x60;anchorString&#x60; property is editable..</param>
        /// <param name="AnchorTabProcessorVersion">AnchorTabProcessorVersion.</param>
        /// <param name="AnchorTabProcessorVersionMetadata">Reserved for DocuSign..</param>
        /// <param name="AnchorUnits">Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches..</param>
        /// <param name="AnchorUnitsMetadata">Metadata that indicates whether the &#x60;anchorUnits&#x60; property is editable..</param>
        /// <param name="AnchorXOffset">Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString..</param>
        /// <param name="AnchorXOffsetMetadata">Metadata that indicates whether the &#x60;anchorXOffset&#x60; property is editable..</param>
        /// <param name="AnchorYOffset">Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString..</param>
        /// <param name="AnchorYOffsetMetadata">Metadata that indicates whether the &#x60;anchorYOffset&#x60; property is editable..</param>
        /// <param name="Bold">When set to **true**, the information in the tab is bold..</param>
        /// <param name="BoldMetadata">Metadata that indicates whether the &#x60;bold&#x60; property is editable..</param>
        /// <param name="Caption">Caption.</param>
        /// <param name="CaptionMetadata">CaptionMetadata.</param>
        /// <param name="ConcealValueOnDocument">When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.  When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.  This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes..</param>
        /// <param name="ConcealValueOnDocumentMetadata">Metadata that indicates whether the &#x60;concealValueOnDocument&#x60; property is editable..</param>
        /// <param name="ConditionalParentLabel">For conditional fields this is the TabLabel of the parent tab that controls this tab&#39;s visibility..</param>
        /// <param name="ConditionalParentLabelMetadata">Metadata that indicates whether the &#x60;conditionalParentLabel&#x60; property is editable..</param>
        /// <param name="ConditionalParentValue">For conditional fields, this is the value of the parent tab that controls the tab&#39;s visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \&quot;on\&quot; as the value to show that the parent tab is active. .</param>
        /// <param name="ConditionalParentValueMetadata">Metadata that indicates whether the &#x60;conditionalParentValue&#x60; property is editable..</param>
        /// <param name="ConnectedObjectDetails">ConnectedObjectDetails.</param>
        /// <param name="CustomTabId">The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties..</param>
        /// <param name="CustomTabIdMetadata">Metadata that indicates whether the &#x60;customTabId&#x60; property is editable..</param>
        /// <param name="DisableAutoSize">When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes..</param>
        /// <param name="DisableAutoSizeMetadata">Metadata that indicates whether the &#x60;disableAutoSize&#x60; property is editable..</param>
        /// <param name="DocumentId">Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute..</param>
        /// <param name="DocumentIdMetadata">Metadata that indicates whether the &#x60;documentId&#x60; property is editable..</param>
        /// <param name="ErrorDetails">Array or errors..</param>
        /// <param name="Font">The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default..</param>
        /// <param name="FontColor">The font color used for the information in the tab.  Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White..</param>
        /// <param name="FontColorMetadata">Metadata that indicates whether the &#x60;fontColor&#x60; property is editable..</param>
        /// <param name="FontMetadata">Metadata that indicates whether the &#x60;font&#x60; property is editable..</param>
        /// <param name="FontSize">The font size used for the information in the tab.  Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72..</param>
        /// <param name="FontSizeMetadata">Metadata that indicates whether the &#x60;fontSize&#x60; property is editable..</param>
        /// <param name="FormOrder">FormOrder.</param>
        /// <param name="FormOrderMetadata">Metadata that indicates whether the &#x60;formOrder&#x60; property is editable..</param>
        /// <param name="FormPageLabel">FormPageLabel.</param>
        /// <param name="FormPageLabelMetadata">Metadata that indicates whether the &#x60;formPageLabel&#x60; property is editable..</param>
        /// <param name="FormPageNumber">FormPageNumber.</param>
        /// <param name="FormPageNumberMetadata">Metadata that indicates whether the &#x60;fromPageNumber&#x60; property is editable..</param>
        /// <param name="Height">Height of the tab in pixels..</param>
        /// <param name="HeightMetadata">Metadata that indicates whether the &#x60;height&#x60; property is editable..</param>
        /// <param name="Italic">When set to **true**, the information in the tab is italic..</param>
        /// <param name="ItalicMetadata">Metadata that indicates whether the &#x60;italic&#x60; property is editable..</param>
        /// <param name="LocalePolicy">Reserved for DocuSign..</param>
        /// <param name="Locked">When set to **true**, the signer cannot change the data of the custom tab..</param>
        /// <param name="LockedMetadata">Metadata that indicates whether the &#x60;locked&#x60; property is editable..</param>
        /// <param name="MaxLength">An optional value that describes the maximum length of the property when the property is a string..</param>
        /// <param name="MaxLengthMetadata">Metadata that indicates whether the &#x60;maxLength&#x60; property is editable..</param>
        /// <param name="MergeField">Contains the information necessary to map the tab to a field in SalesForce..</param>
        /// <param name="MergeFieldXml">MergeFieldXml.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NameMetadata">Metadata that indicates whether the &#x60;name&#x60; property is editable. This property is read-only..</param>
        /// <param name="OriginalValue">The initial value of the tab when it was sent to the recipient. .</param>
        /// <param name="OriginalValueMetadata">Metadata that indicates whether the &#x60;originalValue&#x60; property is editable..</param>
        /// <param name="PageNumber">Specifies the page number on which the tab is located..</param>
        /// <param name="PageNumberMetadata">Metadata that indicates whether the &#x60;pageNumber&#x60; property is editable..</param>
        /// <param name="RecipientId">Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document..</param>
        /// <param name="RecipientIdGuid">RecipientIdGuid.</param>
        /// <param name="RecipientIdGuidMetadata">Metadata that indicates whether the &#x60;recipientIdGuid&#x60; property is editable..</param>
        /// <param name="RecipientIdMetadata">Metadata that indicates whether the &#x60;recipientId&#x60; property is editable..</param>
        /// <param name="RequireAll">When set to **true** and shared is true, information must be entered in this field to complete the envelope. .</param>
        /// <param name="RequireAllMetadata">Metadata that indicates whether the &#x60;requireAll&#x60; property is editable..</param>
        /// <param name="Required">When set to **true**, the signer is required to fill out this tab.</param>
        /// <param name="RequiredMetadata">Metadata that indicates whether the &#x60;required&#x60; property is editable..</param>
        /// <param name="RequireInitialOnSharedChange">Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field..</param>
        /// <param name="RequireInitialOnSharedChangeMetadata">Metadata that indicates whether the &#x60;requireInitialOnSharedChange&#x60; property is editable..</param>
        /// <param name="SenderRequired">When set to **true**, the sender must populate the tab before an envelope can be sent using the template.   This value tab can only be changed by modifying (PUT) the template.   Tabs with a &#x60;senderRequired&#x60; value of true cannot be deleted from an envelope..</param>
        /// <param name="SenderRequiredMetadata">Metadata that indicates whether the &#x60;senderRequired&#x60; property is editable..</param>
        /// <param name="Shared">When set to **true**, this custom tab is shared..</param>
        /// <param name="SharedMetadata">Metadata that indicates whether the &#x60;shared&#x60; property is editable..</param>
        /// <param name="ShareToRecipients">ShareToRecipients.</param>
        /// <param name="ShareToRecipientsMetadata">Reserved for DocuSign..</param>
        /// <param name="SmartContractInformation">Reserved for DocuSign..</param>
        /// <param name="Source">Source.</param>
        /// <param name="Status">Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later..</param>
        /// <param name="StatusMetadata">Metadata that indicates whether the &#x60;status&#x60; property is editable..</param>
        /// <param name="TabFullyQualifiedPath">TabFullyQualifiedPath.</param>
        /// <param name="TabGroupLabels">TabGroupLabels.</param>
        /// <param name="TabGroupLabelsMetadata">Metadata that indicates whether the &#x60;tabGroupLabels&#x60; property is editable..</param>
        /// <param name="TabId">The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].     .</param>
        /// <param name="TabIdMetadata">Metadata that indicates whether the &#x60;tabId&#x60; property is editable..</param>
        /// <param name="TabLabel">The label string associated with the tab..</param>
        /// <param name="TabLabelMetadata">Metadata that indicates whether the &#x60;tabLabel&#x60; property is editable..</param>
        /// <param name="TabOrder">TabOrder.</param>
        /// <param name="TabOrderMetadata">Metadata that indicates whether the &#x60;tabOrder&#x60; property is editable..</param>
        /// <param name="TabType">TabType.</param>
        /// <param name="TabTypeMetadata">Metadata that indicates whether the &#x60;tabType&#x60; property is editable..</param>
        /// <param name="TemplateLocked">When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. .</param>
        /// <param name="TemplateLockedMetadata">Metadata that indicates whether the &#x60;templateLocked&#x60; property is editable..</param>
        /// <param name="TemplateRequired">When set to **true**, the sender may not remove the recipient. Used only when working with template recipients..</param>
        /// <param name="TemplateRequiredMetadata">Metadata that indicates whether the &#x60;templateRequired&#x60; property is editable..</param>
        /// <param name="Tooltip">Tooltip.</param>
        /// <param name="ToolTipMetadata">Metadata that indicates whether the &#x60;toolTip&#x60; property is editable..</param>
        /// <param name="Underline">When set to **true**, the information in the tab is underlined..</param>
        /// <param name="UnderlineMetadata">Metadata that indicates whether the &#x60;underline&#x60; property is editable..</param>
        /// <param name="ValidationMessage">The message displayed if the custom tab fails input validation (either custom of embedded)..</param>
        /// <param name="ValidationMessageMetadata">Metadata that indicates whether the &#x60;validationMessage&#x60; property is editable..</param>
        /// <param name="ValidationPattern">A regular expression used to validate input for the tab..</param>
        /// <param name="ValidationPatternMetadata">Metadata that indicates whether the &#x60;validationPattern&#x60; property is editable..</param>
        /// <param name="Value">Specifies the value of the tab. .</param>
        /// <param name="ValueMetadata">Metadata that indicates whether the &#x60;value&#x60; property is editable..</param>
        /// <param name="WarningDetails">WarningDetails.</param>
        /// <param name="Width">Width of the tab in pixels..</param>
        /// <param name="WidthMetadata">Metadata that indicates whether the &#x60;width&#x60; property is editable..</param>
        /// <param name="XPosition">This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position..</param>
        /// <param name="XPositionMetadata">Metadata that indicates whether the &#x60;xPosition&#x60; property is editable..</param>
        /// <param name="YPosition">This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position..</param>
        /// <param name="YPositionMetadata">Metadata that indicates whether the &#x60;yPosition&#x60; property is editable..</param>
        public Date(string AnchorAllowWhiteSpaceInCharacters = default(string), PropertyMetadata AnchorAllowWhiteSpaceInCharactersMetadata = default(PropertyMetadata), string AnchorCaseSensitive = default(string), PropertyMetadata AnchorCaseSensitiveMetadata = default(PropertyMetadata), string AnchorHorizontalAlignment = default(string), PropertyMetadata AnchorHorizontalAlignmentMetadata = default(PropertyMetadata), string AnchorIgnoreIfNotPresent = default(string), PropertyMetadata AnchorIgnoreIfNotPresentMetadata = default(PropertyMetadata), string AnchorMatchWholeWord = default(string), PropertyMetadata AnchorMatchWholeWordMetadata = default(PropertyMetadata), string AnchorString = default(string), PropertyMetadata AnchorStringMetadata = default(PropertyMetadata), string AnchorTabProcessorVersion = default(string), PropertyMetadata AnchorTabProcessorVersionMetadata = default(PropertyMetadata), string AnchorUnits = default(string), PropertyMetadata AnchorUnitsMetadata = default(PropertyMetadata), string AnchorXOffset = default(string), PropertyMetadata AnchorXOffsetMetadata = default(PropertyMetadata), string AnchorYOffset = default(string), PropertyMetadata AnchorYOffsetMetadata = default(PropertyMetadata), string Bold = default(string), PropertyMetadata BoldMetadata = default(PropertyMetadata), string Caption = default(string), PropertyMetadata CaptionMetadata = default(PropertyMetadata), string ConcealValueOnDocument = default(string), PropertyMetadata ConcealValueOnDocumentMetadata = default(PropertyMetadata), string ConditionalParentLabel = default(string), PropertyMetadata ConditionalParentLabelMetadata = default(PropertyMetadata), string ConditionalParentValue = default(string), PropertyMetadata ConditionalParentValueMetadata = default(PropertyMetadata), ConnectedObjectDetails ConnectedObjectDetails = default(ConnectedObjectDetails), string CustomTabId = default(string), PropertyMetadata CustomTabIdMetadata = default(PropertyMetadata), string DisableAutoSize = default(string), PropertyMetadata DisableAutoSizeMetadata = default(PropertyMetadata), string DocumentId = default(string), PropertyMetadata DocumentIdMetadata = default(PropertyMetadata), ErrorDetails ErrorDetails = default(ErrorDetails), string Font = default(string), string FontColor = default(string), PropertyMetadata FontColorMetadata = default(PropertyMetadata), PropertyMetadata FontMetadata = default(PropertyMetadata), string FontSize = default(string), PropertyMetadata FontSizeMetadata = default(PropertyMetadata), string FormOrder = default(string), PropertyMetadata FormOrderMetadata = default(PropertyMetadata), string FormPageLabel = default(string), PropertyMetadata FormPageLabelMetadata = default(PropertyMetadata), string FormPageNumber = default(string), PropertyMetadata FormPageNumberMetadata = default(PropertyMetadata), string Height = default(string), PropertyMetadata HeightMetadata = default(PropertyMetadata), string Italic = default(string), PropertyMetadata ItalicMetadata = default(PropertyMetadata), LocalePolicyTab LocalePolicy = default(LocalePolicyTab), string Locked = default(string), PropertyMetadata LockedMetadata = default(PropertyMetadata), string MaxLength = default(string), PropertyMetadata MaxLengthMetadata = default(PropertyMetadata), MergeField MergeField = default(MergeField), string MergeFieldXml = default(string), string Name = default(string), PropertyMetadata NameMetadata = default(PropertyMetadata), string OriginalValue = default(string), PropertyMetadata OriginalValueMetadata = default(PropertyMetadata), string PageNumber = default(string), PropertyMetadata PageNumberMetadata = default(PropertyMetadata), string RecipientId = default(string), string RecipientIdGuid = default(string), PropertyMetadata RecipientIdGuidMetadata = default(PropertyMetadata), PropertyMetadata RecipientIdMetadata = default(PropertyMetadata), string RequireAll = default(string), PropertyMetadata RequireAllMetadata = default(PropertyMetadata), string Required = default(string), PropertyMetadata RequiredMetadata = default(PropertyMetadata), string RequireInitialOnSharedChange = default(string), PropertyMetadata RequireInitialOnSharedChangeMetadata = default(PropertyMetadata), string SenderRequired = default(string), PropertyMetadata SenderRequiredMetadata = default(PropertyMetadata), string Shared = default(string), PropertyMetadata SharedMetadata = default(PropertyMetadata), string ShareToRecipients = default(string), PropertyMetadata ShareToRecipientsMetadata = default(PropertyMetadata), SmartContractInformation SmartContractInformation = default(SmartContractInformation), string Source = default(string), string Status = default(string), PropertyMetadata StatusMetadata = default(PropertyMetadata), string TabFullyQualifiedPath = default(string), List<string> TabGroupLabels = default(List<string>), PropertyMetadata TabGroupLabelsMetadata = default(PropertyMetadata), string TabId = default(string), PropertyMetadata TabIdMetadata = default(PropertyMetadata), string TabLabel = default(string), PropertyMetadata TabLabelMetadata = default(PropertyMetadata), string TabOrder = default(string), PropertyMetadata TabOrderMetadata = default(PropertyMetadata), string TabType = default(string), PropertyMetadata TabTypeMetadata = default(PropertyMetadata), string TemplateLocked = default(string), PropertyMetadata TemplateLockedMetadata = default(PropertyMetadata), string TemplateRequired = default(string), PropertyMetadata TemplateRequiredMetadata = default(PropertyMetadata), string Tooltip = default(string), PropertyMetadata ToolTipMetadata = default(PropertyMetadata), string Underline = default(string), PropertyMetadata UnderlineMetadata = default(PropertyMetadata), string ValidationMessage = default(string), PropertyMetadata ValidationMessageMetadata = default(PropertyMetadata), string ValidationPattern = default(string), PropertyMetadata ValidationPatternMetadata = default(PropertyMetadata), string Value = default(string), PropertyMetadata ValueMetadata = default(PropertyMetadata), ErrorDetails WarningDetails = default(ErrorDetails), string Width = default(string), PropertyMetadata WidthMetadata = default(PropertyMetadata), string XPosition = default(string), PropertyMetadata XPositionMetadata = default(PropertyMetadata), string YPosition = default(string), PropertyMetadata YPositionMetadata = default(PropertyMetadata))
        {
            this.AnchorAllowWhiteSpaceInCharacters = AnchorAllowWhiteSpaceInCharacters;
            this.AnchorAllowWhiteSpaceInCharactersMetadata = AnchorAllowWhiteSpaceInCharactersMetadata;
            this.AnchorCaseSensitive = AnchorCaseSensitive;
            this.AnchorCaseSensitiveMetadata = AnchorCaseSensitiveMetadata;
            this.AnchorHorizontalAlignment = AnchorHorizontalAlignment;
            this.AnchorHorizontalAlignmentMetadata = AnchorHorizontalAlignmentMetadata;
            this.AnchorIgnoreIfNotPresent = AnchorIgnoreIfNotPresent;
            this.AnchorIgnoreIfNotPresentMetadata = AnchorIgnoreIfNotPresentMetadata;
            this.AnchorMatchWholeWord = AnchorMatchWholeWord;
            this.AnchorMatchWholeWordMetadata = AnchorMatchWholeWordMetadata;
            this.AnchorString = AnchorString;
            this.AnchorStringMetadata = AnchorStringMetadata;
            this.AnchorTabProcessorVersion = AnchorTabProcessorVersion;
            this.AnchorTabProcessorVersionMetadata = AnchorTabProcessorVersionMetadata;
            this.AnchorUnits = AnchorUnits;
            this.AnchorUnitsMetadata = AnchorUnitsMetadata;
            this.AnchorXOffset = AnchorXOffset;
            this.AnchorXOffsetMetadata = AnchorXOffsetMetadata;
            this.AnchorYOffset = AnchorYOffset;
            this.AnchorYOffsetMetadata = AnchorYOffsetMetadata;
            this.Bold = Bold;
            this.BoldMetadata = BoldMetadata;
            this.Caption = Caption;
            this.CaptionMetadata = CaptionMetadata;
            this.ConcealValueOnDocument = ConcealValueOnDocument;
            this.ConcealValueOnDocumentMetadata = ConcealValueOnDocumentMetadata;
            this.ConditionalParentLabel = ConditionalParentLabel;
            this.ConditionalParentLabelMetadata = ConditionalParentLabelMetadata;
            this.ConditionalParentValue = ConditionalParentValue;
            this.ConditionalParentValueMetadata = ConditionalParentValueMetadata;
            this.ConnectedObjectDetails = ConnectedObjectDetails;
            this.CustomTabId = CustomTabId;
            this.CustomTabIdMetadata = CustomTabIdMetadata;
            this.DisableAutoSize = DisableAutoSize;
            this.DisableAutoSizeMetadata = DisableAutoSizeMetadata;
            this.DocumentId = DocumentId;
            this.DocumentIdMetadata = DocumentIdMetadata;
            this.ErrorDetails = ErrorDetails;
            this.Font = Font;
            this.FontColor = FontColor;
            this.FontColorMetadata = FontColorMetadata;
            this.FontMetadata = FontMetadata;
            this.FontSize = FontSize;
            this.FontSizeMetadata = FontSizeMetadata;
            this.FormOrder = FormOrder;
            this.FormOrderMetadata = FormOrderMetadata;
            this.FormPageLabel = FormPageLabel;
            this.FormPageLabelMetadata = FormPageLabelMetadata;
            this.FormPageNumber = FormPageNumber;
            this.FormPageNumberMetadata = FormPageNumberMetadata;
            this.Height = Height;
            this.HeightMetadata = HeightMetadata;
            this.Italic = Italic;
            this.ItalicMetadata = ItalicMetadata;
            this.LocalePolicy = LocalePolicy;
            this.Locked = Locked;
            this.LockedMetadata = LockedMetadata;
            this.MaxLength = MaxLength;
            this.MaxLengthMetadata = MaxLengthMetadata;
            this.MergeField = MergeField;
            this.MergeFieldXml = MergeFieldXml;
            this.Name = Name;
            this.NameMetadata = NameMetadata;
            this.OriginalValue = OriginalValue;
            this.OriginalValueMetadata = OriginalValueMetadata;
            this.PageNumber = PageNumber;
            this.PageNumberMetadata = PageNumberMetadata;
            this.RecipientId = RecipientId;
            this.RecipientIdGuid = RecipientIdGuid;
            this.RecipientIdGuidMetadata = RecipientIdGuidMetadata;
            this.RecipientIdMetadata = RecipientIdMetadata;
            this.RequireAll = RequireAll;
            this.RequireAllMetadata = RequireAllMetadata;
            this.Required = Required;
            this.RequiredMetadata = RequiredMetadata;
            this.RequireInitialOnSharedChange = RequireInitialOnSharedChange;
            this.RequireInitialOnSharedChangeMetadata = RequireInitialOnSharedChangeMetadata;
            this.SenderRequired = SenderRequired;
            this.SenderRequiredMetadata = SenderRequiredMetadata;
            this.Shared = Shared;
            this.SharedMetadata = SharedMetadata;
            this.ShareToRecipients = ShareToRecipients;
            this.ShareToRecipientsMetadata = ShareToRecipientsMetadata;
            this.SmartContractInformation = SmartContractInformation;
            this.Source = Source;
            this.Status = Status;
            this.StatusMetadata = StatusMetadata;
            this.TabFullyQualifiedPath = TabFullyQualifiedPath;
            this.TabGroupLabels = TabGroupLabels;
            this.TabGroupLabelsMetadata = TabGroupLabelsMetadata;
            this.TabId = TabId;
            this.TabIdMetadata = TabIdMetadata;
            this.TabLabel = TabLabel;
            this.TabLabelMetadata = TabLabelMetadata;
            this.TabOrder = TabOrder;
            this.TabOrderMetadata = TabOrderMetadata;
            this.TabType = TabType;
            this.TabTypeMetadata = TabTypeMetadata;
            this.TemplateLocked = TemplateLocked;
            this.TemplateLockedMetadata = TemplateLockedMetadata;
            this.TemplateRequired = TemplateRequired;
            this.TemplateRequiredMetadata = TemplateRequiredMetadata;
            this.Tooltip = Tooltip;
            this.ToolTipMetadata = ToolTipMetadata;
            this.Underline = Underline;
            this.UnderlineMetadata = UnderlineMetadata;
            this.ValidationMessage = ValidationMessage;
            this.ValidationMessageMetadata = ValidationMessageMetadata;
            this.ValidationPattern = ValidationPattern;
            this.ValidationPatternMetadata = ValidationPatternMetadata;
            this.Value = Value;
            this.ValueMetadata = ValueMetadata;
            this.WarningDetails = WarningDetails;
            this.Width = Width;
            this.WidthMetadata = WidthMetadata;
            this.XPosition = XPosition;
            this.XPositionMetadata = XPositionMetadata;
            this.YPosition = YPosition;
            this.YPositionMetadata = YPositionMetadata;
        }
        
        /// <summary>
        /// Gets or Sets AnchorAllowWhiteSpaceInCharacters
        /// </summary>
        [DataMember(Name="anchorAllowWhiteSpaceInCharacters", EmitDefaultValue=false)]
        public string AnchorAllowWhiteSpaceInCharacters { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorAllowWhiteSpaceInCharacters&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorAllowWhiteSpaceInCharacters&#x60; property is editable.</value>
        [DataMember(Name="anchorAllowWhiteSpaceInCharactersMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorAllowWhiteSpaceInCharactersMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
        /// </summary>
        /// <value>When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.</value>
        [DataMember(Name="anchorCaseSensitive", EmitDefaultValue=false)]
        public string AnchorCaseSensitive { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorCaseSensitive&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorCaseSensitive&#x60; property is editable.</value>
        [DataMember(Name="anchorCaseSensitiveMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorCaseSensitiveMetadata { get; set; }
        /// <summary>
        /// Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
        /// </summary>
        /// <value>Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.</value>
        [DataMember(Name="anchorHorizontalAlignment", EmitDefaultValue=false)]
        public string AnchorHorizontalAlignment { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorHorizontalAlignment&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorHorizontalAlignment&#x60; property is editable.</value>
        [DataMember(Name="anchorHorizontalAlignmentMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorHorizontalAlignmentMetadata { get; set; }
        /// <summary>
        /// When set to **true**, this tab is ignored if anchorString is not found in the document.
        /// </summary>
        /// <value>When set to **true**, this tab is ignored if anchorString is not found in the document.</value>
        [DataMember(Name="anchorIgnoreIfNotPresent", EmitDefaultValue=false)]
        public string AnchorIgnoreIfNotPresent { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorIgnoreIfNotPresent&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorIgnoreIfNotPresent&#x60; property is editable.</value>
        [DataMember(Name="anchorIgnoreIfNotPresentMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorIgnoreIfNotPresentMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
        /// </summary>
        /// <value>When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.</value>
        [DataMember(Name="anchorMatchWholeWord", EmitDefaultValue=false)]
        public string AnchorMatchWholeWord { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorMatchWholeWord&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorMatchWholeWord&#x60; property is editable.</value>
        [DataMember(Name="anchorMatchWholeWordMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorMatchWholeWordMetadata { get; set; }
        /// <summary>
        /// Anchor text information for a radio button.
        /// </summary>
        /// <value>Anchor text information for a radio button.</value>
        [DataMember(Name="anchorString", EmitDefaultValue=false)]
        public string AnchorString { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorString&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorString&#x60; property is editable.</value>
        [DataMember(Name="anchorStringMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorStringMetadata { get; set; }
        /// <summary>
        /// Gets or Sets AnchorTabProcessorVersion
        /// </summary>
        [DataMember(Name="anchorTabProcessorVersion", EmitDefaultValue=false)]
        public string AnchorTabProcessorVersion { get; set; }
        /// <summary>
        /// Reserved for DocuSign.
        /// </summary>
        /// <value>Reserved for DocuSign.</value>
        [DataMember(Name="anchorTabProcessorVersionMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorTabProcessorVersionMetadata { get; set; }
        /// <summary>
        /// Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
        /// </summary>
        /// <value>Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.</value>
        [DataMember(Name="anchorUnits", EmitDefaultValue=false)]
        public string AnchorUnits { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorUnits&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorUnits&#x60; property is editable.</value>
        [DataMember(Name="anchorUnitsMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorUnitsMetadata { get; set; }
        /// <summary>
        /// Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString.
        /// </summary>
        /// <value>Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString.</value>
        [DataMember(Name="anchorXOffset", EmitDefaultValue=false)]
        public string AnchorXOffset { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorXOffset&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorXOffset&#x60; property is editable.</value>
        [DataMember(Name="anchorXOffsetMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorXOffsetMetadata { get; set; }
        /// <summary>
        /// Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString.
        /// </summary>
        /// <value>Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString.</value>
        [DataMember(Name="anchorYOffset", EmitDefaultValue=false)]
        public string AnchorYOffset { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorYOffset&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorYOffset&#x60; property is editable.</value>
        [DataMember(Name="anchorYOffsetMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorYOffsetMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the information in the tab is bold.
        /// </summary>
        /// <value>When set to **true**, the information in the tab is bold.</value>
        [DataMember(Name="bold", EmitDefaultValue=false)]
        public string Bold { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;bold&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;bold&#x60; property is editable.</value>
        [DataMember(Name="boldMetadata", EmitDefaultValue=false)]
        public PropertyMetadata BoldMetadata { get; set; }
        /// <summary>
        /// Gets or Sets Caption
        /// </summary>
        [DataMember(Name="caption", EmitDefaultValue=false)]
        public string Caption { get; set; }
        /// <summary>
        /// Gets or Sets CaptionMetadata
        /// </summary>
        [DataMember(Name="captionMetadata", EmitDefaultValue=false)]
        public PropertyMetadata CaptionMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.  When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.  This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.
        /// </summary>
        /// <value>When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.  When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.  This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.</value>
        [DataMember(Name="concealValueOnDocument", EmitDefaultValue=false)]
        public string ConcealValueOnDocument { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;concealValueOnDocument&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;concealValueOnDocument&#x60; property is editable.</value>
        [DataMember(Name="concealValueOnDocumentMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ConcealValueOnDocumentMetadata { get; set; }
        /// <summary>
        /// For conditional fields this is the TabLabel of the parent tab that controls this tab&#39;s visibility.
        /// </summary>
        /// <value>For conditional fields this is the TabLabel of the parent tab that controls this tab&#39;s visibility.</value>
        [DataMember(Name="conditionalParentLabel", EmitDefaultValue=false)]
        public string ConditionalParentLabel { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;conditionalParentLabel&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;conditionalParentLabel&#x60; property is editable.</value>
        [DataMember(Name="conditionalParentLabelMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ConditionalParentLabelMetadata { get; set; }
        /// <summary>
        /// For conditional fields, this is the value of the parent tab that controls the tab&#39;s visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \&quot;on\&quot; as the value to show that the parent tab is active. 
        /// </summary>
        /// <value>For conditional fields, this is the value of the parent tab that controls the tab&#39;s visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \&quot;on\&quot; as the value to show that the parent tab is active. </value>
        [DataMember(Name="conditionalParentValue", EmitDefaultValue=false)]
        public string ConditionalParentValue { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;conditionalParentValue&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;conditionalParentValue&#x60; property is editable.</value>
        [DataMember(Name="conditionalParentValueMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ConditionalParentValueMetadata { get; set; }
        /// <summary>
        /// Gets or Sets ConnectedObjectDetails
        /// </summary>
        [DataMember(Name="connectedObjectDetails", EmitDefaultValue=false)]
        public ConnectedObjectDetails ConnectedObjectDetails { get; set; }
        /// <summary>
        /// The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
        /// </summary>
        /// <value>The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.</value>
        [DataMember(Name="customTabId", EmitDefaultValue=false)]
        public string CustomTabId { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;customTabId&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;customTabId&#x60; property is editable.</value>
        [DataMember(Name="customTabIdMetadata", EmitDefaultValue=false)]
        public PropertyMetadata CustomTabIdMetadata { get; set; }
        /// <summary>
        /// When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.
        /// </summary>
        /// <value>When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.</value>
        [DataMember(Name="disableAutoSize", EmitDefaultValue=false)]
        public string DisableAutoSize { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;disableAutoSize&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;disableAutoSize&#x60; property is editable.</value>
        [DataMember(Name="disableAutoSizeMetadata", EmitDefaultValue=false)]
        public PropertyMetadata DisableAutoSizeMetadata { get; set; }
        /// <summary>
        /// Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.
        /// </summary>
        /// <value>Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.</value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public string DocumentId { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;documentId&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;documentId&#x60; property is editable.</value>
        [DataMember(Name="documentIdMetadata", EmitDefaultValue=false)]
        public PropertyMetadata DocumentIdMetadata { get; set; }
        /// <summary>
        /// Array or errors.
        /// </summary>
        /// <value>Array or errors.</value>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
        /// </summary>
        /// <value>The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.</value>
        [DataMember(Name="font", EmitDefaultValue=false)]
        public string Font { get; set; }
        /// <summary>
        /// The font color used for the information in the tab.  Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
        /// </summary>
        /// <value>The font color used for the information in the tab.  Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.</value>
        [DataMember(Name="fontColor", EmitDefaultValue=false)]
        public string FontColor { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;fontColor&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;fontColor&#x60; property is editable.</value>
        [DataMember(Name="fontColorMetadata", EmitDefaultValue=false)]
        public PropertyMetadata FontColorMetadata { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;font&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;font&#x60; property is editable.</value>
        [DataMember(Name="fontMetadata", EmitDefaultValue=false)]
        public PropertyMetadata FontMetadata { get; set; }
        /// <summary>
        /// The font size used for the information in the tab.  Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
        /// </summary>
        /// <value>The font size used for the information in the tab.  Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.</value>
        [DataMember(Name="fontSize", EmitDefaultValue=false)]
        public string FontSize { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;fontSize&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;fontSize&#x60; property is editable.</value>
        [DataMember(Name="fontSizeMetadata", EmitDefaultValue=false)]
        public PropertyMetadata FontSizeMetadata { get; set; }
        /// <summary>
        /// Gets or Sets FormOrder
        /// </summary>
        [DataMember(Name="formOrder", EmitDefaultValue=false)]
        public string FormOrder { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;formOrder&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;formOrder&#x60; property is editable.</value>
        [DataMember(Name="formOrderMetadata", EmitDefaultValue=false)]
        public PropertyMetadata FormOrderMetadata { get; set; }
        /// <summary>
        /// Gets or Sets FormPageLabel
        /// </summary>
        [DataMember(Name="formPageLabel", EmitDefaultValue=false)]
        public string FormPageLabel { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;formPageLabel&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;formPageLabel&#x60; property is editable.</value>
        [DataMember(Name="formPageLabelMetadata", EmitDefaultValue=false)]
        public PropertyMetadata FormPageLabelMetadata { get; set; }
        /// <summary>
        /// Gets or Sets FormPageNumber
        /// </summary>
        [DataMember(Name="formPageNumber", EmitDefaultValue=false)]
        public string FormPageNumber { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;fromPageNumber&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;fromPageNumber&#x60; property is editable.</value>
        [DataMember(Name="formPageNumberMetadata", EmitDefaultValue=false)]
        public PropertyMetadata FormPageNumberMetadata { get; set; }
        /// <summary>
        /// Height of the tab in pixels.
        /// </summary>
        /// <value>Height of the tab in pixels.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public string Height { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;height&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;height&#x60; property is editable.</value>
        [DataMember(Name="heightMetadata", EmitDefaultValue=false)]
        public PropertyMetadata HeightMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the information in the tab is italic.
        /// </summary>
        /// <value>When set to **true**, the information in the tab is italic.</value>
        [DataMember(Name="italic", EmitDefaultValue=false)]
        public string Italic { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;italic&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;italic&#x60; property is editable.</value>
        [DataMember(Name="italicMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ItalicMetadata { get; set; }
        /// <summary>
        /// Reserved for DocuSign.
        /// </summary>
        /// <value>Reserved for DocuSign.</value>
        [DataMember(Name="localePolicy", EmitDefaultValue=false)]
        public LocalePolicyTab LocalePolicy { get; set; }
        /// <summary>
        /// When set to **true**, the signer cannot change the data of the custom tab.
        /// </summary>
        /// <value>When set to **true**, the signer cannot change the data of the custom tab.</value>
        [DataMember(Name="locked", EmitDefaultValue=false)]
        public string Locked { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;locked&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;locked&#x60; property is editable.</value>
        [DataMember(Name="lockedMetadata", EmitDefaultValue=false)]
        public PropertyMetadata LockedMetadata { get; set; }
        /// <summary>
        /// An optional value that describes the maximum length of the property when the property is a string.
        /// </summary>
        /// <value>An optional value that describes the maximum length of the property when the property is a string.</value>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public string MaxLength { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;maxLength&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;maxLength&#x60; property is editable.</value>
        [DataMember(Name="maxLengthMetadata", EmitDefaultValue=false)]
        public PropertyMetadata MaxLengthMetadata { get; set; }
        /// <summary>
        /// Contains the information necessary to map the tab to a field in SalesForce.
        /// </summary>
        /// <value>Contains the information necessary to map the tab to a field in SalesForce.</value>
        [DataMember(Name="mergeField", EmitDefaultValue=false)]
        public MergeField MergeField { get; set; }
        /// <summary>
        /// Gets or Sets MergeFieldXml
        /// </summary>
        [DataMember(Name="mergeFieldXml", EmitDefaultValue=false)]
        public string MergeFieldXml { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;name&#x60; property is editable. This property is read-only.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;name&#x60; property is editable. This property is read-only.</value>
        [DataMember(Name="nameMetadata", EmitDefaultValue=false)]
        public PropertyMetadata NameMetadata { get; set; }
        /// <summary>
        /// The initial value of the tab when it was sent to the recipient. 
        /// </summary>
        /// <value>The initial value of the tab when it was sent to the recipient. </value>
        [DataMember(Name="originalValue", EmitDefaultValue=false)]
        public string OriginalValue { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;originalValue&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;originalValue&#x60; property is editable.</value>
        [DataMember(Name="originalValueMetadata", EmitDefaultValue=false)]
        public PropertyMetadata OriginalValueMetadata { get; set; }
        /// <summary>
        /// Specifies the page number on which the tab is located.
        /// </summary>
        /// <value>Specifies the page number on which the tab is located.</value>
        [DataMember(Name="pageNumber", EmitDefaultValue=false)]
        public string PageNumber { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;pageNumber&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;pageNumber&#x60; property is editable.</value>
        [DataMember(Name="pageNumberMetadata", EmitDefaultValue=false)]
        public PropertyMetadata PageNumberMetadata { get; set; }
        /// <summary>
        /// Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
        /// </summary>
        /// <value>Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.</value>
        [DataMember(Name="recipientId", EmitDefaultValue=false)]
        public string RecipientId { get; set; }
        /// <summary>
        /// Gets or Sets RecipientIdGuid
        /// </summary>
        [DataMember(Name="recipientIdGuid", EmitDefaultValue=false)]
        public string RecipientIdGuid { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;recipientIdGuid&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;recipientIdGuid&#x60; property is editable.</value>
        [DataMember(Name="recipientIdGuidMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RecipientIdGuidMetadata { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;recipientId&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;recipientId&#x60; property is editable.</value>
        [DataMember(Name="recipientIdMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RecipientIdMetadata { get; set; }
        /// <summary>
        /// When set to **true** and shared is true, information must be entered in this field to complete the envelope. 
        /// </summary>
        /// <value>When set to **true** and shared is true, information must be entered in this field to complete the envelope. </value>
        [DataMember(Name="requireAll", EmitDefaultValue=false)]
        public string RequireAll { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;requireAll&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;requireAll&#x60; property is editable.</value>
        [DataMember(Name="requireAllMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RequireAllMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the signer is required to fill out this tab
        /// </summary>
        /// <value>When set to **true**, the signer is required to fill out this tab</value>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public string Required { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;required&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;required&#x60; property is editable.</value>
        [DataMember(Name="requiredMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RequiredMetadata { get; set; }
        /// <summary>
        /// Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
        /// </summary>
        /// <value>Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.</value>
        [DataMember(Name="requireInitialOnSharedChange", EmitDefaultValue=false)]
        public string RequireInitialOnSharedChange { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;requireInitialOnSharedChange&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;requireInitialOnSharedChange&#x60; property is editable.</value>
        [DataMember(Name="requireInitialOnSharedChangeMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RequireInitialOnSharedChangeMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the sender must populate the tab before an envelope can be sent using the template.   This value tab can only be changed by modifying (PUT) the template.   Tabs with a &#x60;senderRequired&#x60; value of true cannot be deleted from an envelope.
        /// </summary>
        /// <value>When set to **true**, the sender must populate the tab before an envelope can be sent using the template.   This value tab can only be changed by modifying (PUT) the template.   Tabs with a &#x60;senderRequired&#x60; value of true cannot be deleted from an envelope.</value>
        [DataMember(Name="senderRequired", EmitDefaultValue=false)]
        public string SenderRequired { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;senderRequired&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;senderRequired&#x60; property is editable.</value>
        [DataMember(Name="senderRequiredMetadata", EmitDefaultValue=false)]
        public PropertyMetadata SenderRequiredMetadata { get; set; }
        /// <summary>
        /// When set to **true**, this custom tab is shared.
        /// </summary>
        /// <value>When set to **true**, this custom tab is shared.</value>
        [DataMember(Name="shared", EmitDefaultValue=false)]
        public string Shared { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;shared&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;shared&#x60; property is editable.</value>
        [DataMember(Name="sharedMetadata", EmitDefaultValue=false)]
        public PropertyMetadata SharedMetadata { get; set; }
        /// <summary>
        /// Gets or Sets ShareToRecipients
        /// </summary>
        [DataMember(Name="shareToRecipients", EmitDefaultValue=false)]
        public string ShareToRecipients { get; set; }
        /// <summary>
        /// Reserved for DocuSign.
        /// </summary>
        /// <value>Reserved for DocuSign.</value>
        [DataMember(Name="shareToRecipientsMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ShareToRecipientsMetadata { get; set; }
        /// <summary>
        /// Reserved for DocuSign.
        /// </summary>
        /// <value>Reserved for DocuSign.</value>
        [DataMember(Name="smartContractInformation", EmitDefaultValue=false)]
        public SmartContractInformation SmartContractInformation { get; set; }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }
        /// <summary>
        /// Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.
        /// </summary>
        /// <value>Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;status&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;status&#x60; property is editable.</value>
        [DataMember(Name="statusMetadata", EmitDefaultValue=false)]
        public PropertyMetadata StatusMetadata { get; set; }
        /// <summary>
        /// Gets or Sets TabFullyQualifiedPath
        /// </summary>
        [DataMember(Name="tabFullyQualifiedPath", EmitDefaultValue=false)]
        public string TabFullyQualifiedPath { get; set; }
        /// <summary>
        /// Gets or Sets TabGroupLabels
        /// </summary>
        [DataMember(Name="tabGroupLabels", EmitDefaultValue=false)]
        public List<string> TabGroupLabels { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;tabGroupLabels&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;tabGroupLabels&#x60; property is editable.</value>
        [DataMember(Name="tabGroupLabelsMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TabGroupLabelsMetadata { get; set; }
        /// <summary>
        /// The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].     
        /// </summary>
        /// <value>The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].     </value>
        [DataMember(Name="tabId", EmitDefaultValue=false)]
        public string TabId { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;tabId&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;tabId&#x60; property is editable.</value>
        [DataMember(Name="tabIdMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TabIdMetadata { get; set; }
        /// <summary>
        /// The label string associated with the tab.
        /// </summary>
        /// <value>The label string associated with the tab.</value>
        [DataMember(Name="tabLabel", EmitDefaultValue=false)]
        public string TabLabel { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;tabLabel&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;tabLabel&#x60; property is editable.</value>
        [DataMember(Name="tabLabelMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TabLabelMetadata { get; set; }
        /// <summary>
        /// Gets or Sets TabOrder
        /// </summary>
        [DataMember(Name="tabOrder", EmitDefaultValue=false)]
        public string TabOrder { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;tabOrder&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;tabOrder&#x60; property is editable.</value>
        [DataMember(Name="tabOrderMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TabOrderMetadata { get; set; }
        /// <summary>
        /// Gets or Sets TabType
        /// </summary>
        [DataMember(Name="tabType", EmitDefaultValue=false)]
        public string TabType { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;tabType&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;tabType&#x60; property is editable.</value>
        [DataMember(Name="tabTypeMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TabTypeMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
        /// </summary>
        /// <value>When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. </value>
        [DataMember(Name="templateLocked", EmitDefaultValue=false)]
        public string TemplateLocked { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;templateLocked&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;templateLocked&#x60; property is editable.</value>
        [DataMember(Name="templateLockedMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TemplateLockedMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
        /// </summary>
        /// <value>When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.</value>
        [DataMember(Name="templateRequired", EmitDefaultValue=false)]
        public string TemplateRequired { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;templateRequired&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;templateRequired&#x60; property is editable.</value>
        [DataMember(Name="templateRequiredMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TemplateRequiredMetadata { get; set; }
        /// <summary>
        /// Gets or Sets Tooltip
        /// </summary>
        [DataMember(Name="tooltip", EmitDefaultValue=false)]
        public string Tooltip { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;toolTip&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;toolTip&#x60; property is editable.</value>
        [DataMember(Name="toolTipMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ToolTipMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the information in the tab is underlined.
        /// </summary>
        /// <value>When set to **true**, the information in the tab is underlined.</value>
        [DataMember(Name="underline", EmitDefaultValue=false)]
        public string Underline { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;underline&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;underline&#x60; property is editable.</value>
        [DataMember(Name="underlineMetadata", EmitDefaultValue=false)]
        public PropertyMetadata UnderlineMetadata { get; set; }
        /// <summary>
        /// The message displayed if the custom tab fails input validation (either custom of embedded).
        /// </summary>
        /// <value>The message displayed if the custom tab fails input validation (either custom of embedded).</value>
        [DataMember(Name="validationMessage", EmitDefaultValue=false)]
        public string ValidationMessage { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;validationMessage&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;validationMessage&#x60; property is editable.</value>
        [DataMember(Name="validationMessageMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ValidationMessageMetadata { get; set; }
        /// <summary>
        /// A regular expression used to validate input for the tab.
        /// </summary>
        /// <value>A regular expression used to validate input for the tab.</value>
        [DataMember(Name="validationPattern", EmitDefaultValue=false)]
        public string ValidationPattern { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;validationPattern&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;validationPattern&#x60; property is editable.</value>
        [DataMember(Name="validationPatternMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ValidationPatternMetadata { get; set; }
        /// <summary>
        /// Specifies the value of the tab. 
        /// </summary>
        /// <value>Specifies the value of the tab. </value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;value&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;value&#x60; property is editable.</value>
        [DataMember(Name="valueMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ValueMetadata { get; set; }
        /// <summary>
        /// Gets or Sets WarningDetails
        /// </summary>
        [DataMember(Name="warningDetails", EmitDefaultValue=false)]
        public ErrorDetails WarningDetails { get; set; }
        /// <summary>
        /// Width of the tab in pixels.
        /// </summary>
        /// <value>Width of the tab in pixels.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public string Width { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;width&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;width&#x60; property is editable.</value>
        [DataMember(Name="widthMetadata", EmitDefaultValue=false)]
        public PropertyMetadata WidthMetadata { get; set; }
        /// <summary>
        /// This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position.
        /// </summary>
        /// <value>This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position.</value>
        [DataMember(Name="xPosition", EmitDefaultValue=false)]
        public string XPosition { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;xPosition&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;xPosition&#x60; property is editable.</value>
        [DataMember(Name="xPositionMetadata", EmitDefaultValue=false)]
        public PropertyMetadata XPositionMetadata { get; set; }
        /// <summary>
        /// This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
        /// </summary>
        /// <value>This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.</value>
        [DataMember(Name="yPosition", EmitDefaultValue=false)]
        public string YPosition { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;yPosition&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;yPosition&#x60; property is editable.</value>
        [DataMember(Name="yPositionMetadata", EmitDefaultValue=false)]
        public PropertyMetadata YPositionMetadata { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Date {\n");
            sb.Append("  AnchorAllowWhiteSpaceInCharacters: ").Append(AnchorAllowWhiteSpaceInCharacters).Append("\n");
            sb.Append("  AnchorAllowWhiteSpaceInCharactersMetadata: ").Append(AnchorAllowWhiteSpaceInCharactersMetadata).Append("\n");
            sb.Append("  AnchorCaseSensitive: ").Append(AnchorCaseSensitive).Append("\n");
            sb.Append("  AnchorCaseSensitiveMetadata: ").Append(AnchorCaseSensitiveMetadata).Append("\n");
            sb.Append("  AnchorHorizontalAlignment: ").Append(AnchorHorizontalAlignment).Append("\n");
            sb.Append("  AnchorHorizontalAlignmentMetadata: ").Append(AnchorHorizontalAlignmentMetadata).Append("\n");
            sb.Append("  AnchorIgnoreIfNotPresent: ").Append(AnchorIgnoreIfNotPresent).Append("\n");
            sb.Append("  AnchorIgnoreIfNotPresentMetadata: ").Append(AnchorIgnoreIfNotPresentMetadata).Append("\n");
            sb.Append("  AnchorMatchWholeWord: ").Append(AnchorMatchWholeWord).Append("\n");
            sb.Append("  AnchorMatchWholeWordMetadata: ").Append(AnchorMatchWholeWordMetadata).Append("\n");
            sb.Append("  AnchorString: ").Append(AnchorString).Append("\n");
            sb.Append("  AnchorStringMetadata: ").Append(AnchorStringMetadata).Append("\n");
            sb.Append("  AnchorTabProcessorVersion: ").Append(AnchorTabProcessorVersion).Append("\n");
            sb.Append("  AnchorTabProcessorVersionMetadata: ").Append(AnchorTabProcessorVersionMetadata).Append("\n");
            sb.Append("  AnchorUnits: ").Append(AnchorUnits).Append("\n");
            sb.Append("  AnchorUnitsMetadata: ").Append(AnchorUnitsMetadata).Append("\n");
            sb.Append("  AnchorXOffset: ").Append(AnchorXOffset).Append("\n");
            sb.Append("  AnchorXOffsetMetadata: ").Append(AnchorXOffsetMetadata).Append("\n");
            sb.Append("  AnchorYOffset: ").Append(AnchorYOffset).Append("\n");
            sb.Append("  AnchorYOffsetMetadata: ").Append(AnchorYOffsetMetadata).Append("\n");
            sb.Append("  Bold: ").Append(Bold).Append("\n");
            sb.Append("  BoldMetadata: ").Append(BoldMetadata).Append("\n");
            sb.Append("  Caption: ").Append(Caption).Append("\n");
            sb.Append("  CaptionMetadata: ").Append(CaptionMetadata).Append("\n");
            sb.Append("  ConcealValueOnDocument: ").Append(ConcealValueOnDocument).Append("\n");
            sb.Append("  ConcealValueOnDocumentMetadata: ").Append(ConcealValueOnDocumentMetadata).Append("\n");
            sb.Append("  ConditionalParentLabel: ").Append(ConditionalParentLabel).Append("\n");
            sb.Append("  ConditionalParentLabelMetadata: ").Append(ConditionalParentLabelMetadata).Append("\n");
            sb.Append("  ConditionalParentValue: ").Append(ConditionalParentValue).Append("\n");
            sb.Append("  ConditionalParentValueMetadata: ").Append(ConditionalParentValueMetadata).Append("\n");
            sb.Append("  ConnectedObjectDetails: ").Append(ConnectedObjectDetails).Append("\n");
            sb.Append("  CustomTabId: ").Append(CustomTabId).Append("\n");
            sb.Append("  CustomTabIdMetadata: ").Append(CustomTabIdMetadata).Append("\n");
            sb.Append("  DisableAutoSize: ").Append(DisableAutoSize).Append("\n");
            sb.Append("  DisableAutoSizeMetadata: ").Append(DisableAutoSizeMetadata).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DocumentIdMetadata: ").Append(DocumentIdMetadata).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  Font: ").Append(Font).Append("\n");
            sb.Append("  FontColor: ").Append(FontColor).Append("\n");
            sb.Append("  FontColorMetadata: ").Append(FontColorMetadata).Append("\n");
            sb.Append("  FontMetadata: ").Append(FontMetadata).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  FontSizeMetadata: ").Append(FontSizeMetadata).Append("\n");
            sb.Append("  FormOrder: ").Append(FormOrder).Append("\n");
            sb.Append("  FormOrderMetadata: ").Append(FormOrderMetadata).Append("\n");
            sb.Append("  FormPageLabel: ").Append(FormPageLabel).Append("\n");
            sb.Append("  FormPageLabelMetadata: ").Append(FormPageLabelMetadata).Append("\n");
            sb.Append("  FormPageNumber: ").Append(FormPageNumber).Append("\n");
            sb.Append("  FormPageNumberMetadata: ").Append(FormPageNumberMetadata).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  HeightMetadata: ").Append(HeightMetadata).Append("\n");
            sb.Append("  Italic: ").Append(Italic).Append("\n");
            sb.Append("  ItalicMetadata: ").Append(ItalicMetadata).Append("\n");
            sb.Append("  LocalePolicy: ").Append(LocalePolicy).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  LockedMetadata: ").Append(LockedMetadata).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  MaxLengthMetadata: ").Append(MaxLengthMetadata).Append("\n");
            sb.Append("  MergeField: ").Append(MergeField).Append("\n");
            sb.Append("  MergeFieldXml: ").Append(MergeFieldXml).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameMetadata: ").Append(NameMetadata).Append("\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  OriginalValueMetadata: ").Append(OriginalValueMetadata).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  PageNumberMetadata: ").Append(PageNumberMetadata).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  RecipientIdGuid: ").Append(RecipientIdGuid).Append("\n");
            sb.Append("  RecipientIdGuidMetadata: ").Append(RecipientIdGuidMetadata).Append("\n");
            sb.Append("  RecipientIdMetadata: ").Append(RecipientIdMetadata).Append("\n");
            sb.Append("  RequireAll: ").Append(RequireAll).Append("\n");
            sb.Append("  RequireAllMetadata: ").Append(RequireAllMetadata).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  RequiredMetadata: ").Append(RequiredMetadata).Append("\n");
            sb.Append("  RequireInitialOnSharedChange: ").Append(RequireInitialOnSharedChange).Append("\n");
            sb.Append("  RequireInitialOnSharedChangeMetadata: ").Append(RequireInitialOnSharedChangeMetadata).Append("\n");
            sb.Append("  SenderRequired: ").Append(SenderRequired).Append("\n");
            sb.Append("  SenderRequiredMetadata: ").Append(SenderRequiredMetadata).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  SharedMetadata: ").Append(SharedMetadata).Append("\n");
            sb.Append("  ShareToRecipients: ").Append(ShareToRecipients).Append("\n");
            sb.Append("  ShareToRecipientsMetadata: ").Append(ShareToRecipientsMetadata).Append("\n");
            sb.Append("  SmartContractInformation: ").Append(SmartContractInformation).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusMetadata: ").Append(StatusMetadata).Append("\n");
            sb.Append("  TabFullyQualifiedPath: ").Append(TabFullyQualifiedPath).Append("\n");
            sb.Append("  TabGroupLabels: ").Append(TabGroupLabels).Append("\n");
            sb.Append("  TabGroupLabelsMetadata: ").Append(TabGroupLabelsMetadata).Append("\n");
            sb.Append("  TabId: ").Append(TabId).Append("\n");
            sb.Append("  TabIdMetadata: ").Append(TabIdMetadata).Append("\n");
            sb.Append("  TabLabel: ").Append(TabLabel).Append("\n");
            sb.Append("  TabLabelMetadata: ").Append(TabLabelMetadata).Append("\n");
            sb.Append("  TabOrder: ").Append(TabOrder).Append("\n");
            sb.Append("  TabOrderMetadata: ").Append(TabOrderMetadata).Append("\n");
            sb.Append("  TabType: ").Append(TabType).Append("\n");
            sb.Append("  TabTypeMetadata: ").Append(TabTypeMetadata).Append("\n");
            sb.Append("  TemplateLocked: ").Append(TemplateLocked).Append("\n");
            sb.Append("  TemplateLockedMetadata: ").Append(TemplateLockedMetadata).Append("\n");
            sb.Append("  TemplateRequired: ").Append(TemplateRequired).Append("\n");
            sb.Append("  TemplateRequiredMetadata: ").Append(TemplateRequiredMetadata).Append("\n");
            sb.Append("  Tooltip: ").Append(Tooltip).Append("\n");
            sb.Append("  ToolTipMetadata: ").Append(ToolTipMetadata).Append("\n");
            sb.Append("  Underline: ").Append(Underline).Append("\n");
            sb.Append("  UnderlineMetadata: ").Append(UnderlineMetadata).Append("\n");
            sb.Append("  ValidationMessage: ").Append(ValidationMessage).Append("\n");
            sb.Append("  ValidationMessageMetadata: ").Append(ValidationMessageMetadata).Append("\n");
            sb.Append("  ValidationPattern: ").Append(ValidationPattern).Append("\n");
            sb.Append("  ValidationPatternMetadata: ").Append(ValidationPatternMetadata).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueMetadata: ").Append(ValueMetadata).Append("\n");
            sb.Append("  WarningDetails: ").Append(WarningDetails).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  WidthMetadata: ").Append(WidthMetadata).Append("\n");
            sb.Append("  XPosition: ").Append(XPosition).Append("\n");
            sb.Append("  XPositionMetadata: ").Append(XPositionMetadata).Append("\n");
            sb.Append("  YPosition: ").Append(YPosition).Append("\n");
            sb.Append("  YPositionMetadata: ").Append(YPositionMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Date);
        }

        /// <summary>
        /// Returns true if Date instances are equal
        /// </summary>
        /// <param name="other">Instance of Date to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Date other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AnchorAllowWhiteSpaceInCharacters == other.AnchorAllowWhiteSpaceInCharacters ||
                    this.AnchorAllowWhiteSpaceInCharacters != null &&
                    this.AnchorAllowWhiteSpaceInCharacters.Equals(other.AnchorAllowWhiteSpaceInCharacters)
                ) && 
                (
                    this.AnchorAllowWhiteSpaceInCharactersMetadata == other.AnchorAllowWhiteSpaceInCharactersMetadata ||
                    this.AnchorAllowWhiteSpaceInCharactersMetadata != null &&
                    this.AnchorAllowWhiteSpaceInCharactersMetadata.Equals(other.AnchorAllowWhiteSpaceInCharactersMetadata)
                ) && 
                (
                    this.AnchorCaseSensitive == other.AnchorCaseSensitive ||
                    this.AnchorCaseSensitive != null &&
                    this.AnchorCaseSensitive.Equals(other.AnchorCaseSensitive)
                ) && 
                (
                    this.AnchorCaseSensitiveMetadata == other.AnchorCaseSensitiveMetadata ||
                    this.AnchorCaseSensitiveMetadata != null &&
                    this.AnchorCaseSensitiveMetadata.Equals(other.AnchorCaseSensitiveMetadata)
                ) && 
                (
                    this.AnchorHorizontalAlignment == other.AnchorHorizontalAlignment ||
                    this.AnchorHorizontalAlignment != null &&
                    this.AnchorHorizontalAlignment.Equals(other.AnchorHorizontalAlignment)
                ) && 
                (
                    this.AnchorHorizontalAlignmentMetadata == other.AnchorHorizontalAlignmentMetadata ||
                    this.AnchorHorizontalAlignmentMetadata != null &&
                    this.AnchorHorizontalAlignmentMetadata.Equals(other.AnchorHorizontalAlignmentMetadata)
                ) && 
                (
                    this.AnchorIgnoreIfNotPresent == other.AnchorIgnoreIfNotPresent ||
                    this.AnchorIgnoreIfNotPresent != null &&
                    this.AnchorIgnoreIfNotPresent.Equals(other.AnchorIgnoreIfNotPresent)
                ) && 
                (
                    this.AnchorIgnoreIfNotPresentMetadata == other.AnchorIgnoreIfNotPresentMetadata ||
                    this.AnchorIgnoreIfNotPresentMetadata != null &&
                    this.AnchorIgnoreIfNotPresentMetadata.Equals(other.AnchorIgnoreIfNotPresentMetadata)
                ) && 
                (
                    this.AnchorMatchWholeWord == other.AnchorMatchWholeWord ||
                    this.AnchorMatchWholeWord != null &&
                    this.AnchorMatchWholeWord.Equals(other.AnchorMatchWholeWord)
                ) && 
                (
                    this.AnchorMatchWholeWordMetadata == other.AnchorMatchWholeWordMetadata ||
                    this.AnchorMatchWholeWordMetadata != null &&
                    this.AnchorMatchWholeWordMetadata.Equals(other.AnchorMatchWholeWordMetadata)
                ) && 
                (
                    this.AnchorString == other.AnchorString ||
                    this.AnchorString != null &&
                    this.AnchorString.Equals(other.AnchorString)
                ) && 
                (
                    this.AnchorStringMetadata == other.AnchorStringMetadata ||
                    this.AnchorStringMetadata != null &&
                    this.AnchorStringMetadata.Equals(other.AnchorStringMetadata)
                ) && 
                (
                    this.AnchorTabProcessorVersion == other.AnchorTabProcessorVersion ||
                    this.AnchorTabProcessorVersion != null &&
                    this.AnchorTabProcessorVersion.Equals(other.AnchorTabProcessorVersion)
                ) && 
                (
                    this.AnchorTabProcessorVersionMetadata == other.AnchorTabProcessorVersionMetadata ||
                    this.AnchorTabProcessorVersionMetadata != null &&
                    this.AnchorTabProcessorVersionMetadata.Equals(other.AnchorTabProcessorVersionMetadata)
                ) && 
                (
                    this.AnchorUnits == other.AnchorUnits ||
                    this.AnchorUnits != null &&
                    this.AnchorUnits.Equals(other.AnchorUnits)
                ) && 
                (
                    this.AnchorUnitsMetadata == other.AnchorUnitsMetadata ||
                    this.AnchorUnitsMetadata != null &&
                    this.AnchorUnitsMetadata.Equals(other.AnchorUnitsMetadata)
                ) && 
                (
                    this.AnchorXOffset == other.AnchorXOffset ||
                    this.AnchorXOffset != null &&
                    this.AnchorXOffset.Equals(other.AnchorXOffset)
                ) && 
                (
                    this.AnchorXOffsetMetadata == other.AnchorXOffsetMetadata ||
                    this.AnchorXOffsetMetadata != null &&
                    this.AnchorXOffsetMetadata.Equals(other.AnchorXOffsetMetadata)
                ) && 
                (
                    this.AnchorYOffset == other.AnchorYOffset ||
                    this.AnchorYOffset != null &&
                    this.AnchorYOffset.Equals(other.AnchorYOffset)
                ) && 
                (
                    this.AnchorYOffsetMetadata == other.AnchorYOffsetMetadata ||
                    this.AnchorYOffsetMetadata != null &&
                    this.AnchorYOffsetMetadata.Equals(other.AnchorYOffsetMetadata)
                ) && 
                (
                    this.Bold == other.Bold ||
                    this.Bold != null &&
                    this.Bold.Equals(other.Bold)
                ) && 
                (
                    this.BoldMetadata == other.BoldMetadata ||
                    this.BoldMetadata != null &&
                    this.BoldMetadata.Equals(other.BoldMetadata)
                ) && 
                (
                    this.Caption == other.Caption ||
                    this.Caption != null &&
                    this.Caption.Equals(other.Caption)
                ) && 
                (
                    this.CaptionMetadata == other.CaptionMetadata ||
                    this.CaptionMetadata != null &&
                    this.CaptionMetadata.Equals(other.CaptionMetadata)
                ) && 
                (
                    this.ConcealValueOnDocument == other.ConcealValueOnDocument ||
                    this.ConcealValueOnDocument != null &&
                    this.ConcealValueOnDocument.Equals(other.ConcealValueOnDocument)
                ) && 
                (
                    this.ConcealValueOnDocumentMetadata == other.ConcealValueOnDocumentMetadata ||
                    this.ConcealValueOnDocumentMetadata != null &&
                    this.ConcealValueOnDocumentMetadata.Equals(other.ConcealValueOnDocumentMetadata)
                ) && 
                (
                    this.ConditionalParentLabel == other.ConditionalParentLabel ||
                    this.ConditionalParentLabel != null &&
                    this.ConditionalParentLabel.Equals(other.ConditionalParentLabel)
                ) && 
                (
                    this.ConditionalParentLabelMetadata == other.ConditionalParentLabelMetadata ||
                    this.ConditionalParentLabelMetadata != null &&
                    this.ConditionalParentLabelMetadata.Equals(other.ConditionalParentLabelMetadata)
                ) && 
                (
                    this.ConditionalParentValue == other.ConditionalParentValue ||
                    this.ConditionalParentValue != null &&
                    this.ConditionalParentValue.Equals(other.ConditionalParentValue)
                ) && 
                (
                    this.ConditionalParentValueMetadata == other.ConditionalParentValueMetadata ||
                    this.ConditionalParentValueMetadata != null &&
                    this.ConditionalParentValueMetadata.Equals(other.ConditionalParentValueMetadata)
                ) && 
                (
                    this.ConnectedObjectDetails == other.ConnectedObjectDetails ||
                    this.ConnectedObjectDetails != null &&
                    this.ConnectedObjectDetails.Equals(other.ConnectedObjectDetails)
                ) && 
                (
                    this.CustomTabId == other.CustomTabId ||
                    this.CustomTabId != null &&
                    this.CustomTabId.Equals(other.CustomTabId)
                ) && 
                (
                    this.CustomTabIdMetadata == other.CustomTabIdMetadata ||
                    this.CustomTabIdMetadata != null &&
                    this.CustomTabIdMetadata.Equals(other.CustomTabIdMetadata)
                ) && 
                (
                    this.DisableAutoSize == other.DisableAutoSize ||
                    this.DisableAutoSize != null &&
                    this.DisableAutoSize.Equals(other.DisableAutoSize)
                ) && 
                (
                    this.DisableAutoSizeMetadata == other.DisableAutoSizeMetadata ||
                    this.DisableAutoSizeMetadata != null &&
                    this.DisableAutoSizeMetadata.Equals(other.DisableAutoSizeMetadata)
                ) && 
                (
                    this.DocumentId == other.DocumentId ||
                    this.DocumentId != null &&
                    this.DocumentId.Equals(other.DocumentId)
                ) && 
                (
                    this.DocumentIdMetadata == other.DocumentIdMetadata ||
                    this.DocumentIdMetadata != null &&
                    this.DocumentIdMetadata.Equals(other.DocumentIdMetadata)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.Font == other.Font ||
                    this.Font != null &&
                    this.Font.Equals(other.Font)
                ) && 
                (
                    this.FontColor == other.FontColor ||
                    this.FontColor != null &&
                    this.FontColor.Equals(other.FontColor)
                ) && 
                (
                    this.FontColorMetadata == other.FontColorMetadata ||
                    this.FontColorMetadata != null &&
                    this.FontColorMetadata.Equals(other.FontColorMetadata)
                ) && 
                (
                    this.FontMetadata == other.FontMetadata ||
                    this.FontMetadata != null &&
                    this.FontMetadata.Equals(other.FontMetadata)
                ) && 
                (
                    this.FontSize == other.FontSize ||
                    this.FontSize != null &&
                    this.FontSize.Equals(other.FontSize)
                ) && 
                (
                    this.FontSizeMetadata == other.FontSizeMetadata ||
                    this.FontSizeMetadata != null &&
                    this.FontSizeMetadata.Equals(other.FontSizeMetadata)
                ) && 
                (
                    this.FormOrder == other.FormOrder ||
                    this.FormOrder != null &&
                    this.FormOrder.Equals(other.FormOrder)
                ) && 
                (
                    this.FormOrderMetadata == other.FormOrderMetadata ||
                    this.FormOrderMetadata != null &&
                    this.FormOrderMetadata.Equals(other.FormOrderMetadata)
                ) && 
                (
                    this.FormPageLabel == other.FormPageLabel ||
                    this.FormPageLabel != null &&
                    this.FormPageLabel.Equals(other.FormPageLabel)
                ) && 
                (
                    this.FormPageLabelMetadata == other.FormPageLabelMetadata ||
                    this.FormPageLabelMetadata != null &&
                    this.FormPageLabelMetadata.Equals(other.FormPageLabelMetadata)
                ) && 
                (
                    this.FormPageNumber == other.FormPageNumber ||
                    this.FormPageNumber != null &&
                    this.FormPageNumber.Equals(other.FormPageNumber)
                ) && 
                (
                    this.FormPageNumberMetadata == other.FormPageNumberMetadata ||
                    this.FormPageNumberMetadata != null &&
                    this.FormPageNumberMetadata.Equals(other.FormPageNumberMetadata)
                ) && 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                ) && 
                (
                    this.HeightMetadata == other.HeightMetadata ||
                    this.HeightMetadata != null &&
                    this.HeightMetadata.Equals(other.HeightMetadata)
                ) && 
                (
                    this.Italic == other.Italic ||
                    this.Italic != null &&
                    this.Italic.Equals(other.Italic)
                ) && 
                (
                    this.ItalicMetadata == other.ItalicMetadata ||
                    this.ItalicMetadata != null &&
                    this.ItalicMetadata.Equals(other.ItalicMetadata)
                ) && 
                (
                    this.LocalePolicy == other.LocalePolicy ||
                    this.LocalePolicy != null &&
                    this.LocalePolicy.Equals(other.LocalePolicy)
                ) && 
                (
                    this.Locked == other.Locked ||
                    this.Locked != null &&
                    this.Locked.Equals(other.Locked)
                ) && 
                (
                    this.LockedMetadata == other.LockedMetadata ||
                    this.LockedMetadata != null &&
                    this.LockedMetadata.Equals(other.LockedMetadata)
                ) && 
                (
                    this.MaxLength == other.MaxLength ||
                    this.MaxLength != null &&
                    this.MaxLength.Equals(other.MaxLength)
                ) && 
                (
                    this.MaxLengthMetadata == other.MaxLengthMetadata ||
                    this.MaxLengthMetadata != null &&
                    this.MaxLengthMetadata.Equals(other.MaxLengthMetadata)
                ) && 
                (
                    this.MergeField == other.MergeField ||
                    this.MergeField != null &&
                    this.MergeField.Equals(other.MergeField)
                ) && 
                (
                    this.MergeFieldXml == other.MergeFieldXml ||
                    this.MergeFieldXml != null &&
                    this.MergeFieldXml.Equals(other.MergeFieldXml)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NameMetadata == other.NameMetadata ||
                    this.NameMetadata != null &&
                    this.NameMetadata.Equals(other.NameMetadata)
                ) && 
                (
                    this.OriginalValue == other.OriginalValue ||
                    this.OriginalValue != null &&
                    this.OriginalValue.Equals(other.OriginalValue)
                ) && 
                (
                    this.OriginalValueMetadata == other.OriginalValueMetadata ||
                    this.OriginalValueMetadata != null &&
                    this.OriginalValueMetadata.Equals(other.OriginalValueMetadata)
                ) && 
                (
                    this.PageNumber == other.PageNumber ||
                    this.PageNumber != null &&
                    this.PageNumber.Equals(other.PageNumber)
                ) && 
                (
                    this.PageNumberMetadata == other.PageNumberMetadata ||
                    this.PageNumberMetadata != null &&
                    this.PageNumberMetadata.Equals(other.PageNumberMetadata)
                ) && 
                (
                    this.RecipientId == other.RecipientId ||
                    this.RecipientId != null &&
                    this.RecipientId.Equals(other.RecipientId)
                ) && 
                (
                    this.RecipientIdGuid == other.RecipientIdGuid ||
                    this.RecipientIdGuid != null &&
                    this.RecipientIdGuid.Equals(other.RecipientIdGuid)
                ) && 
                (
                    this.RecipientIdGuidMetadata == other.RecipientIdGuidMetadata ||
                    this.RecipientIdGuidMetadata != null &&
                    this.RecipientIdGuidMetadata.Equals(other.RecipientIdGuidMetadata)
                ) && 
                (
                    this.RecipientIdMetadata == other.RecipientIdMetadata ||
                    this.RecipientIdMetadata != null &&
                    this.RecipientIdMetadata.Equals(other.RecipientIdMetadata)
                ) && 
                (
                    this.RequireAll == other.RequireAll ||
                    this.RequireAll != null &&
                    this.RequireAll.Equals(other.RequireAll)
                ) && 
                (
                    this.RequireAllMetadata == other.RequireAllMetadata ||
                    this.RequireAllMetadata != null &&
                    this.RequireAllMetadata.Equals(other.RequireAllMetadata)
                ) && 
                (
                    this.Required == other.Required ||
                    this.Required != null &&
                    this.Required.Equals(other.Required)
                ) && 
                (
                    this.RequiredMetadata == other.RequiredMetadata ||
                    this.RequiredMetadata != null &&
                    this.RequiredMetadata.Equals(other.RequiredMetadata)
                ) && 
                (
                    this.RequireInitialOnSharedChange == other.RequireInitialOnSharedChange ||
                    this.RequireInitialOnSharedChange != null &&
                    this.RequireInitialOnSharedChange.Equals(other.RequireInitialOnSharedChange)
                ) && 
                (
                    this.RequireInitialOnSharedChangeMetadata == other.RequireInitialOnSharedChangeMetadata ||
                    this.RequireInitialOnSharedChangeMetadata != null &&
                    this.RequireInitialOnSharedChangeMetadata.Equals(other.RequireInitialOnSharedChangeMetadata)
                ) && 
                (
                    this.SenderRequired == other.SenderRequired ||
                    this.SenderRequired != null &&
                    this.SenderRequired.Equals(other.SenderRequired)
                ) && 
                (
                    this.SenderRequiredMetadata == other.SenderRequiredMetadata ||
                    this.SenderRequiredMetadata != null &&
                    this.SenderRequiredMetadata.Equals(other.SenderRequiredMetadata)
                ) && 
                (
                    this.Shared == other.Shared ||
                    this.Shared != null &&
                    this.Shared.Equals(other.Shared)
                ) && 
                (
                    this.SharedMetadata == other.SharedMetadata ||
                    this.SharedMetadata != null &&
                    this.SharedMetadata.Equals(other.SharedMetadata)
                ) && 
                (
                    this.ShareToRecipients == other.ShareToRecipients ||
                    this.ShareToRecipients != null &&
                    this.ShareToRecipients.Equals(other.ShareToRecipients)
                ) && 
                (
                    this.ShareToRecipientsMetadata == other.ShareToRecipientsMetadata ||
                    this.ShareToRecipientsMetadata != null &&
                    this.ShareToRecipientsMetadata.Equals(other.ShareToRecipientsMetadata)
                ) && 
                (
                    this.SmartContractInformation == other.SmartContractInformation ||
                    this.SmartContractInformation != null &&
                    this.SmartContractInformation.Equals(other.SmartContractInformation)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusMetadata == other.StatusMetadata ||
                    this.StatusMetadata != null &&
                    this.StatusMetadata.Equals(other.StatusMetadata)
                ) && 
                (
                    this.TabFullyQualifiedPath == other.TabFullyQualifiedPath ||
                    this.TabFullyQualifiedPath != null &&
                    this.TabFullyQualifiedPath.Equals(other.TabFullyQualifiedPath)
                ) && 
                (
                    this.TabGroupLabels == other.TabGroupLabels ||
                    this.TabGroupLabels != null &&
                    this.TabGroupLabels.SequenceEqual(other.TabGroupLabels)
                ) && 
                (
                    this.TabGroupLabelsMetadata == other.TabGroupLabelsMetadata ||
                    this.TabGroupLabelsMetadata != null &&
                    this.TabGroupLabelsMetadata.Equals(other.TabGroupLabelsMetadata)
                ) && 
                (
                    this.TabId == other.TabId ||
                    this.TabId != null &&
                    this.TabId.Equals(other.TabId)
                ) && 
                (
                    this.TabIdMetadata == other.TabIdMetadata ||
                    this.TabIdMetadata != null &&
                    this.TabIdMetadata.Equals(other.TabIdMetadata)
                ) && 
                (
                    this.TabLabel == other.TabLabel ||
                    this.TabLabel != null &&
                    this.TabLabel.Equals(other.TabLabel)
                ) && 
                (
                    this.TabLabelMetadata == other.TabLabelMetadata ||
                    this.TabLabelMetadata != null &&
                    this.TabLabelMetadata.Equals(other.TabLabelMetadata)
                ) && 
                (
                    this.TabOrder == other.TabOrder ||
                    this.TabOrder != null &&
                    this.TabOrder.Equals(other.TabOrder)
                ) && 
                (
                    this.TabOrderMetadata == other.TabOrderMetadata ||
                    this.TabOrderMetadata != null &&
                    this.TabOrderMetadata.Equals(other.TabOrderMetadata)
                ) && 
                (
                    this.TabType == other.TabType ||
                    this.TabType != null &&
                    this.TabType.Equals(other.TabType)
                ) && 
                (
                    this.TabTypeMetadata == other.TabTypeMetadata ||
                    this.TabTypeMetadata != null &&
                    this.TabTypeMetadata.Equals(other.TabTypeMetadata)
                ) && 
                (
                    this.TemplateLocked == other.TemplateLocked ||
                    this.TemplateLocked != null &&
                    this.TemplateLocked.Equals(other.TemplateLocked)
                ) && 
                (
                    this.TemplateLockedMetadata == other.TemplateLockedMetadata ||
                    this.TemplateLockedMetadata != null &&
                    this.TemplateLockedMetadata.Equals(other.TemplateLockedMetadata)
                ) && 
                (
                    this.TemplateRequired == other.TemplateRequired ||
                    this.TemplateRequired != null &&
                    this.TemplateRequired.Equals(other.TemplateRequired)
                ) && 
                (
                    this.TemplateRequiredMetadata == other.TemplateRequiredMetadata ||
                    this.TemplateRequiredMetadata != null &&
                    this.TemplateRequiredMetadata.Equals(other.TemplateRequiredMetadata)
                ) && 
                (
                    this.Tooltip == other.Tooltip ||
                    this.Tooltip != null &&
                    this.Tooltip.Equals(other.Tooltip)
                ) && 
                (
                    this.ToolTipMetadata == other.ToolTipMetadata ||
                    this.ToolTipMetadata != null &&
                    this.ToolTipMetadata.Equals(other.ToolTipMetadata)
                ) && 
                (
                    this.Underline == other.Underline ||
                    this.Underline != null &&
                    this.Underline.Equals(other.Underline)
                ) && 
                (
                    this.UnderlineMetadata == other.UnderlineMetadata ||
                    this.UnderlineMetadata != null &&
                    this.UnderlineMetadata.Equals(other.UnderlineMetadata)
                ) && 
                (
                    this.ValidationMessage == other.ValidationMessage ||
                    this.ValidationMessage != null &&
                    this.ValidationMessage.Equals(other.ValidationMessage)
                ) && 
                (
                    this.ValidationMessageMetadata == other.ValidationMessageMetadata ||
                    this.ValidationMessageMetadata != null &&
                    this.ValidationMessageMetadata.Equals(other.ValidationMessageMetadata)
                ) && 
                (
                    this.ValidationPattern == other.ValidationPattern ||
                    this.ValidationPattern != null &&
                    this.ValidationPattern.Equals(other.ValidationPattern)
                ) && 
                (
                    this.ValidationPatternMetadata == other.ValidationPatternMetadata ||
                    this.ValidationPatternMetadata != null &&
                    this.ValidationPatternMetadata.Equals(other.ValidationPatternMetadata)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.ValueMetadata == other.ValueMetadata ||
                    this.ValueMetadata != null &&
                    this.ValueMetadata.Equals(other.ValueMetadata)
                ) && 
                (
                    this.WarningDetails == other.WarningDetails ||
                    this.WarningDetails != null &&
                    this.WarningDetails.Equals(other.WarningDetails)
                ) && 
                (
                    this.Width == other.Width ||
                    this.Width != null &&
                    this.Width.Equals(other.Width)
                ) && 
                (
                    this.WidthMetadata == other.WidthMetadata ||
                    this.WidthMetadata != null &&
                    this.WidthMetadata.Equals(other.WidthMetadata)
                ) && 
                (
                    this.XPosition == other.XPosition ||
                    this.XPosition != null &&
                    this.XPosition.Equals(other.XPosition)
                ) && 
                (
                    this.XPositionMetadata == other.XPositionMetadata ||
                    this.XPositionMetadata != null &&
                    this.XPositionMetadata.Equals(other.XPositionMetadata)
                ) && 
                (
                    this.YPosition == other.YPosition ||
                    this.YPosition != null &&
                    this.YPosition.Equals(other.YPosition)
                ) && 
                (
                    this.YPositionMetadata == other.YPositionMetadata ||
                    this.YPositionMetadata != null &&
                    this.YPositionMetadata.Equals(other.YPositionMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AnchorAllowWhiteSpaceInCharacters != null)
                    hash = hash * 59 + this.AnchorAllowWhiteSpaceInCharacters.GetHashCode();
                if (this.AnchorAllowWhiteSpaceInCharactersMetadata != null)
                    hash = hash * 59 + this.AnchorAllowWhiteSpaceInCharactersMetadata.GetHashCode();
                if (this.AnchorCaseSensitive != null)
                    hash = hash * 59 + this.AnchorCaseSensitive.GetHashCode();
                if (this.AnchorCaseSensitiveMetadata != null)
                    hash = hash * 59 + this.AnchorCaseSensitiveMetadata.GetHashCode();
                if (this.AnchorHorizontalAlignment != null)
                    hash = hash * 59 + this.AnchorHorizontalAlignment.GetHashCode();
                if (this.AnchorHorizontalAlignmentMetadata != null)
                    hash = hash * 59 + this.AnchorHorizontalAlignmentMetadata.GetHashCode();
                if (this.AnchorIgnoreIfNotPresent != null)
                    hash = hash * 59 + this.AnchorIgnoreIfNotPresent.GetHashCode();
                if (this.AnchorIgnoreIfNotPresentMetadata != null)
                    hash = hash * 59 + this.AnchorIgnoreIfNotPresentMetadata.GetHashCode();
                if (this.AnchorMatchWholeWord != null)
                    hash = hash * 59 + this.AnchorMatchWholeWord.GetHashCode();
                if (this.AnchorMatchWholeWordMetadata != null)
                    hash = hash * 59 + this.AnchorMatchWholeWordMetadata.GetHashCode();
                if (this.AnchorString != null)
                    hash = hash * 59 + this.AnchorString.GetHashCode();
                if (this.AnchorStringMetadata != null)
                    hash = hash * 59 + this.AnchorStringMetadata.GetHashCode();
                if (this.AnchorTabProcessorVersion != null)
                    hash = hash * 59 + this.AnchorTabProcessorVersion.GetHashCode();
                if (this.AnchorTabProcessorVersionMetadata != null)
                    hash = hash * 59 + this.AnchorTabProcessorVersionMetadata.GetHashCode();
                if (this.AnchorUnits != null)
                    hash = hash * 59 + this.AnchorUnits.GetHashCode();
                if (this.AnchorUnitsMetadata != null)
                    hash = hash * 59 + this.AnchorUnitsMetadata.GetHashCode();
                if (this.AnchorXOffset != null)
                    hash = hash * 59 + this.AnchorXOffset.GetHashCode();
                if (this.AnchorXOffsetMetadata != null)
                    hash = hash * 59 + this.AnchorXOffsetMetadata.GetHashCode();
                if (this.AnchorYOffset != null)
                    hash = hash * 59 + this.AnchorYOffset.GetHashCode();
                if (this.AnchorYOffsetMetadata != null)
                    hash = hash * 59 + this.AnchorYOffsetMetadata.GetHashCode();
                if (this.Bold != null)
                    hash = hash * 59 + this.Bold.GetHashCode();
                if (this.BoldMetadata != null)
                    hash = hash * 59 + this.BoldMetadata.GetHashCode();
                if (this.Caption != null)
                    hash = hash * 59 + this.Caption.GetHashCode();
                if (this.CaptionMetadata != null)
                    hash = hash * 59 + this.CaptionMetadata.GetHashCode();
                if (this.ConcealValueOnDocument != null)
                    hash = hash * 59 + this.ConcealValueOnDocument.GetHashCode();
                if (this.ConcealValueOnDocumentMetadata != null)
                    hash = hash * 59 + this.ConcealValueOnDocumentMetadata.GetHashCode();
                if (this.ConditionalParentLabel != null)
                    hash = hash * 59 + this.ConditionalParentLabel.GetHashCode();
                if (this.ConditionalParentLabelMetadata != null)
                    hash = hash * 59 + this.ConditionalParentLabelMetadata.GetHashCode();
                if (this.ConditionalParentValue != null)
                    hash = hash * 59 + this.ConditionalParentValue.GetHashCode();
                if (this.ConditionalParentValueMetadata != null)
                    hash = hash * 59 + this.ConditionalParentValueMetadata.GetHashCode();
                if (this.ConnectedObjectDetails != null)
                    hash = hash * 59 + this.ConnectedObjectDetails.GetHashCode();
                if (this.CustomTabId != null)
                    hash = hash * 59 + this.CustomTabId.GetHashCode();
                if (this.CustomTabIdMetadata != null)
                    hash = hash * 59 + this.CustomTabIdMetadata.GetHashCode();
                if (this.DisableAutoSize != null)
                    hash = hash * 59 + this.DisableAutoSize.GetHashCode();
                if (this.DisableAutoSizeMetadata != null)
                    hash = hash * 59 + this.DisableAutoSizeMetadata.GetHashCode();
                if (this.DocumentId != null)
                    hash = hash * 59 + this.DocumentId.GetHashCode();
                if (this.DocumentIdMetadata != null)
                    hash = hash * 59 + this.DocumentIdMetadata.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.Font != null)
                    hash = hash * 59 + this.Font.GetHashCode();
                if (this.FontColor != null)
                    hash = hash * 59 + this.FontColor.GetHashCode();
                if (this.FontColorMetadata != null)
                    hash = hash * 59 + this.FontColorMetadata.GetHashCode();
                if (this.FontMetadata != null)
                    hash = hash * 59 + this.FontMetadata.GetHashCode();
                if (this.FontSize != null)
                    hash = hash * 59 + this.FontSize.GetHashCode();
                if (this.FontSizeMetadata != null)
                    hash = hash * 59 + this.FontSizeMetadata.GetHashCode();
                if (this.FormOrder != null)
                    hash = hash * 59 + this.FormOrder.GetHashCode();
                if (this.FormOrderMetadata != null)
                    hash = hash * 59 + this.FormOrderMetadata.GetHashCode();
                if (this.FormPageLabel != null)
                    hash = hash * 59 + this.FormPageLabel.GetHashCode();
                if (this.FormPageLabelMetadata != null)
                    hash = hash * 59 + this.FormPageLabelMetadata.GetHashCode();
                if (this.FormPageNumber != null)
                    hash = hash * 59 + this.FormPageNumber.GetHashCode();
                if (this.FormPageNumberMetadata != null)
                    hash = hash * 59 + this.FormPageNumberMetadata.GetHashCode();
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                if (this.HeightMetadata != null)
                    hash = hash * 59 + this.HeightMetadata.GetHashCode();
                if (this.Italic != null)
                    hash = hash * 59 + this.Italic.GetHashCode();
                if (this.ItalicMetadata != null)
                    hash = hash * 59 + this.ItalicMetadata.GetHashCode();
                if (this.LocalePolicy != null)
                    hash = hash * 59 + this.LocalePolicy.GetHashCode();
                if (this.Locked != null)
                    hash = hash * 59 + this.Locked.GetHashCode();
                if (this.LockedMetadata != null)
                    hash = hash * 59 + this.LockedMetadata.GetHashCode();
                if (this.MaxLength != null)
                    hash = hash * 59 + this.MaxLength.GetHashCode();
                if (this.MaxLengthMetadata != null)
                    hash = hash * 59 + this.MaxLengthMetadata.GetHashCode();
                if (this.MergeField != null)
                    hash = hash * 59 + this.MergeField.GetHashCode();
                if (this.MergeFieldXml != null)
                    hash = hash * 59 + this.MergeFieldXml.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NameMetadata != null)
                    hash = hash * 59 + this.NameMetadata.GetHashCode();
                if (this.OriginalValue != null)
                    hash = hash * 59 + this.OriginalValue.GetHashCode();
                if (this.OriginalValueMetadata != null)
                    hash = hash * 59 + this.OriginalValueMetadata.GetHashCode();
                if (this.PageNumber != null)
                    hash = hash * 59 + this.PageNumber.GetHashCode();
                if (this.PageNumberMetadata != null)
                    hash = hash * 59 + this.PageNumberMetadata.GetHashCode();
                if (this.RecipientId != null)
                    hash = hash * 59 + this.RecipientId.GetHashCode();
                if (this.RecipientIdGuid != null)
                    hash = hash * 59 + this.RecipientIdGuid.GetHashCode();
                if (this.RecipientIdGuidMetadata != null)
                    hash = hash * 59 + this.RecipientIdGuidMetadata.GetHashCode();
                if (this.RecipientIdMetadata != null)
                    hash = hash * 59 + this.RecipientIdMetadata.GetHashCode();
                if (this.RequireAll != null)
                    hash = hash * 59 + this.RequireAll.GetHashCode();
                if (this.RequireAllMetadata != null)
                    hash = hash * 59 + this.RequireAllMetadata.GetHashCode();
                if (this.Required != null)
                    hash = hash * 59 + this.Required.GetHashCode();
                if (this.RequiredMetadata != null)
                    hash = hash * 59 + this.RequiredMetadata.GetHashCode();
                if (this.RequireInitialOnSharedChange != null)
                    hash = hash * 59 + this.RequireInitialOnSharedChange.GetHashCode();
                if (this.RequireInitialOnSharedChangeMetadata != null)
                    hash = hash * 59 + this.RequireInitialOnSharedChangeMetadata.GetHashCode();
                if (this.SenderRequired != null)
                    hash = hash * 59 + this.SenderRequired.GetHashCode();
                if (this.SenderRequiredMetadata != null)
                    hash = hash * 59 + this.SenderRequiredMetadata.GetHashCode();
                if (this.Shared != null)
                    hash = hash * 59 + this.Shared.GetHashCode();
                if (this.SharedMetadata != null)
                    hash = hash * 59 + this.SharedMetadata.GetHashCode();
                if (this.ShareToRecipients != null)
                    hash = hash * 59 + this.ShareToRecipients.GetHashCode();
                if (this.ShareToRecipientsMetadata != null)
                    hash = hash * 59 + this.ShareToRecipientsMetadata.GetHashCode();
                if (this.SmartContractInformation != null)
                    hash = hash * 59 + this.SmartContractInformation.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusMetadata != null)
                    hash = hash * 59 + this.StatusMetadata.GetHashCode();
                if (this.TabFullyQualifiedPath != null)
                    hash = hash * 59 + this.TabFullyQualifiedPath.GetHashCode();
                if (this.TabGroupLabels != null)
                    hash = hash * 59 + this.TabGroupLabels.GetHashCode();
                if (this.TabGroupLabelsMetadata != null)
                    hash = hash * 59 + this.TabGroupLabelsMetadata.GetHashCode();
                if (this.TabId != null)
                    hash = hash * 59 + this.TabId.GetHashCode();
                if (this.TabIdMetadata != null)
                    hash = hash * 59 + this.TabIdMetadata.GetHashCode();
                if (this.TabLabel != null)
                    hash = hash * 59 + this.TabLabel.GetHashCode();
                if (this.TabLabelMetadata != null)
                    hash = hash * 59 + this.TabLabelMetadata.GetHashCode();
                if (this.TabOrder != null)
                    hash = hash * 59 + this.TabOrder.GetHashCode();
                if (this.TabOrderMetadata != null)
                    hash = hash * 59 + this.TabOrderMetadata.GetHashCode();
                if (this.TabType != null)
                    hash = hash * 59 + this.TabType.GetHashCode();
                if (this.TabTypeMetadata != null)
                    hash = hash * 59 + this.TabTypeMetadata.GetHashCode();
                if (this.TemplateLocked != null)
                    hash = hash * 59 + this.TemplateLocked.GetHashCode();
                if (this.TemplateLockedMetadata != null)
                    hash = hash * 59 + this.TemplateLockedMetadata.GetHashCode();
                if (this.TemplateRequired != null)
                    hash = hash * 59 + this.TemplateRequired.GetHashCode();
                if (this.TemplateRequiredMetadata != null)
                    hash = hash * 59 + this.TemplateRequiredMetadata.GetHashCode();
                if (this.Tooltip != null)
                    hash = hash * 59 + this.Tooltip.GetHashCode();
                if (this.ToolTipMetadata != null)
                    hash = hash * 59 + this.ToolTipMetadata.GetHashCode();
                if (this.Underline != null)
                    hash = hash * 59 + this.Underline.GetHashCode();
                if (this.UnderlineMetadata != null)
                    hash = hash * 59 + this.UnderlineMetadata.GetHashCode();
                if (this.ValidationMessage != null)
                    hash = hash * 59 + this.ValidationMessage.GetHashCode();
                if (this.ValidationMessageMetadata != null)
                    hash = hash * 59 + this.ValidationMessageMetadata.GetHashCode();
                if (this.ValidationPattern != null)
                    hash = hash * 59 + this.ValidationPattern.GetHashCode();
                if (this.ValidationPatternMetadata != null)
                    hash = hash * 59 + this.ValidationPatternMetadata.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.ValueMetadata != null)
                    hash = hash * 59 + this.ValueMetadata.GetHashCode();
                if (this.WarningDetails != null)
                    hash = hash * 59 + this.WarningDetails.GetHashCode();
                if (this.Width != null)
                    hash = hash * 59 + this.Width.GetHashCode();
                if (this.WidthMetadata != null)
                    hash = hash * 59 + this.WidthMetadata.GetHashCode();
                if (this.XPosition != null)
                    hash = hash * 59 + this.XPosition.GetHashCode();
                if (this.XPositionMetadata != null)
                    hash = hash * 59 + this.XPositionMetadata.GetHashCode();
                if (this.YPosition != null)
                    hash = hash * 59 + this.YPosition.GetHashCode();
                if (this.YPositionMetadata != null)
                    hash = hash * 59 + this.YPositionMetadata.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
