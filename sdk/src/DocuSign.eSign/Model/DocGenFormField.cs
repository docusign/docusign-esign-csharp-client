/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// DocGenFormField
    /// </summary>
    [DataContract]
    public partial class DocGenFormField :  IEquatable<DocGenFormField>, IValidatableObject
    {
        public DocGenFormField()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocGenFormField" /> class.
        /// </summary>
        /// <param name="ConnectedObjectDetails">ConnectedObjectDetails.</param>
        /// <param name="Description">Description.</param>
        /// <param name="FullyQualifiedPath">FullyQualifiedPath.</param>
        /// <param name="Label">Label.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Options">Options.</param>
        /// <param name="Order">Order.</param>
        /// <param name="PredefinedValidation">PredefinedValidation.</param>
        /// <param name="Required">When set to **true**, the signer is required to fill out this tab.</param>
        /// <param name="RowValues">RowValues.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Validation">Validation.</param>
        /// <param name="Value">Specifies the value of the tab. .</param>
        public DocGenFormField(ConnectedObjectDetails ConnectedObjectDetails = default(ConnectedObjectDetails), string Description = default(string), string FullyQualifiedPath = default(string), string Label = default(string), string Name = default(string), List<DocGenFormFieldOption> Options = default(List<DocGenFormFieldOption>), string Order = default(string), string PredefinedValidation = default(string), string Required = default(string), List<DocGenFormFieldRowValue> RowValues = default(List<DocGenFormFieldRowValue>), string Type = default(string), DocGenFormFieldValidation Validation = default(DocGenFormFieldValidation), string Value = default(string))
        {
            this.ConnectedObjectDetails = ConnectedObjectDetails;
            this.Description = Description;
            this.FullyQualifiedPath = FullyQualifiedPath;
            this.Label = Label;
            this.Name = Name;
            this.Options = Options;
            this.Order = Order;
            this.PredefinedValidation = PredefinedValidation;
            this.Required = Required;
            this.RowValues = RowValues;
            this.Type = Type;
            this.Validation = Validation;
            this.Value = Value;
        }
        
        /// <summary>
        /// Gets or Sets ConnectedObjectDetails
        /// </summary>
        [DataMember(Name="connectedObjectDetails", EmitDefaultValue=false)]
        public ConnectedObjectDetails ConnectedObjectDetails { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets FullyQualifiedPath
        /// </summary>
        [DataMember(Name="fullyQualifiedPath", EmitDefaultValue=false)]
        public string FullyQualifiedPath { get; set; }
        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<DocGenFormFieldOption> Options { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public string Order { get; set; }
        /// <summary>
        /// Gets or Sets PredefinedValidation
        /// </summary>
        [DataMember(Name="predefinedValidation", EmitDefaultValue=false)]
        public string PredefinedValidation { get; set; }
        /// <summary>
        /// When set to **true**, the signer is required to fill out this tab
        /// </summary>
        /// <value>When set to **true**, the signer is required to fill out this tab</value>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public string Required { get; set; }
        /// <summary>
        /// Gets or Sets RowValues
        /// </summary>
        [DataMember(Name="rowValues", EmitDefaultValue=false)]
        public List<DocGenFormFieldRowValue> RowValues { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets Validation
        /// </summary>
        [DataMember(Name="validation", EmitDefaultValue=false)]
        public DocGenFormFieldValidation Validation { get; set; }
        /// <summary>
        /// Specifies the value of the tab. 
        /// </summary>
        /// <value>Specifies the value of the tab. </value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocGenFormField {\n");
            sb.Append("  ConnectedObjectDetails: ").Append(ConnectedObjectDetails).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FullyQualifiedPath: ").Append(FullyQualifiedPath).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  PredefinedValidation: ").Append(PredefinedValidation).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  RowValues: ").Append(RowValues).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Validation: ").Append(Validation).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DocGenFormField);
        }

        /// <summary>
        /// Returns true if DocGenFormField instances are equal
        /// </summary>
        /// <param name="other">Instance of DocGenFormField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocGenFormField other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ConnectedObjectDetails == other.ConnectedObjectDetails ||
                    this.ConnectedObjectDetails != null &&
                    this.ConnectedObjectDetails.Equals(other.ConnectedObjectDetails)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.FullyQualifiedPath == other.FullyQualifiedPath ||
                    this.FullyQualifiedPath != null &&
                    this.FullyQualifiedPath.Equals(other.FullyQualifiedPath)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Options == other.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(other.Options)
                ) && 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.PredefinedValidation == other.PredefinedValidation ||
                    this.PredefinedValidation != null &&
                    this.PredefinedValidation.Equals(other.PredefinedValidation)
                ) && 
                (
                    this.Required == other.Required ||
                    this.Required != null &&
                    this.Required.Equals(other.Required)
                ) && 
                (
                    this.RowValues == other.RowValues ||
                    this.RowValues != null &&
                    this.RowValues.SequenceEqual(other.RowValues)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Validation == other.Validation ||
                    this.Validation != null &&
                    this.Validation.Equals(other.Validation)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ConnectedObjectDetails != null)
                    hash = hash * 59 + this.ConnectedObjectDetails.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.FullyQualifiedPath != null)
                    hash = hash * 59 + this.FullyQualifiedPath.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Options != null)
                    hash = hash * 59 + this.Options.GetHashCode();
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.PredefinedValidation != null)
                    hash = hash * 59 + this.PredefinedValidation.GetHashCode();
                if (this.Required != null)
                    hash = hash * 59 + this.Required.GetHashCode();
                if (this.RowValues != null)
                    hash = hash * 59 + this.RowValues.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Validation != null)
                    hash = hash * 59 + this.Validation.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
