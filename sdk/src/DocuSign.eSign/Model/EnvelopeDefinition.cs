/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Envelope object definition.
    /// </summary>
    [DataContract]
    public partial class EnvelopeDefinition :  IEquatable<EnvelopeDefinition>, IValidatableObject
    {
        public EnvelopeDefinition()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeDefinition" /> class.
        /// </summary>
        /// <param name="AccessControlListBase64">AccessControlListBase64.</param>
        /// <param name="Accessibility">Sets the document reading zones for screen reader applications.  This element can only be used if Document Accessibility is enabled for the account.   ###### Note: This information is currently generated from the DocuSign web console by setting the reading zones when creating a template, exporting the reading zone string information, and adding it here..</param>
        /// <param name="AllowComments">AllowComments.</param>
        /// <param name="AllowMarkup">When set to **true**, Document Markup is enabled for envelope. Account must have Document Markup enabled to use this.</param>
        /// <param name="AllowReassign">When set to **true**, the recipient can redirect an envelope to a more appropriate recipient..</param>
        /// <param name="AllowRecipientRecursion">When set to **true**, this enables the Recursive Recipients feature and allows a recipient to appear more than once in the routing order..</param>
        /// <param name="AllowViewHistory">AllowViewHistory.</param>
        /// <param name="AnySigner">AnySigner.</param>
        /// <param name="Asynchronous">When set to **true**, the envelope is queued for processing and the value of the &#x60;status&#x60; property is set to &#39;Processing&#39;. Additionally, get status calls return &#39;Processing&#39; until completed..</param>
        /// <param name="Attachments">Attachments.</param>
        /// <param name="AttachmentsUri">AttachmentsUri.</param>
        /// <param name="AuthoritativeCopy">Specifies the Authoritative copy feature. If set to true the Authoritative copy feature is enabled..</param>
        /// <param name="AuthoritativeCopyDefault">AuthoritativeCopyDefault.</param>
        /// <param name="AutoNavigation">AutoNavigation.</param>
        /// <param name="BrandId">This sets the brand profile format used for the envelope. The value in the string is the brandId associated with the profile. Account branding must be enabled for the account to use this option..</param>
        /// <param name="BrandLock">BrandLock.</param>
        /// <param name="BurnDefaultTabData">BurnDefaultTabData.</param>
        /// <param name="CertificateUri">Retrieves a URI for an endpoint that allows you to easily retrieve certificate information..</param>
        /// <param name="CompletedDateTime">Specifies the date and time this item was completed..</param>
        /// <param name="CompositeTemplates">A complex type that can be added to create envelopes from a combination of DocuSign templates and PDF forms. The basic envelope remains the same, while the Composite Template adds new document and template overlays into the envelope. There can be any number of Composite Template structures in the envelope..</param>
        /// <param name="CopyRecipientData">CopyRecipientData.</param>
        /// <param name="CreatedDateTime">Indicates the date and time the item was created..</param>
        /// <param name="CustomFields">An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters..</param>
        /// <param name="CustomFieldsUri">Contains a URI for an endpoint that you can use to retrieve the custom fields..</param>
        /// <param name="DeclinedDateTime">The date and time the recipient declined the document..</param>
        /// <param name="DeletedDateTime">Specifies the data and time the item was deleted..</param>
        /// <param name="DeliveredDateTime">Reserved: For DocuSign use only..</param>
        /// <param name="DisableResponsiveDocument">DisableResponsiveDocument.</param>
        /// <param name="DocumentBase64">DocumentBase64.</param>
        /// <param name="Documents">Complex element contains the details on the documents in the envelope..</param>
        /// <param name="DocumentsCombinedUri">DocumentsCombinedUri.</param>
        /// <param name="DocumentsUri">Contains a URI for an endpoint that you can use to retrieve the documents..</param>
        /// <param name="EmailBlurb">Optional element. This is the same as the email body. If specified it is included in email body for all envelope recipients. This can be a maximum of 10000 characters.</param>
        /// <param name="EmailSettings">This optional complex element enables the sender to override some envelope email setting information. This can be used to override the Reply To email address and name associated with the envelope, as well as the BCC email addresses to which an envelope is sent. When the &#x60;emailSettings&#x60; information is used for an envelope, it only applies to that envelope.  **Important Note:** The &#x60;emailSettings&#x60; information is not returned in the GET method for envelope status. Use GET /email_settings to return information about the emailSettings..</param>
        /// <param name="EmailSubject">Specifies the subject of the email that is sent to all recipients.  See [ML:Template Email Subject Merge Fields] for information about adding merge field information to the email subject..</param>
        /// <param name="EnableWetSign">When set to **true**, the signer is allowed to print the document and sign it on paper..</param>
        /// <param name="EnforceSignerVisibility">When set to **true**, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.  Your account must have Document Visibility enabled to use this..</param>
        /// <param name="EnvelopeAttachments">EnvelopeAttachments.</param>
        /// <param name="EnvelopeCustomMetadata">EnvelopeCustomMetadata.</param>
        /// <param name="EnvelopeDocuments">EnvelopeDocuments.</param>
        /// <param name="EnvelopeId">The envelope ID of the envelope status that failed to post..</param>
        /// <param name="EnvelopeIdStamping">When set to **true**, Envelope ID Stamping is enabled..</param>
        /// <param name="EnvelopeLocation">EnvelopeLocation.</param>
        /// <param name="EnvelopeMetadata">Metadata about the features that are enabled for the envelope..</param>
        /// <param name="EnvelopeUri">Contains a URI for an endpoint that you can use to retrieve the envelope or envelopes..</param>
        /// <param name="EventNotification">This optional object is used to register a webhook that will receive status changes for this envelope..</param>
        /// <param name="EventNotifications">EventNotifications.</param>
        /// <param name="ExpireAfter">ExpireAfter.</param>
        /// <param name="ExpireDateTime">ExpireDateTime.</param>
        /// <param name="ExpireEnabled">ExpireEnabled.</param>
        /// <param name="ExternalEnvelopeId">ExternalEnvelopeId.</param>
        /// <param name="Folders">Folders.</param>
        /// <param name="HasComments">HasComments.</param>
        /// <param name="HasFormDataChanged">HasFormDataChanged.</param>
        /// <param name="HasWavFile">HasWavFile.</param>
        /// <param name="Holder">Holder.</param>
        /// <param name="InitialSentDateTime">InitialSentDateTime.</param>
        /// <param name="Is21CFRPart11">When set to **true**, indicates that this module is enabled on the account..</param>
        /// <param name="IsDynamicEnvelope">IsDynamicEnvelope.</param>
        /// <param name="IsSignatureProviderEnvelope">IsSignatureProviderEnvelope.</param>
        /// <param name="LastModifiedDateTime">The date and time the item was last modified..</param>
        /// <param name="Location">Location.</param>
        /// <param name="LockInformation">Provides lock information about an envelope that a user has locked..</param>
        /// <param name="MessageLock">When set to **true**, prevents senders from changing the contents of &#x60;emailBlurb&#x60; and &#x60;emailSubject&#x60; properties for the envelope.   Additionally, this prevents users from making changes to the contents of &#x60;emailBlurb&#x60; and &#x60;emailSubject&#x60; properties when correcting envelopes.   However, if the &#x60;messageLock&#x60; node is set to true**** and the &#x60;emailSubject&#x60; property is empty, senders and correctors are able to add a subject to the envelope..</param>
        /// <param name="Notification">An optional complex element that specifies the notification options for the envelope..</param>
        /// <param name="NotificationUri">Contains a URI for an endpoint that you can use to retrieve the notifications..</param>
        /// <param name="Password">Password.</param>
        /// <param name="PowerForm">Information about any PowerForms that are included in the envelope..</param>
        /// <param name="PurgeCompletedDate">PurgeCompletedDate.</param>
        /// <param name="PurgeRequestDate">PurgeRequestDate.</param>
        /// <param name="PurgeState">Initiates a purge request. Valid values are: * documents_queued: Places envelope documents in the purge queue. * documents_and_metadata_queued: Places envelope documents and metadata in the purge queue. .</param>
        /// <param name="Recipients">An array of powerform recipients..</param>
        /// <param name="RecipientsLock">When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope..</param>
        /// <param name="RecipientsUri">Contains a URI for an endpoint that you can use to retrieve the recipients..</param>
        /// <param name="RecipientViewRequest">RecipientViewRequest.</param>
        /// <param name="Sender">Information about the sender of the envelope..</param>
        /// <param name="SentDateTime">The date and time the envelope was sent..</param>
        /// <param name="SignerCanSignOnMobile">SignerCanSignOnMobile.</param>
        /// <param name="SigningLocation">Specifies the physical location where the signing takes place. It can have two enumeration values; InPerson and Online. The default value is Online..</param>
        /// <param name="Status">Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later..</param>
        /// <param name="StatusChangedDateTime">The data and time the status changed..</param>
        /// <param name="StatusDateTime">StatusDateTime.</param>
        /// <param name="TemplateId">The unique identifier of the template. If this is not provided, DocuSign will generate a value. .</param>
        /// <param name="TemplateRoles">Specifies the template recipients. Each roleName in the template must have a recipient assigned to it. This is made up elements:  * email - The recipient&#39;s email address. * name - The recipient&#39;s name. * roleName - The template roleName associated with the recipient. * clientUserId - Optional, this sets if the signer is This specifies if the recipient is embedded or remote. If the clientUserId is not null then the recipient is embedded. Note that if a ClientUserId is used and the account settings SignerMustHaveAccount or SignerMustLoginToSign are true, an error is generated on sending. * defaultRecipient - Optional, When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient. * routingOrder - This specifies the routing order of the recipient in the envelope. * accessCode - This optional element specifies the access code a recipient has to enter to validate the identity. This can be a maximum of 50 characters. * inPersonSignerName - Optional, if the template role is an in person signer, this is the full legal name of the signer. This can be a maximum of 100 characters. * emailNotification - This is an optional complex element that has a role specific emailSubject, emailBody, and language. It follows the same format as the emailNotification node for Recipients. * tabs - This allows the tab values to be specified for matching to tabs in the template. .</param>
        /// <param name="TemplatesUri">Contains a URI for an endpoint which you can use to retrieve the templates..</param>
        /// <param name="TransactionId"> Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used for offline signing to ensure that an envelope is not sent multiple times. The &#x60;transactionId&#x60; property can be used determine an envelope&#39;s status (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned..</param>
        /// <param name="UseDisclosure">When set to **true**, the disclosure is shown to recipients in accordance with the account&#39;s Electronic Record and Signature Disclosure frequency setting. When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients.   If the &#x60;useDisclosure&#x60; property is not set, then the account&#39;s normal disclosure setting is used and the value of the &#x60;useDisclosure&#x60; property is not returned in responses when getting envelope information..</param>
        /// <param name="USigState">USigState.</param>
        /// <param name="VoidedDateTime">The date and time the envelope or template was voided..</param>
        /// <param name="VoidedReason">The reason the envelope or template was voided..</param>
        /// <param name="Workflow">Describes the workflow for this envelope..</param>
        public EnvelopeDefinition(string AccessControlListBase64 = default(string), string Accessibility = default(string), string AllowComments = default(string), string AllowMarkup = default(string), string AllowReassign = default(string), string AllowRecipientRecursion = default(string), string AllowViewHistory = default(string), string AnySigner = default(string), string Asynchronous = default(string), List<Attachment> Attachments = default(List<Attachment>), string AttachmentsUri = default(string), string AuthoritativeCopy = default(string), string AuthoritativeCopyDefault = default(string), string AutoNavigation = default(string), string BrandId = default(string), string BrandLock = default(string), string BurnDefaultTabData = default(string), string CertificateUri = default(string), string CompletedDateTime = default(string), List<CompositeTemplate> CompositeTemplates = default(List<CompositeTemplate>), string CopyRecipientData = default(string), string CreatedDateTime = default(string), CustomFields CustomFields = default(CustomFields), string CustomFieldsUri = default(string), string DeclinedDateTime = default(string), string DeletedDateTime = default(string), string DeliveredDateTime = default(string), string DisableResponsiveDocument = default(string), string DocumentBase64 = default(string), List<Document> Documents = default(List<Document>), string DocumentsCombinedUri = default(string), string DocumentsUri = default(string), string EmailBlurb = default(string), EmailSettings EmailSettings = default(EmailSettings), string EmailSubject = default(string), string EnableWetSign = default(string), string EnforceSignerVisibility = default(string), List<Attachment> EnvelopeAttachments = default(List<Attachment>), EnvelopeCustomMetadata EnvelopeCustomMetadata = default(EnvelopeCustomMetadata), List<EnvelopeDocument> EnvelopeDocuments = default(List<EnvelopeDocument>), string EnvelopeId = default(string), string EnvelopeIdStamping = default(string), string EnvelopeLocation = default(string), EnvelopeMetadata EnvelopeMetadata = default(EnvelopeMetadata), string EnvelopeUri = default(string), EventNotification EventNotification = default(EventNotification), List<EventNotification> EventNotifications = default(List<EventNotification>), string ExpireAfter = default(string), string ExpireDateTime = default(string), string ExpireEnabled = default(string), string ExternalEnvelopeId = default(string), List<Folder> Folders = default(List<Folder>), string HasComments = default(string), string HasFormDataChanged = default(string), string HasWavFile = default(string), string Holder = default(string), string InitialSentDateTime = default(string), string Is21CFRPart11 = default(string), string IsDynamicEnvelope = default(string), string IsSignatureProviderEnvelope = default(string), string LastModifiedDateTime = default(string), string Location = default(string), LockInformation LockInformation = default(LockInformation), string MessageLock = default(string), Notification Notification = default(Notification), string NotificationUri = default(string), string Password = default(string), PowerForm PowerForm = default(PowerForm), string PurgeCompletedDate = default(string), string PurgeRequestDate = default(string), string PurgeState = default(string), Recipients Recipients = default(Recipients), string RecipientsLock = default(string), string RecipientsUri = default(string), RecipientViewRequest RecipientViewRequest = default(RecipientViewRequest), UserInfo Sender = default(UserInfo), string SentDateTime = default(string), string SignerCanSignOnMobile = default(string), string SigningLocation = default(string), string Status = default(string), string StatusChangedDateTime = default(string), string StatusDateTime = default(string), string TemplateId = default(string), List<TemplateRole> TemplateRoles = default(List<TemplateRole>), string TemplatesUri = default(string), string TransactionId = default(string), string UseDisclosure = default(string), string USigState = default(string), string VoidedDateTime = default(string), string VoidedReason = default(string), Workflow Workflow = default(Workflow))
        {
            this.AccessControlListBase64 = AccessControlListBase64;
            this.Accessibility = Accessibility;
            this.AllowComments = AllowComments;
            this.AllowMarkup = AllowMarkup;
            this.AllowReassign = AllowReassign;
            this.AllowRecipientRecursion = AllowRecipientRecursion;
            this.AllowViewHistory = AllowViewHistory;
            this.AnySigner = AnySigner;
            this.Asynchronous = Asynchronous;
            this.Attachments = Attachments;
            this.AttachmentsUri = AttachmentsUri;
            this.AuthoritativeCopy = AuthoritativeCopy;
            this.AuthoritativeCopyDefault = AuthoritativeCopyDefault;
            this.AutoNavigation = AutoNavigation;
            this.BrandId = BrandId;
            this.BrandLock = BrandLock;
            this.BurnDefaultTabData = BurnDefaultTabData;
            this.CertificateUri = CertificateUri;
            this.CompletedDateTime = CompletedDateTime;
            this.CompositeTemplates = CompositeTemplates;
            this.CopyRecipientData = CopyRecipientData;
            this.CreatedDateTime = CreatedDateTime;
            this.CustomFields = CustomFields;
            this.CustomFieldsUri = CustomFieldsUri;
            this.DeclinedDateTime = DeclinedDateTime;
            this.DeletedDateTime = DeletedDateTime;
            this.DeliveredDateTime = DeliveredDateTime;
            this.DisableResponsiveDocument = DisableResponsiveDocument;
            this.DocumentBase64 = DocumentBase64;
            this.Documents = Documents;
            this.DocumentsCombinedUri = DocumentsCombinedUri;
            this.DocumentsUri = DocumentsUri;
            this.EmailBlurb = EmailBlurb;
            this.EmailSettings = EmailSettings;
            this.EmailSubject = EmailSubject;
            this.EnableWetSign = EnableWetSign;
            this.EnforceSignerVisibility = EnforceSignerVisibility;
            this.EnvelopeAttachments = EnvelopeAttachments;
            this.EnvelopeCustomMetadata = EnvelopeCustomMetadata;
            this.EnvelopeDocuments = EnvelopeDocuments;
            this.EnvelopeId = EnvelopeId;
            this.EnvelopeIdStamping = EnvelopeIdStamping;
            this.EnvelopeLocation = EnvelopeLocation;
            this.EnvelopeMetadata = EnvelopeMetadata;
            this.EnvelopeUri = EnvelopeUri;
            this.EventNotification = EventNotification;
            this.EventNotifications = EventNotifications;
            this.ExpireAfter = ExpireAfter;
            this.ExpireDateTime = ExpireDateTime;
            this.ExpireEnabled = ExpireEnabled;
            this.ExternalEnvelopeId = ExternalEnvelopeId;
            this.Folders = Folders;
            this.HasComments = HasComments;
            this.HasFormDataChanged = HasFormDataChanged;
            this.HasWavFile = HasWavFile;
            this.Holder = Holder;
            this.InitialSentDateTime = InitialSentDateTime;
            this.Is21CFRPart11 = Is21CFRPart11;
            this.IsDynamicEnvelope = IsDynamicEnvelope;
            this.IsSignatureProviderEnvelope = IsSignatureProviderEnvelope;
            this.LastModifiedDateTime = LastModifiedDateTime;
            this.Location = Location;
            this.LockInformation = LockInformation;
            this.MessageLock = MessageLock;
            this.Notification = Notification;
            this.NotificationUri = NotificationUri;
            this.Password = Password;
            this.PowerForm = PowerForm;
            this.PurgeCompletedDate = PurgeCompletedDate;
            this.PurgeRequestDate = PurgeRequestDate;
            this.PurgeState = PurgeState;
            this.Recipients = Recipients;
            this.RecipientsLock = RecipientsLock;
            this.RecipientsUri = RecipientsUri;
            this.RecipientViewRequest = RecipientViewRequest;
            this.Sender = Sender;
            this.SentDateTime = SentDateTime;
            this.SignerCanSignOnMobile = SignerCanSignOnMobile;
            this.SigningLocation = SigningLocation;
            this.Status = Status;
            this.StatusChangedDateTime = StatusChangedDateTime;
            this.StatusDateTime = StatusDateTime;
            this.TemplateId = TemplateId;
            this.TemplateRoles = TemplateRoles;
            this.TemplatesUri = TemplatesUri;
            this.TransactionId = TransactionId;
            this.UseDisclosure = UseDisclosure;
            this.USigState = USigState;
            this.VoidedDateTime = VoidedDateTime;
            this.VoidedReason = VoidedReason;
            this.Workflow = Workflow;
        }
        
        /// <summary>
        /// Gets or Sets AccessControlListBase64
        /// </summary>
        [DataMember(Name="accessControlListBase64", EmitDefaultValue=false)]
        public string AccessControlListBase64 { get; set; }
        /// <summary>
        /// Sets the document reading zones for screen reader applications.  This element can only be used if Document Accessibility is enabled for the account.   ###### Note: This information is currently generated from the DocuSign web console by setting the reading zones when creating a template, exporting the reading zone string information, and adding it here.
        /// </summary>
        /// <value>Sets the document reading zones for screen reader applications.  This element can only be used if Document Accessibility is enabled for the account.   ###### Note: This information is currently generated from the DocuSign web console by setting the reading zones when creating a template, exporting the reading zone string information, and adding it here.</value>
        [DataMember(Name="accessibility", EmitDefaultValue=false)]
        public string Accessibility { get; set; }
        /// <summary>
        /// Gets or Sets AllowComments
        /// </summary>
        [DataMember(Name="allowComments", EmitDefaultValue=false)]
        public string AllowComments { get; set; }
        /// <summary>
        /// When set to **true**, Document Markup is enabled for envelope. Account must have Document Markup enabled to use this
        /// </summary>
        /// <value>When set to **true**, Document Markup is enabled for envelope. Account must have Document Markup enabled to use this</value>
        [DataMember(Name="allowMarkup", EmitDefaultValue=false)]
        public string AllowMarkup { get; set; }
        /// <summary>
        /// When set to **true**, the recipient can redirect an envelope to a more appropriate recipient.
        /// </summary>
        /// <value>When set to **true**, the recipient can redirect an envelope to a more appropriate recipient.</value>
        [DataMember(Name="allowReassign", EmitDefaultValue=false)]
        public string AllowReassign { get; set; }
        /// <summary>
        /// When set to **true**, this enables the Recursive Recipients feature and allows a recipient to appear more than once in the routing order.
        /// </summary>
        /// <value>When set to **true**, this enables the Recursive Recipients feature and allows a recipient to appear more than once in the routing order.</value>
        [DataMember(Name="allowRecipientRecursion", EmitDefaultValue=false)]
        public string AllowRecipientRecursion { get; set; }
        /// <summary>
        /// Gets or Sets AllowViewHistory
        /// </summary>
        [DataMember(Name="allowViewHistory", EmitDefaultValue=false)]
        public string AllowViewHistory { get; set; }
        /// <summary>
        /// Gets or Sets AnySigner
        /// </summary>
        [DataMember(Name="anySigner", EmitDefaultValue=false)]
        public string AnySigner { get; set; }
        /// <summary>
        /// When set to **true**, the envelope is queued for processing and the value of the &#x60;status&#x60; property is set to &#39;Processing&#39;. Additionally, get status calls return &#39;Processing&#39; until completed.
        /// </summary>
        /// <value>When set to **true**, the envelope is queued for processing and the value of the &#x60;status&#x60; property is set to &#39;Processing&#39;. Additionally, get status calls return &#39;Processing&#39; until completed.</value>
        [DataMember(Name="asynchronous", EmitDefaultValue=false)]
        public string Asynchronous { get; set; }
        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<Attachment> Attachments { get; set; }
        /// <summary>
        /// Gets or Sets AttachmentsUri
        /// </summary>
        [DataMember(Name="attachmentsUri", EmitDefaultValue=false)]
        public string AttachmentsUri { get; set; }
        /// <summary>
        /// Specifies the Authoritative copy feature. If set to true the Authoritative copy feature is enabled.
        /// </summary>
        /// <value>Specifies the Authoritative copy feature. If set to true the Authoritative copy feature is enabled.</value>
        [DataMember(Name="authoritativeCopy", EmitDefaultValue=false)]
        public string AuthoritativeCopy { get; set; }
        /// <summary>
        /// Gets or Sets AuthoritativeCopyDefault
        /// </summary>
        [DataMember(Name="authoritativeCopyDefault", EmitDefaultValue=false)]
        public string AuthoritativeCopyDefault { get; set; }
        /// <summary>
        /// Gets or Sets AutoNavigation
        /// </summary>
        [DataMember(Name="autoNavigation", EmitDefaultValue=false)]
        public string AutoNavigation { get; set; }
        /// <summary>
        /// This sets the brand profile format used for the envelope. The value in the string is the brandId associated with the profile. Account branding must be enabled for the account to use this option.
        /// </summary>
        /// <value>This sets the brand profile format used for the envelope. The value in the string is the brandId associated with the profile. Account branding must be enabled for the account to use this option.</value>
        [DataMember(Name="brandId", EmitDefaultValue=false)]
        public string BrandId { get; set; }
        /// <summary>
        /// Gets or Sets BrandLock
        /// </summary>
        [DataMember(Name="brandLock", EmitDefaultValue=false)]
        public string BrandLock { get; set; }
        /// <summary>
        /// Gets or Sets BurnDefaultTabData
        /// </summary>
        [DataMember(Name="burnDefaultTabData", EmitDefaultValue=false)]
        public string BurnDefaultTabData { get; set; }
        /// <summary>
        /// Retrieves a URI for an endpoint that allows you to easily retrieve certificate information.
        /// </summary>
        /// <value>Retrieves a URI for an endpoint that allows you to easily retrieve certificate information.</value>
        [DataMember(Name="certificateUri", EmitDefaultValue=false)]
        public string CertificateUri { get; set; }
        /// <summary>
        /// Specifies the date and time this item was completed.
        /// </summary>
        /// <value>Specifies the date and time this item was completed.</value>
        [DataMember(Name="completedDateTime", EmitDefaultValue=false)]
        public string CompletedDateTime { get; set; }
        /// <summary>
        /// A complex type that can be added to create envelopes from a combination of DocuSign templates and PDF forms. The basic envelope remains the same, while the Composite Template adds new document and template overlays into the envelope. There can be any number of Composite Template structures in the envelope.
        /// </summary>
        /// <value>A complex type that can be added to create envelopes from a combination of DocuSign templates and PDF forms. The basic envelope remains the same, while the Composite Template adds new document and template overlays into the envelope. There can be any number of Composite Template structures in the envelope.</value>
        [DataMember(Name="compositeTemplates", EmitDefaultValue=false)]
        public List<CompositeTemplate> CompositeTemplates { get; set; }
        /// <summary>
        /// Gets or Sets CopyRecipientData
        /// </summary>
        [DataMember(Name="copyRecipientData", EmitDefaultValue=false)]
        public string CopyRecipientData { get; set; }
        /// <summary>
        /// Indicates the date and time the item was created.
        /// </summary>
        /// <value>Indicates the date and time the item was created.</value>
        [DataMember(Name="createdDateTime", EmitDefaultValue=false)]
        public string CreatedDateTime { get; set; }
        /// <summary>
        /// An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
        /// </summary>
        /// <value>An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.</value>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public CustomFields CustomFields { get; set; }
        /// <summary>
        /// Contains a URI for an endpoint that you can use to retrieve the custom fields.
        /// </summary>
        /// <value>Contains a URI for an endpoint that you can use to retrieve the custom fields.</value>
        [DataMember(Name="customFieldsUri", EmitDefaultValue=false)]
        public string CustomFieldsUri { get; set; }
        /// <summary>
        /// The date and time the recipient declined the document.
        /// </summary>
        /// <value>The date and time the recipient declined the document.</value>
        [DataMember(Name="declinedDateTime", EmitDefaultValue=false)]
        public string DeclinedDateTime { get; set; }
        /// <summary>
        /// Specifies the data and time the item was deleted.
        /// </summary>
        /// <value>Specifies the data and time the item was deleted.</value>
        [DataMember(Name="deletedDateTime", EmitDefaultValue=false)]
        public string DeletedDateTime { get; set; }
        /// <summary>
        /// Reserved: For DocuSign use only.
        /// </summary>
        /// <value>Reserved: For DocuSign use only.</value>
        [DataMember(Name="deliveredDateTime", EmitDefaultValue=false)]
        public string DeliveredDateTime { get; set; }
        /// <summary>
        /// Gets or Sets DisableResponsiveDocument
        /// </summary>
        [DataMember(Name="disableResponsiveDocument", EmitDefaultValue=false)]
        public string DisableResponsiveDocument { get; set; }
        /// <summary>
        /// Gets or Sets DocumentBase64
        /// </summary>
        [DataMember(Name="documentBase64", EmitDefaultValue=false)]
        public string DocumentBase64 { get; set; }
        /// <summary>
        /// Complex element contains the details on the documents in the envelope.
        /// </summary>
        /// <value>Complex element contains the details on the documents in the envelope.</value>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<Document> Documents { get; set; }
        /// <summary>
        /// Gets or Sets DocumentsCombinedUri
        /// </summary>
        [DataMember(Name="documentsCombinedUri", EmitDefaultValue=false)]
        public string DocumentsCombinedUri { get; set; }
        /// <summary>
        /// Contains a URI for an endpoint that you can use to retrieve the documents.
        /// </summary>
        /// <value>Contains a URI for an endpoint that you can use to retrieve the documents.</value>
        [DataMember(Name="documentsUri", EmitDefaultValue=false)]
        public string DocumentsUri { get; set; }
        /// <summary>
        /// Optional element. This is the same as the email body. If specified it is included in email body for all envelope recipients. This can be a maximum of 10000 characters
        /// </summary>
        /// <value>Optional element. This is the same as the email body. If specified it is included in email body for all envelope recipients. This can be a maximum of 10000 characters</value>
        [DataMember(Name="emailBlurb", EmitDefaultValue=false)]
        public string EmailBlurb { get; set; }
        /// <summary>
        /// This optional complex element enables the sender to override some envelope email setting information. This can be used to override the Reply To email address and name associated with the envelope, as well as the BCC email addresses to which an envelope is sent. When the &#x60;emailSettings&#x60; information is used for an envelope, it only applies to that envelope.  **Important Note:** The &#x60;emailSettings&#x60; information is not returned in the GET method for envelope status. Use GET /email_settings to return information about the emailSettings.
        /// </summary>
        /// <value>This optional complex element enables the sender to override some envelope email setting information. This can be used to override the Reply To email address and name associated with the envelope, as well as the BCC email addresses to which an envelope is sent. When the &#x60;emailSettings&#x60; information is used for an envelope, it only applies to that envelope.  **Important Note:** The &#x60;emailSettings&#x60; information is not returned in the GET method for envelope status. Use GET /email_settings to return information about the emailSettings.</value>
        [DataMember(Name="emailSettings", EmitDefaultValue=false)]
        public EmailSettings EmailSettings { get; set; }
        /// <summary>
        /// Specifies the subject of the email that is sent to all recipients.  See [ML:Template Email Subject Merge Fields] for information about adding merge field information to the email subject.
        /// </summary>
        /// <value>Specifies the subject of the email that is sent to all recipients.  See [ML:Template Email Subject Merge Fields] for information about adding merge field information to the email subject.</value>
        [DataMember(Name="emailSubject", EmitDefaultValue=false)]
        public string EmailSubject { get; set; }
        /// <summary>
        /// When set to **true**, the signer is allowed to print the document and sign it on paper.
        /// </summary>
        /// <value>When set to **true**, the signer is allowed to print the document and sign it on paper.</value>
        [DataMember(Name="enableWetSign", EmitDefaultValue=false)]
        public string EnableWetSign { get; set; }
        /// <summary>
        /// When set to **true**, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.  Your account must have Document Visibility enabled to use this.
        /// </summary>
        /// <value>When set to **true**, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.  Your account must have Document Visibility enabled to use this.</value>
        [DataMember(Name="enforceSignerVisibility", EmitDefaultValue=false)]
        public string EnforceSignerVisibility { get; set; }
        /// <summary>
        /// Gets or Sets EnvelopeAttachments
        /// </summary>
        [DataMember(Name="envelopeAttachments", EmitDefaultValue=false)]
        public List<Attachment> EnvelopeAttachments { get; set; }
        /// <summary>
        /// Gets or Sets EnvelopeCustomMetadata
        /// </summary>
        [DataMember(Name="envelopeCustomMetadata", EmitDefaultValue=false)]
        public EnvelopeCustomMetadata EnvelopeCustomMetadata { get; set; }
        /// <summary>
        /// Gets or Sets EnvelopeDocuments
        /// </summary>
        [DataMember(Name="envelopeDocuments", EmitDefaultValue=false)]
        public List<EnvelopeDocument> EnvelopeDocuments { get; set; }
        /// <summary>
        /// The envelope ID of the envelope status that failed to post.
        /// </summary>
        /// <value>The envelope ID of the envelope status that failed to post.</value>
        [DataMember(Name="envelopeId", EmitDefaultValue=false)]
        public string EnvelopeId { get; set; }
        /// <summary>
        /// When set to **true**, Envelope ID Stamping is enabled.
        /// </summary>
        /// <value>When set to **true**, Envelope ID Stamping is enabled.</value>
        [DataMember(Name="envelopeIdStamping", EmitDefaultValue=false)]
        public string EnvelopeIdStamping { get; set; }
        /// <summary>
        /// Gets or Sets EnvelopeLocation
        /// </summary>
        [DataMember(Name="envelopeLocation", EmitDefaultValue=false)]
        public string EnvelopeLocation { get; set; }
        /// <summary>
        /// Metadata about the features that are enabled for the envelope.
        /// </summary>
        /// <value>Metadata about the features that are enabled for the envelope.</value>
        [DataMember(Name="envelopeMetadata", EmitDefaultValue=false)]
        public EnvelopeMetadata EnvelopeMetadata { get; set; }
        /// <summary>
        /// Contains a URI for an endpoint that you can use to retrieve the envelope or envelopes.
        /// </summary>
        /// <value>Contains a URI for an endpoint that you can use to retrieve the envelope or envelopes.</value>
        [DataMember(Name="envelopeUri", EmitDefaultValue=false)]
        public string EnvelopeUri { get; set; }
        /// <summary>
        /// This optional object is used to register a webhook that will receive status changes for this envelope.
        /// </summary>
        /// <value>This optional object is used to register a webhook that will receive status changes for this envelope.</value>
        [DataMember(Name="eventNotification", EmitDefaultValue=false)]
        public EventNotification EventNotification { get; set; }
        /// <summary>
        /// Gets or Sets EventNotifications
        /// </summary>
        [DataMember(Name="eventNotifications", EmitDefaultValue=false)]
        public List<EventNotification> EventNotifications { get; set; }
        /// <summary>
        /// Gets or Sets ExpireAfter
        /// </summary>
        [DataMember(Name="expireAfter", EmitDefaultValue=false)]
        public string ExpireAfter { get; set; }
        /// <summary>
        /// Gets or Sets ExpireDateTime
        /// </summary>
        [DataMember(Name="expireDateTime", EmitDefaultValue=false)]
        public string ExpireDateTime { get; set; }
        /// <summary>
        /// Gets or Sets ExpireEnabled
        /// </summary>
        [DataMember(Name="expireEnabled", EmitDefaultValue=false)]
        public string ExpireEnabled { get; set; }
        /// <summary>
        /// Gets or Sets ExternalEnvelopeId
        /// </summary>
        [DataMember(Name="externalEnvelopeId", EmitDefaultValue=false)]
        public string ExternalEnvelopeId { get; set; }
        /// <summary>
        /// Gets or Sets Folders
        /// </summary>
        [DataMember(Name="folders", EmitDefaultValue=false)]
        public List<Folder> Folders { get; set; }
        /// <summary>
        /// Gets or Sets HasComments
        /// </summary>
        [DataMember(Name="hasComments", EmitDefaultValue=false)]
        public string HasComments { get; set; }
        /// <summary>
        /// Gets or Sets HasFormDataChanged
        /// </summary>
        [DataMember(Name="hasFormDataChanged", EmitDefaultValue=false)]
        public string HasFormDataChanged { get; set; }
        /// <summary>
        /// Gets or Sets HasWavFile
        /// </summary>
        [DataMember(Name="hasWavFile", EmitDefaultValue=false)]
        public string HasWavFile { get; set; }
        /// <summary>
        /// Gets or Sets Holder
        /// </summary>
        [DataMember(Name="holder", EmitDefaultValue=false)]
        public string Holder { get; set; }
        /// <summary>
        /// Gets or Sets InitialSentDateTime
        /// </summary>
        [DataMember(Name="initialSentDateTime", EmitDefaultValue=false)]
        public string InitialSentDateTime { get; set; }
        /// <summary>
        /// When set to **true**, indicates that this module is enabled on the account.
        /// </summary>
        /// <value>When set to **true**, indicates that this module is enabled on the account.</value>
        [DataMember(Name="is21CFRPart11", EmitDefaultValue=false)]
        public string Is21CFRPart11 { get; set; }
        /// <summary>
        /// Gets or Sets IsDynamicEnvelope
        /// </summary>
        [DataMember(Name="isDynamicEnvelope", EmitDefaultValue=false)]
        public string IsDynamicEnvelope { get; set; }
        /// <summary>
        /// Gets or Sets IsSignatureProviderEnvelope
        /// </summary>
        [DataMember(Name="isSignatureProviderEnvelope", EmitDefaultValue=false)]
        public string IsSignatureProviderEnvelope { get; set; }
        /// <summary>
        /// The date and time the item was last modified.
        /// </summary>
        /// <value>The date and time the item was last modified.</value>
        [DataMember(Name="lastModifiedDateTime", EmitDefaultValue=false)]
        public string LastModifiedDateTime { get; set; }
        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }
        /// <summary>
        /// Provides lock information about an envelope that a user has locked.
        /// </summary>
        /// <value>Provides lock information about an envelope that a user has locked.</value>
        [DataMember(Name="lockInformation", EmitDefaultValue=false)]
        public LockInformation LockInformation { get; set; }
        /// <summary>
        /// When set to **true**, prevents senders from changing the contents of &#x60;emailBlurb&#x60; and &#x60;emailSubject&#x60; properties for the envelope.   Additionally, this prevents users from making changes to the contents of &#x60;emailBlurb&#x60; and &#x60;emailSubject&#x60; properties when correcting envelopes.   However, if the &#x60;messageLock&#x60; node is set to true**** and the &#x60;emailSubject&#x60; property is empty, senders and correctors are able to add a subject to the envelope.
        /// </summary>
        /// <value>When set to **true**, prevents senders from changing the contents of &#x60;emailBlurb&#x60; and &#x60;emailSubject&#x60; properties for the envelope.   Additionally, this prevents users from making changes to the contents of &#x60;emailBlurb&#x60; and &#x60;emailSubject&#x60; properties when correcting envelopes.   However, if the &#x60;messageLock&#x60; node is set to true**** and the &#x60;emailSubject&#x60; property is empty, senders and correctors are able to add a subject to the envelope.</value>
        [DataMember(Name="messageLock", EmitDefaultValue=false)]
        public string MessageLock { get; set; }
        /// <summary>
        /// An optional complex element that specifies the notification options for the envelope.
        /// </summary>
        /// <value>An optional complex element that specifies the notification options for the envelope.</value>
        [DataMember(Name="notification", EmitDefaultValue=false)]
        public Notification Notification { get; set; }
        /// <summary>
        /// Contains a URI for an endpoint that you can use to retrieve the notifications.
        /// </summary>
        /// <value>Contains a URI for an endpoint that you can use to retrieve the notifications.</value>
        [DataMember(Name="notificationUri", EmitDefaultValue=false)]
        public string NotificationUri { get; set; }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// Information about any PowerForms that are included in the envelope.
        /// </summary>
        /// <value>Information about any PowerForms that are included in the envelope.</value>
        [DataMember(Name="powerForm", EmitDefaultValue=false)]
        public PowerForm PowerForm { get; set; }
        /// <summary>
        /// Gets or Sets PurgeCompletedDate
        /// </summary>
        [DataMember(Name="purgeCompletedDate", EmitDefaultValue=false)]
        public string PurgeCompletedDate { get; set; }
        /// <summary>
        /// Gets or Sets PurgeRequestDate
        /// </summary>
        [DataMember(Name="purgeRequestDate", EmitDefaultValue=false)]
        public string PurgeRequestDate { get; set; }
        /// <summary>
        /// Initiates a purge request. Valid values are: * documents_queued: Places envelope documents in the purge queue. * documents_and_metadata_queued: Places envelope documents and metadata in the purge queue. 
        /// </summary>
        /// <value>Initiates a purge request. Valid values are: * documents_queued: Places envelope documents in the purge queue. * documents_and_metadata_queued: Places envelope documents and metadata in the purge queue. </value>
        [DataMember(Name="purgeState", EmitDefaultValue=false)]
        public string PurgeState { get; set; }
        /// <summary>
        /// An array of powerform recipients.
        /// </summary>
        /// <value>An array of powerform recipients.</value>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public Recipients Recipients { get; set; }
        /// <summary>
        /// When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.
        /// </summary>
        /// <value>When set to **true**, prevents senders from changing, correcting, or deleting the recipient information for the envelope.</value>
        [DataMember(Name="recipientsLock", EmitDefaultValue=false)]
        public string RecipientsLock { get; set; }
        /// <summary>
        /// Contains a URI for an endpoint that you can use to retrieve the recipients.
        /// </summary>
        /// <value>Contains a URI for an endpoint that you can use to retrieve the recipients.</value>
        [DataMember(Name="recipientsUri", EmitDefaultValue=false)]
        public string RecipientsUri { get; set; }
        /// <summary>
        /// Gets or Sets RecipientViewRequest
        /// </summary>
        [DataMember(Name="recipientViewRequest", EmitDefaultValue=false)]
        public RecipientViewRequest RecipientViewRequest { get; set; }
        /// <summary>
        /// Information about the sender of the envelope.
        /// </summary>
        /// <value>Information about the sender of the envelope.</value>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public UserInfo Sender { get; set; }
        /// <summary>
        /// The date and time the envelope was sent.
        /// </summary>
        /// <value>The date and time the envelope was sent.</value>
        [DataMember(Name="sentDateTime", EmitDefaultValue=false)]
        public string SentDateTime { get; set; }
        /// <summary>
        /// Gets or Sets SignerCanSignOnMobile
        /// </summary>
        [DataMember(Name="signerCanSignOnMobile", EmitDefaultValue=false)]
        public string SignerCanSignOnMobile { get; set; }
        /// <summary>
        /// Specifies the physical location where the signing takes place. It can have two enumeration values; InPerson and Online. The default value is Online.
        /// </summary>
        /// <value>Specifies the physical location where the signing takes place. It can have two enumeration values; InPerson and Online. The default value is Online.</value>
        [DataMember(Name="signingLocation", EmitDefaultValue=false)]
        public string SigningLocation { get; set; }
        /// <summary>
        /// Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.
        /// </summary>
        /// <value>Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// The data and time the status changed.
        /// </summary>
        /// <value>The data and time the status changed.</value>
        [DataMember(Name="statusChangedDateTime", EmitDefaultValue=false)]
        public string StatusChangedDateTime { get; set; }
        /// <summary>
        /// Gets or Sets StatusDateTime
        /// </summary>
        [DataMember(Name="statusDateTime", EmitDefaultValue=false)]
        public string StatusDateTime { get; set; }
        /// <summary>
        /// The unique identifier of the template. If this is not provided, DocuSign will generate a value. 
        /// </summary>
        /// <value>The unique identifier of the template. If this is not provided, DocuSign will generate a value. </value>
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public string TemplateId { get; set; }
        /// <summary>
        /// Specifies the template recipients. Each roleName in the template must have a recipient assigned to it. This is made up elements:  * email - The recipient&#39;s email address. * name - The recipient&#39;s name. * roleName - The template roleName associated with the recipient. * clientUserId - Optional, this sets if the signer is This specifies if the recipient is embedded or remote. If the clientUserId is not null then the recipient is embedded. Note that if a ClientUserId is used and the account settings SignerMustHaveAccount or SignerMustLoginToSign are true, an error is generated on sending. * defaultRecipient - Optional, When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient. * routingOrder - This specifies the routing order of the recipient in the envelope. * accessCode - This optional element specifies the access code a recipient has to enter to validate the identity. This can be a maximum of 50 characters. * inPersonSignerName - Optional, if the template role is an in person signer, this is the full legal name of the signer. This can be a maximum of 100 characters. * emailNotification - This is an optional complex element that has a role specific emailSubject, emailBody, and language. It follows the same format as the emailNotification node for Recipients. * tabs - This allows the tab values to be specified for matching to tabs in the template. 
        /// </summary>
        /// <value>Specifies the template recipients. Each roleName in the template must have a recipient assigned to it. This is made up elements:  * email - The recipient&#39;s email address. * name - The recipient&#39;s name. * roleName - The template roleName associated with the recipient. * clientUserId - Optional, this sets if the signer is This specifies if the recipient is embedded or remote. If the clientUserId is not null then the recipient is embedded. Note that if a ClientUserId is used and the account settings SignerMustHaveAccount or SignerMustLoginToSign are true, an error is generated on sending. * defaultRecipient - Optional, When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient. * routingOrder - This specifies the routing order of the recipient in the envelope. * accessCode - This optional element specifies the access code a recipient has to enter to validate the identity. This can be a maximum of 50 characters. * inPersonSignerName - Optional, if the template role is an in person signer, this is the full legal name of the signer. This can be a maximum of 100 characters. * emailNotification - This is an optional complex element that has a role specific emailSubject, emailBody, and language. It follows the same format as the emailNotification node for Recipients. * tabs - This allows the tab values to be specified for matching to tabs in the template. </value>
        [DataMember(Name="templateRoles", EmitDefaultValue=false)]
        public List<TemplateRole> TemplateRoles { get; set; }
        /// <summary>
        /// Contains a URI for an endpoint which you can use to retrieve the templates.
        /// </summary>
        /// <value>Contains a URI for an endpoint which you can use to retrieve the templates.</value>
        [DataMember(Name="templatesUri", EmitDefaultValue=false)]
        public string TemplatesUri { get; set; }
        /// <summary>
        ///  Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used for offline signing to ensure that an envelope is not sent multiple times. The &#x60;transactionId&#x60; property can be used determine an envelope&#39;s status (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned.
        /// </summary>
        /// <value> Used to identify an envelope. The id is a sender-generated value and is valid in the DocuSign system for 7 days. It is recommended that a transaction ID is used for offline signing to ensure that an envelope is not sent multiple times. The &#x60;transactionId&#x60; property can be used determine an envelope&#39;s status (i.e. was it created or not) in cases where the internet connection was lost before the envelope status was returned.</value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }
        /// <summary>
        /// When set to **true**, the disclosure is shown to recipients in accordance with the account&#39;s Electronic Record and Signature Disclosure frequency setting. When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients.   If the &#x60;useDisclosure&#x60; property is not set, then the account&#39;s normal disclosure setting is used and the value of the &#x60;useDisclosure&#x60; property is not returned in responses when getting envelope information.
        /// </summary>
        /// <value>When set to **true**, the disclosure is shown to recipients in accordance with the account&#39;s Electronic Record and Signature Disclosure frequency setting. When set to **false**, the Electronic Record and Signature Disclosure is not shown to any envelope recipients.   If the &#x60;useDisclosure&#x60; property is not set, then the account&#39;s normal disclosure setting is used and the value of the &#x60;useDisclosure&#x60; property is not returned in responses when getting envelope information.</value>
        [DataMember(Name="useDisclosure", EmitDefaultValue=false)]
        public string UseDisclosure { get; set; }
        /// <summary>
        /// Gets or Sets USigState
        /// </summary>
        [DataMember(Name="uSigState", EmitDefaultValue=false)]
        public string USigState { get; set; }
        /// <summary>
        /// The date and time the envelope or template was voided.
        /// </summary>
        /// <value>The date and time the envelope or template was voided.</value>
        [DataMember(Name="voidedDateTime", EmitDefaultValue=false)]
        public string VoidedDateTime { get; set; }
        /// <summary>
        /// The reason the envelope or template was voided.
        /// </summary>
        /// <value>The reason the envelope or template was voided.</value>
        [DataMember(Name="voidedReason", EmitDefaultValue=false)]
        public string VoidedReason { get; set; }
        /// <summary>
        /// Describes the workflow for this envelope.
        /// </summary>
        /// <value>Describes the workflow for this envelope.</value>
        [DataMember(Name="workflow", EmitDefaultValue=false)]
        public Workflow Workflow { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvelopeDefinition {\n");
            sb.Append("  AccessControlListBase64: ").Append(AccessControlListBase64).Append("\n");
            sb.Append("  Accessibility: ").Append(Accessibility).Append("\n");
            sb.Append("  AllowComments: ").Append(AllowComments).Append("\n");
            sb.Append("  AllowMarkup: ").Append(AllowMarkup).Append("\n");
            sb.Append("  AllowReassign: ").Append(AllowReassign).Append("\n");
            sb.Append("  AllowRecipientRecursion: ").Append(AllowRecipientRecursion).Append("\n");
            sb.Append("  AllowViewHistory: ").Append(AllowViewHistory).Append("\n");
            sb.Append("  AnySigner: ").Append(AnySigner).Append("\n");
            sb.Append("  Asynchronous: ").Append(Asynchronous).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  AttachmentsUri: ").Append(AttachmentsUri).Append("\n");
            sb.Append("  AuthoritativeCopy: ").Append(AuthoritativeCopy).Append("\n");
            sb.Append("  AuthoritativeCopyDefault: ").Append(AuthoritativeCopyDefault).Append("\n");
            sb.Append("  AutoNavigation: ").Append(AutoNavigation).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  BrandLock: ").Append(BrandLock).Append("\n");
            sb.Append("  BurnDefaultTabData: ").Append(BurnDefaultTabData).Append("\n");
            sb.Append("  CertificateUri: ").Append(CertificateUri).Append("\n");
            sb.Append("  CompletedDateTime: ").Append(CompletedDateTime).Append("\n");
            sb.Append("  CompositeTemplates: ").Append(CompositeTemplates).Append("\n");
            sb.Append("  CopyRecipientData: ").Append(CopyRecipientData).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomFieldsUri: ").Append(CustomFieldsUri).Append("\n");
            sb.Append("  DeclinedDateTime: ").Append(DeclinedDateTime).Append("\n");
            sb.Append("  DeletedDateTime: ").Append(DeletedDateTime).Append("\n");
            sb.Append("  DeliveredDateTime: ").Append(DeliveredDateTime).Append("\n");
            sb.Append("  DisableResponsiveDocument: ").Append(DisableResponsiveDocument).Append("\n");
            sb.Append("  DocumentBase64: ").Append(DocumentBase64).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  DocumentsCombinedUri: ").Append(DocumentsCombinedUri).Append("\n");
            sb.Append("  DocumentsUri: ").Append(DocumentsUri).Append("\n");
            sb.Append("  EmailBlurb: ").Append(EmailBlurb).Append("\n");
            sb.Append("  EmailSettings: ").Append(EmailSettings).Append("\n");
            sb.Append("  EmailSubject: ").Append(EmailSubject).Append("\n");
            sb.Append("  EnableWetSign: ").Append(EnableWetSign).Append("\n");
            sb.Append("  EnforceSignerVisibility: ").Append(EnforceSignerVisibility).Append("\n");
            sb.Append("  EnvelopeAttachments: ").Append(EnvelopeAttachments).Append("\n");
            sb.Append("  EnvelopeCustomMetadata: ").Append(EnvelopeCustomMetadata).Append("\n");
            sb.Append("  EnvelopeDocuments: ").Append(EnvelopeDocuments).Append("\n");
            sb.Append("  EnvelopeId: ").Append(EnvelopeId).Append("\n");
            sb.Append("  EnvelopeIdStamping: ").Append(EnvelopeIdStamping).Append("\n");
            sb.Append("  EnvelopeLocation: ").Append(EnvelopeLocation).Append("\n");
            sb.Append("  EnvelopeMetadata: ").Append(EnvelopeMetadata).Append("\n");
            sb.Append("  EnvelopeUri: ").Append(EnvelopeUri).Append("\n");
            sb.Append("  EventNotification: ").Append(EventNotification).Append("\n");
            sb.Append("  EventNotifications: ").Append(EventNotifications).Append("\n");
            sb.Append("  ExpireAfter: ").Append(ExpireAfter).Append("\n");
            sb.Append("  ExpireDateTime: ").Append(ExpireDateTime).Append("\n");
            sb.Append("  ExpireEnabled: ").Append(ExpireEnabled).Append("\n");
            sb.Append("  ExternalEnvelopeId: ").Append(ExternalEnvelopeId).Append("\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("  HasComments: ").Append(HasComments).Append("\n");
            sb.Append("  HasFormDataChanged: ").Append(HasFormDataChanged).Append("\n");
            sb.Append("  HasWavFile: ").Append(HasWavFile).Append("\n");
            sb.Append("  Holder: ").Append(Holder).Append("\n");
            sb.Append("  InitialSentDateTime: ").Append(InitialSentDateTime).Append("\n");
            sb.Append("  Is21CFRPart11: ").Append(Is21CFRPart11).Append("\n");
            sb.Append("  IsDynamicEnvelope: ").Append(IsDynamicEnvelope).Append("\n");
            sb.Append("  IsSignatureProviderEnvelope: ").Append(IsSignatureProviderEnvelope).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  LockInformation: ").Append(LockInformation).Append("\n");
            sb.Append("  MessageLock: ").Append(MessageLock).Append("\n");
            sb.Append("  Notification: ").Append(Notification).Append("\n");
            sb.Append("  NotificationUri: ").Append(NotificationUri).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PowerForm: ").Append(PowerForm).Append("\n");
            sb.Append("  PurgeCompletedDate: ").Append(PurgeCompletedDate).Append("\n");
            sb.Append("  PurgeRequestDate: ").Append(PurgeRequestDate).Append("\n");
            sb.Append("  PurgeState: ").Append(PurgeState).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  RecipientsLock: ").Append(RecipientsLock).Append("\n");
            sb.Append("  RecipientsUri: ").Append(RecipientsUri).Append("\n");
            sb.Append("  RecipientViewRequest: ").Append(RecipientViewRequest).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  SentDateTime: ").Append(SentDateTime).Append("\n");
            sb.Append("  SignerCanSignOnMobile: ").Append(SignerCanSignOnMobile).Append("\n");
            sb.Append("  SigningLocation: ").Append(SigningLocation).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusChangedDateTime: ").Append(StatusChangedDateTime).Append("\n");
            sb.Append("  StatusDateTime: ").Append(StatusDateTime).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  TemplateRoles: ").Append(TemplateRoles).Append("\n");
            sb.Append("  TemplatesUri: ").Append(TemplatesUri).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  UseDisclosure: ").Append(UseDisclosure).Append("\n");
            sb.Append("  USigState: ").Append(USigState).Append("\n");
            sb.Append("  VoidedDateTime: ").Append(VoidedDateTime).Append("\n");
            sb.Append("  VoidedReason: ").Append(VoidedReason).Append("\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EnvelopeDefinition);
        }

        /// <summary>
        /// Returns true if EnvelopeDefinition instances are equal
        /// </summary>
        /// <param name="other">Instance of EnvelopeDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvelopeDefinition other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessControlListBase64 == other.AccessControlListBase64 ||
                    this.AccessControlListBase64 != null &&
                    this.AccessControlListBase64.Equals(other.AccessControlListBase64)
                ) && 
                (
                    this.Accessibility == other.Accessibility ||
                    this.Accessibility != null &&
                    this.Accessibility.Equals(other.Accessibility)
                ) && 
                (
                    this.AllowComments == other.AllowComments ||
                    this.AllowComments != null &&
                    this.AllowComments.Equals(other.AllowComments)
                ) && 
                (
                    this.AllowMarkup == other.AllowMarkup ||
                    this.AllowMarkup != null &&
                    this.AllowMarkup.Equals(other.AllowMarkup)
                ) && 
                (
                    this.AllowReassign == other.AllowReassign ||
                    this.AllowReassign != null &&
                    this.AllowReassign.Equals(other.AllowReassign)
                ) && 
                (
                    this.AllowRecipientRecursion == other.AllowRecipientRecursion ||
                    this.AllowRecipientRecursion != null &&
                    this.AllowRecipientRecursion.Equals(other.AllowRecipientRecursion)
                ) && 
                (
                    this.AllowViewHistory == other.AllowViewHistory ||
                    this.AllowViewHistory != null &&
                    this.AllowViewHistory.Equals(other.AllowViewHistory)
                ) && 
                (
                    this.AnySigner == other.AnySigner ||
                    this.AnySigner != null &&
                    this.AnySigner.Equals(other.AnySigner)
                ) && 
                (
                    this.Asynchronous == other.Asynchronous ||
                    this.Asynchronous != null &&
                    this.Asynchronous.Equals(other.Asynchronous)
                ) && 
                (
                    this.Attachments == other.Attachments ||
                    this.Attachments != null &&
                    this.Attachments.SequenceEqual(other.Attachments)
                ) && 
                (
                    this.AttachmentsUri == other.AttachmentsUri ||
                    this.AttachmentsUri != null &&
                    this.AttachmentsUri.Equals(other.AttachmentsUri)
                ) && 
                (
                    this.AuthoritativeCopy == other.AuthoritativeCopy ||
                    this.AuthoritativeCopy != null &&
                    this.AuthoritativeCopy.Equals(other.AuthoritativeCopy)
                ) && 
                (
                    this.AuthoritativeCopyDefault == other.AuthoritativeCopyDefault ||
                    this.AuthoritativeCopyDefault != null &&
                    this.AuthoritativeCopyDefault.Equals(other.AuthoritativeCopyDefault)
                ) && 
                (
                    this.AutoNavigation == other.AutoNavigation ||
                    this.AutoNavigation != null &&
                    this.AutoNavigation.Equals(other.AutoNavigation)
                ) && 
                (
                    this.BrandId == other.BrandId ||
                    this.BrandId != null &&
                    this.BrandId.Equals(other.BrandId)
                ) && 
                (
                    this.BrandLock == other.BrandLock ||
                    this.BrandLock != null &&
                    this.BrandLock.Equals(other.BrandLock)
                ) && 
                (
                    this.BurnDefaultTabData == other.BurnDefaultTabData ||
                    this.BurnDefaultTabData != null &&
                    this.BurnDefaultTabData.Equals(other.BurnDefaultTabData)
                ) && 
                (
                    this.CertificateUri == other.CertificateUri ||
                    this.CertificateUri != null &&
                    this.CertificateUri.Equals(other.CertificateUri)
                ) && 
                (
                    this.CompletedDateTime == other.CompletedDateTime ||
                    this.CompletedDateTime != null &&
                    this.CompletedDateTime.Equals(other.CompletedDateTime)
                ) && 
                (
                    this.CompositeTemplates == other.CompositeTemplates ||
                    this.CompositeTemplates != null &&
                    this.CompositeTemplates.SequenceEqual(other.CompositeTemplates)
                ) && 
                (
                    this.CopyRecipientData == other.CopyRecipientData ||
                    this.CopyRecipientData != null &&
                    this.CopyRecipientData.Equals(other.CopyRecipientData)
                ) && 
                (
                    this.CreatedDateTime == other.CreatedDateTime ||
                    this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(other.CreatedDateTime)
                ) && 
                (
                    this.CustomFields == other.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    this.CustomFieldsUri == other.CustomFieldsUri ||
                    this.CustomFieldsUri != null &&
                    this.CustomFieldsUri.Equals(other.CustomFieldsUri)
                ) && 
                (
                    this.DeclinedDateTime == other.DeclinedDateTime ||
                    this.DeclinedDateTime != null &&
                    this.DeclinedDateTime.Equals(other.DeclinedDateTime)
                ) && 
                (
                    this.DeletedDateTime == other.DeletedDateTime ||
                    this.DeletedDateTime != null &&
                    this.DeletedDateTime.Equals(other.DeletedDateTime)
                ) && 
                (
                    this.DeliveredDateTime == other.DeliveredDateTime ||
                    this.DeliveredDateTime != null &&
                    this.DeliveredDateTime.Equals(other.DeliveredDateTime)
                ) && 
                (
                    this.DisableResponsiveDocument == other.DisableResponsiveDocument ||
                    this.DisableResponsiveDocument != null &&
                    this.DisableResponsiveDocument.Equals(other.DisableResponsiveDocument)
                ) && 
                (
                    this.DocumentBase64 == other.DocumentBase64 ||
                    this.DocumentBase64 != null &&
                    this.DocumentBase64.Equals(other.DocumentBase64)
                ) && 
                (
                    this.Documents == other.Documents ||
                    this.Documents != null &&
                    this.Documents.SequenceEqual(other.Documents)
                ) && 
                (
                    this.DocumentsCombinedUri == other.DocumentsCombinedUri ||
                    this.DocumentsCombinedUri != null &&
                    this.DocumentsCombinedUri.Equals(other.DocumentsCombinedUri)
                ) && 
                (
                    this.DocumentsUri == other.DocumentsUri ||
                    this.DocumentsUri != null &&
                    this.DocumentsUri.Equals(other.DocumentsUri)
                ) && 
                (
                    this.EmailBlurb == other.EmailBlurb ||
                    this.EmailBlurb != null &&
                    this.EmailBlurb.Equals(other.EmailBlurb)
                ) && 
                (
                    this.EmailSettings == other.EmailSettings ||
                    this.EmailSettings != null &&
                    this.EmailSettings.Equals(other.EmailSettings)
                ) && 
                (
                    this.EmailSubject == other.EmailSubject ||
                    this.EmailSubject != null &&
                    this.EmailSubject.Equals(other.EmailSubject)
                ) && 
                (
                    this.EnableWetSign == other.EnableWetSign ||
                    this.EnableWetSign != null &&
                    this.EnableWetSign.Equals(other.EnableWetSign)
                ) && 
                (
                    this.EnforceSignerVisibility == other.EnforceSignerVisibility ||
                    this.EnforceSignerVisibility != null &&
                    this.EnforceSignerVisibility.Equals(other.EnforceSignerVisibility)
                ) && 
                (
                    this.EnvelopeAttachments == other.EnvelopeAttachments ||
                    this.EnvelopeAttachments != null &&
                    this.EnvelopeAttachments.SequenceEqual(other.EnvelopeAttachments)
                ) && 
                (
                    this.EnvelopeCustomMetadata == other.EnvelopeCustomMetadata ||
                    this.EnvelopeCustomMetadata != null &&
                    this.EnvelopeCustomMetadata.Equals(other.EnvelopeCustomMetadata)
                ) && 
                (
                    this.EnvelopeDocuments == other.EnvelopeDocuments ||
                    this.EnvelopeDocuments != null &&
                    this.EnvelopeDocuments.SequenceEqual(other.EnvelopeDocuments)
                ) && 
                (
                    this.EnvelopeId == other.EnvelopeId ||
                    this.EnvelopeId != null &&
                    this.EnvelopeId.Equals(other.EnvelopeId)
                ) && 
                (
                    this.EnvelopeIdStamping == other.EnvelopeIdStamping ||
                    this.EnvelopeIdStamping != null &&
                    this.EnvelopeIdStamping.Equals(other.EnvelopeIdStamping)
                ) && 
                (
                    this.EnvelopeLocation == other.EnvelopeLocation ||
                    this.EnvelopeLocation != null &&
                    this.EnvelopeLocation.Equals(other.EnvelopeLocation)
                ) && 
                (
                    this.EnvelopeMetadata == other.EnvelopeMetadata ||
                    this.EnvelopeMetadata != null &&
                    this.EnvelopeMetadata.Equals(other.EnvelopeMetadata)
                ) && 
                (
                    this.EnvelopeUri == other.EnvelopeUri ||
                    this.EnvelopeUri != null &&
                    this.EnvelopeUri.Equals(other.EnvelopeUri)
                ) && 
                (
                    this.EventNotification == other.EventNotification ||
                    this.EventNotification != null &&
                    this.EventNotification.Equals(other.EventNotification)
                ) && 
                (
                    this.EventNotifications == other.EventNotifications ||
                    this.EventNotifications != null &&
                    this.EventNotifications.SequenceEqual(other.EventNotifications)
                ) && 
                (
                    this.ExpireAfter == other.ExpireAfter ||
                    this.ExpireAfter != null &&
                    this.ExpireAfter.Equals(other.ExpireAfter)
                ) && 
                (
                    this.ExpireDateTime == other.ExpireDateTime ||
                    this.ExpireDateTime != null &&
                    this.ExpireDateTime.Equals(other.ExpireDateTime)
                ) && 
                (
                    this.ExpireEnabled == other.ExpireEnabled ||
                    this.ExpireEnabled != null &&
                    this.ExpireEnabled.Equals(other.ExpireEnabled)
                ) && 
                (
                    this.ExternalEnvelopeId == other.ExternalEnvelopeId ||
                    this.ExternalEnvelopeId != null &&
                    this.ExternalEnvelopeId.Equals(other.ExternalEnvelopeId)
                ) && 
                (
                    this.Folders == other.Folders ||
                    this.Folders != null &&
                    this.Folders.SequenceEqual(other.Folders)
                ) && 
                (
                    this.HasComments == other.HasComments ||
                    this.HasComments != null &&
                    this.HasComments.Equals(other.HasComments)
                ) && 
                (
                    this.HasFormDataChanged == other.HasFormDataChanged ||
                    this.HasFormDataChanged != null &&
                    this.HasFormDataChanged.Equals(other.HasFormDataChanged)
                ) && 
                (
                    this.HasWavFile == other.HasWavFile ||
                    this.HasWavFile != null &&
                    this.HasWavFile.Equals(other.HasWavFile)
                ) && 
                (
                    this.Holder == other.Holder ||
                    this.Holder != null &&
                    this.Holder.Equals(other.Holder)
                ) && 
                (
                    this.InitialSentDateTime == other.InitialSentDateTime ||
                    this.InitialSentDateTime != null &&
                    this.InitialSentDateTime.Equals(other.InitialSentDateTime)
                ) && 
                (
                    this.Is21CFRPart11 == other.Is21CFRPart11 ||
                    this.Is21CFRPart11 != null &&
                    this.Is21CFRPart11.Equals(other.Is21CFRPart11)
                ) && 
                (
                    this.IsDynamicEnvelope == other.IsDynamicEnvelope ||
                    this.IsDynamicEnvelope != null &&
                    this.IsDynamicEnvelope.Equals(other.IsDynamicEnvelope)
                ) && 
                (
                    this.IsSignatureProviderEnvelope == other.IsSignatureProviderEnvelope ||
                    this.IsSignatureProviderEnvelope != null &&
                    this.IsSignatureProviderEnvelope.Equals(other.IsSignatureProviderEnvelope)
                ) && 
                (
                    this.LastModifiedDateTime == other.LastModifiedDateTime ||
                    this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(other.LastModifiedDateTime)
                ) && 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) && 
                (
                    this.LockInformation == other.LockInformation ||
                    this.LockInformation != null &&
                    this.LockInformation.Equals(other.LockInformation)
                ) && 
                (
                    this.MessageLock == other.MessageLock ||
                    this.MessageLock != null &&
                    this.MessageLock.Equals(other.MessageLock)
                ) && 
                (
                    this.Notification == other.Notification ||
                    this.Notification != null &&
                    this.Notification.Equals(other.Notification)
                ) && 
                (
                    this.NotificationUri == other.NotificationUri ||
                    this.NotificationUri != null &&
                    this.NotificationUri.Equals(other.NotificationUri)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.PowerForm == other.PowerForm ||
                    this.PowerForm != null &&
                    this.PowerForm.Equals(other.PowerForm)
                ) && 
                (
                    this.PurgeCompletedDate == other.PurgeCompletedDate ||
                    this.PurgeCompletedDate != null &&
                    this.PurgeCompletedDate.Equals(other.PurgeCompletedDate)
                ) && 
                (
                    this.PurgeRequestDate == other.PurgeRequestDate ||
                    this.PurgeRequestDate != null &&
                    this.PurgeRequestDate.Equals(other.PurgeRequestDate)
                ) && 
                (
                    this.PurgeState == other.PurgeState ||
                    this.PurgeState != null &&
                    this.PurgeState.Equals(other.PurgeState)
                ) && 
                (
                    this.Recipients == other.Recipients ||
                    this.Recipients != null &&
                    this.Recipients.Equals(other.Recipients)
                ) && 
                (
                    this.RecipientsLock == other.RecipientsLock ||
                    this.RecipientsLock != null &&
                    this.RecipientsLock.Equals(other.RecipientsLock)
                ) && 
                (
                    this.RecipientsUri == other.RecipientsUri ||
                    this.RecipientsUri != null &&
                    this.RecipientsUri.Equals(other.RecipientsUri)
                ) && 
                (
                    this.RecipientViewRequest == other.RecipientViewRequest ||
                    this.RecipientViewRequest != null &&
                    this.RecipientViewRequest.Equals(other.RecipientViewRequest)
                ) && 
                (
                    this.Sender == other.Sender ||
                    this.Sender != null &&
                    this.Sender.Equals(other.Sender)
                ) && 
                (
                    this.SentDateTime == other.SentDateTime ||
                    this.SentDateTime != null &&
                    this.SentDateTime.Equals(other.SentDateTime)
                ) && 
                (
                    this.SignerCanSignOnMobile == other.SignerCanSignOnMobile ||
                    this.SignerCanSignOnMobile != null &&
                    this.SignerCanSignOnMobile.Equals(other.SignerCanSignOnMobile)
                ) && 
                (
                    this.SigningLocation == other.SigningLocation ||
                    this.SigningLocation != null &&
                    this.SigningLocation.Equals(other.SigningLocation)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusChangedDateTime == other.StatusChangedDateTime ||
                    this.StatusChangedDateTime != null &&
                    this.StatusChangedDateTime.Equals(other.StatusChangedDateTime)
                ) && 
                (
                    this.StatusDateTime == other.StatusDateTime ||
                    this.StatusDateTime != null &&
                    this.StatusDateTime.Equals(other.StatusDateTime)
                ) && 
                (
                    this.TemplateId == other.TemplateId ||
                    this.TemplateId != null &&
                    this.TemplateId.Equals(other.TemplateId)
                ) && 
                (
                    this.TemplateRoles == other.TemplateRoles ||
                    this.TemplateRoles != null &&
                    this.TemplateRoles.SequenceEqual(other.TemplateRoles)
                ) && 
                (
                    this.TemplatesUri == other.TemplatesUri ||
                    this.TemplatesUri != null &&
                    this.TemplatesUri.Equals(other.TemplatesUri)
                ) && 
                (
                    this.TransactionId == other.TransactionId ||
                    this.TransactionId != null &&
                    this.TransactionId.Equals(other.TransactionId)
                ) && 
                (
                    this.UseDisclosure == other.UseDisclosure ||
                    this.UseDisclosure != null &&
                    this.UseDisclosure.Equals(other.UseDisclosure)
                ) && 
                (
                    this.USigState == other.USigState ||
                    this.USigState != null &&
                    this.USigState.Equals(other.USigState)
                ) && 
                (
                    this.VoidedDateTime == other.VoidedDateTime ||
                    this.VoidedDateTime != null &&
                    this.VoidedDateTime.Equals(other.VoidedDateTime)
                ) && 
                (
                    this.VoidedReason == other.VoidedReason ||
                    this.VoidedReason != null &&
                    this.VoidedReason.Equals(other.VoidedReason)
                ) && 
                (
                    this.Workflow == other.Workflow ||
                    this.Workflow != null &&
                    this.Workflow.Equals(other.Workflow)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessControlListBase64 != null)
                    hash = hash * 59 + this.AccessControlListBase64.GetHashCode();
                if (this.Accessibility != null)
                    hash = hash * 59 + this.Accessibility.GetHashCode();
                if (this.AllowComments != null)
                    hash = hash * 59 + this.AllowComments.GetHashCode();
                if (this.AllowMarkup != null)
                    hash = hash * 59 + this.AllowMarkup.GetHashCode();
                if (this.AllowReassign != null)
                    hash = hash * 59 + this.AllowReassign.GetHashCode();
                if (this.AllowRecipientRecursion != null)
                    hash = hash * 59 + this.AllowRecipientRecursion.GetHashCode();
                if (this.AllowViewHistory != null)
                    hash = hash * 59 + this.AllowViewHistory.GetHashCode();
                if (this.AnySigner != null)
                    hash = hash * 59 + this.AnySigner.GetHashCode();
                if (this.Asynchronous != null)
                    hash = hash * 59 + this.Asynchronous.GetHashCode();
                if (this.Attachments != null)
                    hash = hash * 59 + this.Attachments.GetHashCode();
                if (this.AttachmentsUri != null)
                    hash = hash * 59 + this.AttachmentsUri.GetHashCode();
                if (this.AuthoritativeCopy != null)
                    hash = hash * 59 + this.AuthoritativeCopy.GetHashCode();
                if (this.AuthoritativeCopyDefault != null)
                    hash = hash * 59 + this.AuthoritativeCopyDefault.GetHashCode();
                if (this.AutoNavigation != null)
                    hash = hash * 59 + this.AutoNavigation.GetHashCode();
                if (this.BrandId != null)
                    hash = hash * 59 + this.BrandId.GetHashCode();
                if (this.BrandLock != null)
                    hash = hash * 59 + this.BrandLock.GetHashCode();
                if (this.BurnDefaultTabData != null)
                    hash = hash * 59 + this.BurnDefaultTabData.GetHashCode();
                if (this.CertificateUri != null)
                    hash = hash * 59 + this.CertificateUri.GetHashCode();
                if (this.CompletedDateTime != null)
                    hash = hash * 59 + this.CompletedDateTime.GetHashCode();
                if (this.CompositeTemplates != null)
                    hash = hash * 59 + this.CompositeTemplates.GetHashCode();
                if (this.CopyRecipientData != null)
                    hash = hash * 59 + this.CopyRecipientData.GetHashCode();
                if (this.CreatedDateTime != null)
                    hash = hash * 59 + this.CreatedDateTime.GetHashCode();
                if (this.CustomFields != null)
                    hash = hash * 59 + this.CustomFields.GetHashCode();
                if (this.CustomFieldsUri != null)
                    hash = hash * 59 + this.CustomFieldsUri.GetHashCode();
                if (this.DeclinedDateTime != null)
                    hash = hash * 59 + this.DeclinedDateTime.GetHashCode();
                if (this.DeletedDateTime != null)
                    hash = hash * 59 + this.DeletedDateTime.GetHashCode();
                if (this.DeliveredDateTime != null)
                    hash = hash * 59 + this.DeliveredDateTime.GetHashCode();
                if (this.DisableResponsiveDocument != null)
                    hash = hash * 59 + this.DisableResponsiveDocument.GetHashCode();
                if (this.DocumentBase64 != null)
                    hash = hash * 59 + this.DocumentBase64.GetHashCode();
                if (this.Documents != null)
                    hash = hash * 59 + this.Documents.GetHashCode();
                if (this.DocumentsCombinedUri != null)
                    hash = hash * 59 + this.DocumentsCombinedUri.GetHashCode();
                if (this.DocumentsUri != null)
                    hash = hash * 59 + this.DocumentsUri.GetHashCode();
                if (this.EmailBlurb != null)
                    hash = hash * 59 + this.EmailBlurb.GetHashCode();
                if (this.EmailSettings != null)
                    hash = hash * 59 + this.EmailSettings.GetHashCode();
                if (this.EmailSubject != null)
                    hash = hash * 59 + this.EmailSubject.GetHashCode();
                if (this.EnableWetSign != null)
                    hash = hash * 59 + this.EnableWetSign.GetHashCode();
                if (this.EnforceSignerVisibility != null)
                    hash = hash * 59 + this.EnforceSignerVisibility.GetHashCode();
                if (this.EnvelopeAttachments != null)
                    hash = hash * 59 + this.EnvelopeAttachments.GetHashCode();
                if (this.EnvelopeCustomMetadata != null)
                    hash = hash * 59 + this.EnvelopeCustomMetadata.GetHashCode();
                if (this.EnvelopeDocuments != null)
                    hash = hash * 59 + this.EnvelopeDocuments.GetHashCode();
                if (this.EnvelopeId != null)
                    hash = hash * 59 + this.EnvelopeId.GetHashCode();
                if (this.EnvelopeIdStamping != null)
                    hash = hash * 59 + this.EnvelopeIdStamping.GetHashCode();
                if (this.EnvelopeLocation != null)
                    hash = hash * 59 + this.EnvelopeLocation.GetHashCode();
                if (this.EnvelopeMetadata != null)
                    hash = hash * 59 + this.EnvelopeMetadata.GetHashCode();
                if (this.EnvelopeUri != null)
                    hash = hash * 59 + this.EnvelopeUri.GetHashCode();
                if (this.EventNotification != null)
                    hash = hash * 59 + this.EventNotification.GetHashCode();
                if (this.EventNotifications != null)
                    hash = hash * 59 + this.EventNotifications.GetHashCode();
                if (this.ExpireAfter != null)
                    hash = hash * 59 + this.ExpireAfter.GetHashCode();
                if (this.ExpireDateTime != null)
                    hash = hash * 59 + this.ExpireDateTime.GetHashCode();
                if (this.ExpireEnabled != null)
                    hash = hash * 59 + this.ExpireEnabled.GetHashCode();
                if (this.ExternalEnvelopeId != null)
                    hash = hash * 59 + this.ExternalEnvelopeId.GetHashCode();
                if (this.Folders != null)
                    hash = hash * 59 + this.Folders.GetHashCode();
                if (this.HasComments != null)
                    hash = hash * 59 + this.HasComments.GetHashCode();
                if (this.HasFormDataChanged != null)
                    hash = hash * 59 + this.HasFormDataChanged.GetHashCode();
                if (this.HasWavFile != null)
                    hash = hash * 59 + this.HasWavFile.GetHashCode();
                if (this.Holder != null)
                    hash = hash * 59 + this.Holder.GetHashCode();
                if (this.InitialSentDateTime != null)
                    hash = hash * 59 + this.InitialSentDateTime.GetHashCode();
                if (this.Is21CFRPart11 != null)
                    hash = hash * 59 + this.Is21CFRPart11.GetHashCode();
                if (this.IsDynamicEnvelope != null)
                    hash = hash * 59 + this.IsDynamicEnvelope.GetHashCode();
                if (this.IsSignatureProviderEnvelope != null)
                    hash = hash * 59 + this.IsSignatureProviderEnvelope.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hash = hash * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.LockInformation != null)
                    hash = hash * 59 + this.LockInformation.GetHashCode();
                if (this.MessageLock != null)
                    hash = hash * 59 + this.MessageLock.GetHashCode();
                if (this.Notification != null)
                    hash = hash * 59 + this.Notification.GetHashCode();
                if (this.NotificationUri != null)
                    hash = hash * 59 + this.NotificationUri.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.PowerForm != null)
                    hash = hash * 59 + this.PowerForm.GetHashCode();
                if (this.PurgeCompletedDate != null)
                    hash = hash * 59 + this.PurgeCompletedDate.GetHashCode();
                if (this.PurgeRequestDate != null)
                    hash = hash * 59 + this.PurgeRequestDate.GetHashCode();
                if (this.PurgeState != null)
                    hash = hash * 59 + this.PurgeState.GetHashCode();
                if (this.Recipients != null)
                    hash = hash * 59 + this.Recipients.GetHashCode();
                if (this.RecipientsLock != null)
                    hash = hash * 59 + this.RecipientsLock.GetHashCode();
                if (this.RecipientsUri != null)
                    hash = hash * 59 + this.RecipientsUri.GetHashCode();
                if (this.RecipientViewRequest != null)
                    hash = hash * 59 + this.RecipientViewRequest.GetHashCode();
                if (this.Sender != null)
                    hash = hash * 59 + this.Sender.GetHashCode();
                if (this.SentDateTime != null)
                    hash = hash * 59 + this.SentDateTime.GetHashCode();
                if (this.SignerCanSignOnMobile != null)
                    hash = hash * 59 + this.SignerCanSignOnMobile.GetHashCode();
                if (this.SigningLocation != null)
                    hash = hash * 59 + this.SigningLocation.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusChangedDateTime != null)
                    hash = hash * 59 + this.StatusChangedDateTime.GetHashCode();
                if (this.StatusDateTime != null)
                    hash = hash * 59 + this.StatusDateTime.GetHashCode();
                if (this.TemplateId != null)
                    hash = hash * 59 + this.TemplateId.GetHashCode();
                if (this.TemplateRoles != null)
                    hash = hash * 59 + this.TemplateRoles.GetHashCode();
                if (this.TemplatesUri != null)
                    hash = hash * 59 + this.TemplatesUri.GetHashCode();
                if (this.TransactionId != null)
                    hash = hash * 59 + this.TransactionId.GetHashCode();
                if (this.UseDisclosure != null)
                    hash = hash * 59 + this.UseDisclosure.GetHashCode();
                if (this.USigState != null)
                    hash = hash * 59 + this.USigState.GetHashCode();
                if (this.VoidedDateTime != null)
                    hash = hash * 59 + this.VoidedDateTime.GetHashCode();
                if (this.VoidedReason != null)
                    hash = hash * 59 + this.VoidedReason.GetHashCode();
                if (this.Workflow != null)
                    hash = hash * 59 + this.Workflow.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
