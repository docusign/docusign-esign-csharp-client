/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// This object contains details about the envelope document.
    /// </summary>
    [DataContract]
    public partial class EnvelopeDocument :  IEquatable<EnvelopeDocument>, IValidatableObject
    {
        public EnvelopeDocument()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeDocument" /> class.
        /// </summary>
        /// <param name="AddedRecipientIds">AddedRecipientIds.</param>
        /// <param name="AgreementType">AgreementType.</param>
        /// <param name="AgreementTypeSource">AgreementTypeSource.</param>
        /// <param name="AttachmentTabId">AttachmentTabId.</param>
        /// <param name="AuthoritativeCopy">Specifies the Authoritative copy feature. If set to true the Authoritative copy feature is enabled..</param>
        /// <param name="AuthoritativeCopyMetadata">Metadata that indicates if the sender can edit the &#x60;authoritativeCopy&#x60; property. Not applicable for template documents..</param>
        /// <param name="AvailableDocumentTypes">AvailableDocumentTypes.</param>
        /// <param name="ContainsPdfFormFields">ContainsPdfFormFields.</param>
        /// <param name="Display">Display.</param>
        /// <param name="DisplayMetadata">Metadata that indicates if the sender can edit the &#x60;display&#x60; property. Not applicable for template documents..</param>
        /// <param name="DocGenDocumentStatus">DocGenDocumentStatus.</param>
        /// <param name="DocGenErrors">DocGenErrors.</param>
        /// <param name="DocGenFormFields">DocGenFormFields.</param>
        /// <param name="DocumentBase64">DocumentBase64.</param>
        /// <param name="DocumentFields">DocumentFields.</param>
        /// <param name="DocumentId">Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute..</param>
        /// <param name="DocumentIdGuid">DocumentIdGuid.</param>
        /// <param name="DocumentTemplateId">DocumentTemplateId.</param>
        /// <param name="ErrorDetails">Array or errors..</param>
        /// <param name="HasDigitalSignature">HasDigitalSignature.</param>
        /// <param name="IncludeInDownload">IncludeInDownload.</param>
        /// <param name="IncludeInDownloadMetadata">Metadata that indicates if the sender can edit the &#x60;includeInDownload&#x60; property. Not applicable for template documents..</param>
        /// <param name="IsAceGenDocument">IsAceGenDocument.</param>
        /// <param name="IsDocGenDocument">IsDocGenDocument.</param>
        /// <param name="IsExternallyAvailable">IsExternallyAvailable.</param>
        /// <param name="IsFlattened">IsFlattened.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NameMetadata">Metadata that indicates if the sender can edit the &#x60;name&#x60; property. Not applicable for template documents..</param>
        /// <param name="Order">Order.</param>
        /// <param name="Pages">Pages.</param>
        /// <param name="SignerMustAcknowledge">SignerMustAcknowledge.</param>
        /// <param name="SignerMustAcknowledgeMetadata">Metadata that indicates if the sender can edit the &#x60;signerMustAcknowledge&#x60; property. Not applicable for template documents..</param>
        /// <param name="SizeBytes">SizeBytes.</param>
        /// <param name="TemplateLocked">When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. .</param>
        /// <param name="TemplateRequired">When set to **true**, the sender may not remove the recipient. Used only when working with template recipients..</param>
        /// <param name="Type">Type.</param>
        /// <param name="Uri">Uri.</param>
        public EnvelopeDocument(List<string> AddedRecipientIds = default(List<string>), string AgreementType = default(string), string AgreementTypeSource = default(string), string AttachmentTabId = default(string), string AuthoritativeCopy = default(string), PropertyMetadata AuthoritativeCopyMetadata = default(PropertyMetadata), List<SignatureType> AvailableDocumentTypes = default(List<SignatureType>), string ContainsPdfFormFields = default(string), string Display = default(string), PropertyMetadata DisplayMetadata = default(PropertyMetadata), string DocGenDocumentStatus = default(string), List<DocGenSyntaxError> DocGenErrors = default(List<DocGenSyntaxError>), List<DocGenFormField> DocGenFormFields = default(List<DocGenFormField>), string DocumentBase64 = default(string), List<NameValue> DocumentFields = default(List<NameValue>), string DocumentId = default(string), string DocumentIdGuid = default(string), string DocumentTemplateId = default(string), ErrorDetails ErrorDetails = default(ErrorDetails), string HasDigitalSignature = default(string), string IncludeInDownload = default(string), PropertyMetadata IncludeInDownloadMetadata = default(PropertyMetadata), string IsAceGenDocument = default(string), string IsDocGenDocument = default(string), string IsExternallyAvailable = default(string), string IsFlattened = default(string), string Name = default(string), PropertyMetadata NameMetadata = default(PropertyMetadata), string Order = default(string), List<Page> Pages = default(List<Page>), string SignerMustAcknowledge = default(string), PropertyMetadata SignerMustAcknowledgeMetadata = default(PropertyMetadata), string SizeBytes = default(string), string TemplateLocked = default(string), string TemplateRequired = default(string), string Type = default(string), string Uri = default(string))
        {
            this.AddedRecipientIds = AddedRecipientIds;
            this.AgreementType = AgreementType;
            this.AgreementTypeSource = AgreementTypeSource;
            this.AttachmentTabId = AttachmentTabId;
            this.AuthoritativeCopy = AuthoritativeCopy;
            this.AuthoritativeCopyMetadata = AuthoritativeCopyMetadata;
            this.AvailableDocumentTypes = AvailableDocumentTypes;
            this.ContainsPdfFormFields = ContainsPdfFormFields;
            this.Display = Display;
            this.DisplayMetadata = DisplayMetadata;
            this.DocGenDocumentStatus = DocGenDocumentStatus;
            this.DocGenErrors = DocGenErrors;
            this.DocGenFormFields = DocGenFormFields;
            this.DocumentBase64 = DocumentBase64;
            this.DocumentFields = DocumentFields;
            this.DocumentId = DocumentId;
            this.DocumentIdGuid = DocumentIdGuid;
            this.DocumentTemplateId = DocumentTemplateId;
            this.ErrorDetails = ErrorDetails;
            this.HasDigitalSignature = HasDigitalSignature;
            this.IncludeInDownload = IncludeInDownload;
            this.IncludeInDownloadMetadata = IncludeInDownloadMetadata;
            this.IsAceGenDocument = IsAceGenDocument;
            this.IsDocGenDocument = IsDocGenDocument;
            this.IsExternallyAvailable = IsExternallyAvailable;
            this.IsFlattened = IsFlattened;
            this.Name = Name;
            this.NameMetadata = NameMetadata;
            this.Order = Order;
            this.Pages = Pages;
            this.SignerMustAcknowledge = SignerMustAcknowledge;
            this.SignerMustAcknowledgeMetadata = SignerMustAcknowledgeMetadata;
            this.SizeBytes = SizeBytes;
            this.TemplateLocked = TemplateLocked;
            this.TemplateRequired = TemplateRequired;
            this.Type = Type;
            this.Uri = Uri;
        }
        
        /// <summary>
        /// Gets or Sets AddedRecipientIds
        /// </summary>
        [DataMember(Name="addedRecipientIds", EmitDefaultValue=false)]
        public List<string> AddedRecipientIds { get; set; }
        /// <summary>
        /// Gets or Sets AgreementType
        /// </summary>
        [DataMember(Name="agreementType", EmitDefaultValue=false)]
        public string AgreementType { get; set; }
        /// <summary>
        /// Gets or Sets AgreementTypeSource
        /// </summary>
        [DataMember(Name="agreementTypeSource", EmitDefaultValue=false)]
        public string AgreementTypeSource { get; set; }
        /// <summary>
        /// Gets or Sets AttachmentTabId
        /// </summary>
        [DataMember(Name="attachmentTabId", EmitDefaultValue=false)]
        public string AttachmentTabId { get; set; }
        /// <summary>
        /// Specifies the Authoritative copy feature. If set to true the Authoritative copy feature is enabled.
        /// </summary>
        /// <value>Specifies the Authoritative copy feature. If set to true the Authoritative copy feature is enabled.</value>
        [DataMember(Name="authoritativeCopy", EmitDefaultValue=false)]
        public string AuthoritativeCopy { get; set; }
        /// <summary>
        /// Metadata that indicates if the sender can edit the &#x60;authoritativeCopy&#x60; property. Not applicable for template documents.
        /// </summary>
        /// <value>Metadata that indicates if the sender can edit the &#x60;authoritativeCopy&#x60; property. Not applicable for template documents.</value>
        [DataMember(Name="authoritativeCopyMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AuthoritativeCopyMetadata { get; set; }
        /// <summary>
        /// Gets or Sets AvailableDocumentTypes
        /// </summary>
        [DataMember(Name="availableDocumentTypes", EmitDefaultValue=false)]
        public List<SignatureType> AvailableDocumentTypes { get; set; }
        /// <summary>
        /// Gets or Sets ContainsPdfFormFields
        /// </summary>
        [DataMember(Name="containsPdfFormFields", EmitDefaultValue=false)]
        public string ContainsPdfFormFields { get; set; }
        /// <summary>
        /// Gets or Sets Display
        /// </summary>
        [DataMember(Name="display", EmitDefaultValue=false)]
        public string Display { get; set; }
        /// <summary>
        /// Metadata that indicates if the sender can edit the &#x60;display&#x60; property. Not applicable for template documents.
        /// </summary>
        /// <value>Metadata that indicates if the sender can edit the &#x60;display&#x60; property. Not applicable for template documents.</value>
        [DataMember(Name="displayMetadata", EmitDefaultValue=false)]
        public PropertyMetadata DisplayMetadata { get; set; }
        /// <summary>
        /// Gets or Sets DocGenDocumentStatus
        /// </summary>
        [DataMember(Name="docGenDocumentStatus", EmitDefaultValue=false)]
        public string DocGenDocumentStatus { get; set; }
        /// <summary>
        /// Gets or Sets DocGenErrors
        /// </summary>
        [DataMember(Name="docGenErrors", EmitDefaultValue=false)]
        public List<DocGenSyntaxError> DocGenErrors { get; set; }
        /// <summary>
        /// Gets or Sets DocGenFormFields
        /// </summary>
        [DataMember(Name="docGenFormFields", EmitDefaultValue=false)]
        public List<DocGenFormField> DocGenFormFields { get; set; }
        /// <summary>
        /// Gets or Sets DocumentBase64
        /// </summary>
        [DataMember(Name="documentBase64", EmitDefaultValue=false)]
        public string DocumentBase64 { get; set; }
        /// <summary>
        /// Gets or Sets DocumentFields
        /// </summary>
        [DataMember(Name="documentFields", EmitDefaultValue=false)]
        public List<NameValue> DocumentFields { get; set; }
        /// <summary>
        /// Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.
        /// </summary>
        /// <value>Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.</value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public string DocumentId { get; set; }
        /// <summary>
        /// Gets or Sets DocumentIdGuid
        /// </summary>
        [DataMember(Name="documentIdGuid", EmitDefaultValue=false)]
        public string DocumentIdGuid { get; set; }
        /// <summary>
        /// Gets or Sets DocumentTemplateId
        /// </summary>
        [DataMember(Name="documentTemplateId", EmitDefaultValue=false)]
        public string DocumentTemplateId { get; set; }
        /// <summary>
        /// Array or errors.
        /// </summary>
        /// <value>Array or errors.</value>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// Gets or Sets HasDigitalSignature
        /// </summary>
        [DataMember(Name="hasDigitalSignature", EmitDefaultValue=false)]
        public string HasDigitalSignature { get; set; }
        /// <summary>
        /// Gets or Sets IncludeInDownload
        /// </summary>
        [DataMember(Name="includeInDownload", EmitDefaultValue=false)]
        public string IncludeInDownload { get; set; }
        /// <summary>
        /// Metadata that indicates if the sender can edit the &#x60;includeInDownload&#x60; property. Not applicable for template documents.
        /// </summary>
        /// <value>Metadata that indicates if the sender can edit the &#x60;includeInDownload&#x60; property. Not applicable for template documents.</value>
        [DataMember(Name="includeInDownloadMetadata", EmitDefaultValue=false)]
        public PropertyMetadata IncludeInDownloadMetadata { get; set; }
        /// <summary>
        /// Gets or Sets IsAceGenDocument
        /// </summary>
        [DataMember(Name="isAceGenDocument", EmitDefaultValue=false)]
        public string IsAceGenDocument { get; set; }
        /// <summary>
        /// Gets or Sets IsDocGenDocument
        /// </summary>
        [DataMember(Name="isDocGenDocument", EmitDefaultValue=false)]
        public string IsDocGenDocument { get; set; }
        /// <summary>
        /// Gets or Sets IsExternallyAvailable
        /// </summary>
        [DataMember(Name="isExternallyAvailable", EmitDefaultValue=false)]
        public string IsExternallyAvailable { get; set; }
        /// <summary>
        /// Gets or Sets IsFlattened
        /// </summary>
        [DataMember(Name="isFlattened", EmitDefaultValue=false)]
        public string IsFlattened { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Metadata that indicates if the sender can edit the &#x60;name&#x60; property. Not applicable for template documents.
        /// </summary>
        /// <value>Metadata that indicates if the sender can edit the &#x60;name&#x60; property. Not applicable for template documents.</value>
        [DataMember(Name="nameMetadata", EmitDefaultValue=false)]
        public PropertyMetadata NameMetadata { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public string Order { get; set; }
        /// <summary>
        /// Gets or Sets Pages
        /// </summary>
        [DataMember(Name="pages", EmitDefaultValue=false)]
        public List<Page> Pages { get; set; }
        /// <summary>
        /// Gets or Sets SignerMustAcknowledge
        /// </summary>
        [DataMember(Name="signerMustAcknowledge", EmitDefaultValue=false)]
        public string SignerMustAcknowledge { get; set; }
        /// <summary>
        /// Metadata that indicates if the sender can edit the &#x60;signerMustAcknowledge&#x60; property. Not applicable for template documents.
        /// </summary>
        /// <value>Metadata that indicates if the sender can edit the &#x60;signerMustAcknowledge&#x60; property. Not applicable for template documents.</value>
        [DataMember(Name="signerMustAcknowledgeMetadata", EmitDefaultValue=false)]
        public PropertyMetadata SignerMustAcknowledgeMetadata { get; set; }
        /// <summary>
        /// Gets or Sets SizeBytes
        /// </summary>
        [DataMember(Name="sizeBytes", EmitDefaultValue=false)]
        public string SizeBytes { get; set; }
        /// <summary>
        /// When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
        /// </summary>
        /// <value>When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. </value>
        [DataMember(Name="templateLocked", EmitDefaultValue=false)]
        public string TemplateLocked { get; set; }
        /// <summary>
        /// When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
        /// </summary>
        /// <value>When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.</value>
        [DataMember(Name="templateRequired", EmitDefaultValue=false)]
        public string TemplateRequired { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvelopeDocument {\n");
            sb.Append("  AddedRecipientIds: ").Append(AddedRecipientIds).Append("\n");
            sb.Append("  AgreementType: ").Append(AgreementType).Append("\n");
            sb.Append("  AgreementTypeSource: ").Append(AgreementTypeSource).Append("\n");
            sb.Append("  AttachmentTabId: ").Append(AttachmentTabId).Append("\n");
            sb.Append("  AuthoritativeCopy: ").Append(AuthoritativeCopy).Append("\n");
            sb.Append("  AuthoritativeCopyMetadata: ").Append(AuthoritativeCopyMetadata).Append("\n");
            sb.Append("  AvailableDocumentTypes: ").Append(AvailableDocumentTypes).Append("\n");
            sb.Append("  ContainsPdfFormFields: ").Append(ContainsPdfFormFields).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  DisplayMetadata: ").Append(DisplayMetadata).Append("\n");
            sb.Append("  DocGenDocumentStatus: ").Append(DocGenDocumentStatus).Append("\n");
            sb.Append("  DocGenErrors: ").Append(DocGenErrors).Append("\n");
            sb.Append("  DocGenFormFields: ").Append(DocGenFormFields).Append("\n");
            sb.Append("  DocumentBase64: ").Append(DocumentBase64).Append("\n");
            sb.Append("  DocumentFields: ").Append(DocumentFields).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DocumentIdGuid: ").Append(DocumentIdGuid).Append("\n");
            sb.Append("  DocumentTemplateId: ").Append(DocumentTemplateId).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  HasDigitalSignature: ").Append(HasDigitalSignature).Append("\n");
            sb.Append("  IncludeInDownload: ").Append(IncludeInDownload).Append("\n");
            sb.Append("  IncludeInDownloadMetadata: ").Append(IncludeInDownloadMetadata).Append("\n");
            sb.Append("  IsAceGenDocument: ").Append(IsAceGenDocument).Append("\n");
            sb.Append("  IsDocGenDocument: ").Append(IsDocGenDocument).Append("\n");
            sb.Append("  IsExternallyAvailable: ").Append(IsExternallyAvailable).Append("\n");
            sb.Append("  IsFlattened: ").Append(IsFlattened).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameMetadata: ").Append(NameMetadata).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  SignerMustAcknowledge: ").Append(SignerMustAcknowledge).Append("\n");
            sb.Append("  SignerMustAcknowledgeMetadata: ").Append(SignerMustAcknowledgeMetadata).Append("\n");
            sb.Append("  SizeBytes: ").Append(SizeBytes).Append("\n");
            sb.Append("  TemplateLocked: ").Append(TemplateLocked).Append("\n");
            sb.Append("  TemplateRequired: ").Append(TemplateRequired).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EnvelopeDocument);
        }

        /// <summary>
        /// Returns true if EnvelopeDocument instances are equal
        /// </summary>
        /// <param name="other">Instance of EnvelopeDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvelopeDocument other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AddedRecipientIds == other.AddedRecipientIds ||
                    this.AddedRecipientIds != null &&
                    this.AddedRecipientIds.SequenceEqual(other.AddedRecipientIds)
                ) && 
                (
                    this.AgreementType == other.AgreementType ||
                    this.AgreementType != null &&
                    this.AgreementType.Equals(other.AgreementType)
                ) && 
                (
                    this.AgreementTypeSource == other.AgreementTypeSource ||
                    this.AgreementTypeSource != null &&
                    this.AgreementTypeSource.Equals(other.AgreementTypeSource)
                ) && 
                (
                    this.AttachmentTabId == other.AttachmentTabId ||
                    this.AttachmentTabId != null &&
                    this.AttachmentTabId.Equals(other.AttachmentTabId)
                ) && 
                (
                    this.AuthoritativeCopy == other.AuthoritativeCopy ||
                    this.AuthoritativeCopy != null &&
                    this.AuthoritativeCopy.Equals(other.AuthoritativeCopy)
                ) && 
                (
                    this.AuthoritativeCopyMetadata == other.AuthoritativeCopyMetadata ||
                    this.AuthoritativeCopyMetadata != null &&
                    this.AuthoritativeCopyMetadata.Equals(other.AuthoritativeCopyMetadata)
                ) && 
                (
                    this.AvailableDocumentTypes == other.AvailableDocumentTypes ||
                    this.AvailableDocumentTypes != null &&
                    this.AvailableDocumentTypes.SequenceEqual(other.AvailableDocumentTypes)
                ) && 
                (
                    this.ContainsPdfFormFields == other.ContainsPdfFormFields ||
                    this.ContainsPdfFormFields != null &&
                    this.ContainsPdfFormFields.Equals(other.ContainsPdfFormFields)
                ) && 
                (
                    this.Display == other.Display ||
                    this.Display != null &&
                    this.Display.Equals(other.Display)
                ) && 
                (
                    this.DisplayMetadata == other.DisplayMetadata ||
                    this.DisplayMetadata != null &&
                    this.DisplayMetadata.Equals(other.DisplayMetadata)
                ) && 
                (
                    this.DocGenDocumentStatus == other.DocGenDocumentStatus ||
                    this.DocGenDocumentStatus != null &&
                    this.DocGenDocumentStatus.Equals(other.DocGenDocumentStatus)
                ) && 
                (
                    this.DocGenErrors == other.DocGenErrors ||
                    this.DocGenErrors != null &&
                    this.DocGenErrors.SequenceEqual(other.DocGenErrors)
                ) && 
                (
                    this.DocGenFormFields == other.DocGenFormFields ||
                    this.DocGenFormFields != null &&
                    this.DocGenFormFields.SequenceEqual(other.DocGenFormFields)
                ) && 
                (
                    this.DocumentBase64 == other.DocumentBase64 ||
                    this.DocumentBase64 != null &&
                    this.DocumentBase64.Equals(other.DocumentBase64)
                ) && 
                (
                    this.DocumentFields == other.DocumentFields ||
                    this.DocumentFields != null &&
                    this.DocumentFields.SequenceEqual(other.DocumentFields)
                ) && 
                (
                    this.DocumentId == other.DocumentId ||
                    this.DocumentId != null &&
                    this.DocumentId.Equals(other.DocumentId)
                ) && 
                (
                    this.DocumentIdGuid == other.DocumentIdGuid ||
                    this.DocumentIdGuid != null &&
                    this.DocumentIdGuid.Equals(other.DocumentIdGuid)
                ) && 
                (
                    this.DocumentTemplateId == other.DocumentTemplateId ||
                    this.DocumentTemplateId != null &&
                    this.DocumentTemplateId.Equals(other.DocumentTemplateId)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.HasDigitalSignature == other.HasDigitalSignature ||
                    this.HasDigitalSignature != null &&
                    this.HasDigitalSignature.Equals(other.HasDigitalSignature)
                ) && 
                (
                    this.IncludeInDownload == other.IncludeInDownload ||
                    this.IncludeInDownload != null &&
                    this.IncludeInDownload.Equals(other.IncludeInDownload)
                ) && 
                (
                    this.IncludeInDownloadMetadata == other.IncludeInDownloadMetadata ||
                    this.IncludeInDownloadMetadata != null &&
                    this.IncludeInDownloadMetadata.Equals(other.IncludeInDownloadMetadata)
                ) && 
                (
                    this.IsAceGenDocument == other.IsAceGenDocument ||
                    this.IsAceGenDocument != null &&
                    this.IsAceGenDocument.Equals(other.IsAceGenDocument)
                ) && 
                (
                    this.IsDocGenDocument == other.IsDocGenDocument ||
                    this.IsDocGenDocument != null &&
                    this.IsDocGenDocument.Equals(other.IsDocGenDocument)
                ) && 
                (
                    this.IsExternallyAvailable == other.IsExternallyAvailable ||
                    this.IsExternallyAvailable != null &&
                    this.IsExternallyAvailable.Equals(other.IsExternallyAvailable)
                ) && 
                (
                    this.IsFlattened == other.IsFlattened ||
                    this.IsFlattened != null &&
                    this.IsFlattened.Equals(other.IsFlattened)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NameMetadata == other.NameMetadata ||
                    this.NameMetadata != null &&
                    this.NameMetadata.Equals(other.NameMetadata)
                ) && 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.Pages == other.Pages ||
                    this.Pages != null &&
                    this.Pages.SequenceEqual(other.Pages)
                ) && 
                (
                    this.SignerMustAcknowledge == other.SignerMustAcknowledge ||
                    this.SignerMustAcknowledge != null &&
                    this.SignerMustAcknowledge.Equals(other.SignerMustAcknowledge)
                ) && 
                (
                    this.SignerMustAcknowledgeMetadata == other.SignerMustAcknowledgeMetadata ||
                    this.SignerMustAcknowledgeMetadata != null &&
                    this.SignerMustAcknowledgeMetadata.Equals(other.SignerMustAcknowledgeMetadata)
                ) && 
                (
                    this.SizeBytes == other.SizeBytes ||
                    this.SizeBytes != null &&
                    this.SizeBytes.Equals(other.SizeBytes)
                ) && 
                (
                    this.TemplateLocked == other.TemplateLocked ||
                    this.TemplateLocked != null &&
                    this.TemplateLocked.Equals(other.TemplateLocked)
                ) && 
                (
                    this.TemplateRequired == other.TemplateRequired ||
                    this.TemplateRequired != null &&
                    this.TemplateRequired.Equals(other.TemplateRequired)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Uri == other.Uri ||
                    this.Uri != null &&
                    this.Uri.Equals(other.Uri)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AddedRecipientIds != null)
                    hash = hash * 59 + this.AddedRecipientIds.GetHashCode();
                if (this.AgreementType != null)
                    hash = hash * 59 + this.AgreementType.GetHashCode();
                if (this.AgreementTypeSource != null)
                    hash = hash * 59 + this.AgreementTypeSource.GetHashCode();
                if (this.AttachmentTabId != null)
                    hash = hash * 59 + this.AttachmentTabId.GetHashCode();
                if (this.AuthoritativeCopy != null)
                    hash = hash * 59 + this.AuthoritativeCopy.GetHashCode();
                if (this.AuthoritativeCopyMetadata != null)
                    hash = hash * 59 + this.AuthoritativeCopyMetadata.GetHashCode();
                if (this.AvailableDocumentTypes != null)
                    hash = hash * 59 + this.AvailableDocumentTypes.GetHashCode();
                if (this.ContainsPdfFormFields != null)
                    hash = hash * 59 + this.ContainsPdfFormFields.GetHashCode();
                if (this.Display != null)
                    hash = hash * 59 + this.Display.GetHashCode();
                if (this.DisplayMetadata != null)
                    hash = hash * 59 + this.DisplayMetadata.GetHashCode();
                if (this.DocGenDocumentStatus != null)
                    hash = hash * 59 + this.DocGenDocumentStatus.GetHashCode();
                if (this.DocGenErrors != null)
                    hash = hash * 59 + this.DocGenErrors.GetHashCode();
                if (this.DocGenFormFields != null)
                    hash = hash * 59 + this.DocGenFormFields.GetHashCode();
                if (this.DocumentBase64 != null)
                    hash = hash * 59 + this.DocumentBase64.GetHashCode();
                if (this.DocumentFields != null)
                    hash = hash * 59 + this.DocumentFields.GetHashCode();
                if (this.DocumentId != null)
                    hash = hash * 59 + this.DocumentId.GetHashCode();
                if (this.DocumentIdGuid != null)
                    hash = hash * 59 + this.DocumentIdGuid.GetHashCode();
                if (this.DocumentTemplateId != null)
                    hash = hash * 59 + this.DocumentTemplateId.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.HasDigitalSignature != null)
                    hash = hash * 59 + this.HasDigitalSignature.GetHashCode();
                if (this.IncludeInDownload != null)
                    hash = hash * 59 + this.IncludeInDownload.GetHashCode();
                if (this.IncludeInDownloadMetadata != null)
                    hash = hash * 59 + this.IncludeInDownloadMetadata.GetHashCode();
                if (this.IsAceGenDocument != null)
                    hash = hash * 59 + this.IsAceGenDocument.GetHashCode();
                if (this.IsDocGenDocument != null)
                    hash = hash * 59 + this.IsDocGenDocument.GetHashCode();
                if (this.IsExternallyAvailable != null)
                    hash = hash * 59 + this.IsExternallyAvailable.GetHashCode();
                if (this.IsFlattened != null)
                    hash = hash * 59 + this.IsFlattened.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NameMetadata != null)
                    hash = hash * 59 + this.NameMetadata.GetHashCode();
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.Pages != null)
                    hash = hash * 59 + this.Pages.GetHashCode();
                if (this.SignerMustAcknowledge != null)
                    hash = hash * 59 + this.SignerMustAcknowledge.GetHashCode();
                if (this.SignerMustAcknowledgeMetadata != null)
                    hash = hash * 59 + this.SignerMustAcknowledgeMetadata.GetHashCode();
                if (this.SizeBytes != null)
                    hash = hash * 59 + this.SizeBytes.GetHashCode();
                if (this.TemplateLocked != null)
                    hash = hash * 59 + this.TemplateLocked.GetHashCode();
                if (this.TemplateRequired != null)
                    hash = hash * 59 + this.TemplateRequired.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Uri != null)
                    hash = hash * 59 + this.Uri.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
