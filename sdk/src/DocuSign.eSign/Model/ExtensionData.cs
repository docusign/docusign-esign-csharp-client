/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// ExtensionData
    /// </summary>
    [DataContract]
    public partial class ExtensionData :  IEquatable<ExtensionData>, IValidatableObject
    {
        public ExtensionData()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionData" /> class.
        /// </summary>
        /// <param name="ActionContract">ActionContract.</param>
        /// <param name="ActionInputKey">ActionInputKey.</param>
        /// <param name="ActionName">ActionName.</param>
        /// <param name="ApplicationId">ApplicationId.</param>
        /// <param name="ApplicationName">ApplicationName.</param>
        /// <param name="ConnectedFieldsData">ConnectedFieldsData.</param>
        /// <param name="ConnectionInstances">ConnectionInstances.</param>
        /// <param name="ExtensionContract">ExtensionContract.</param>
        /// <param name="ExtensionGroupId">ExtensionGroupId.</param>
        /// <param name="ExtensionName">ExtensionName.</param>
        /// <param name="ExtensionPolicy">ExtensionPolicy.</param>
        /// <param name="PublisherName">PublisherName.</param>
        /// <param name="RequiredForExtension">RequiredForExtension.</param>
        public ExtensionData(string ActionContract = default(string), string ActionInputKey = default(string), string ActionName = default(string), string ApplicationId = default(string), string ApplicationName = default(string), ConnectedData ConnectedFieldsData = default(ConnectedData), List<ConnectionInstance> ConnectionInstances = default(List<ConnectionInstance>), string ExtensionContract = default(string), string ExtensionGroupId = default(string), string ExtensionName = default(string), string ExtensionPolicy = default(string), string PublisherName = default(string), string RequiredForExtension = default(string))
        {
            this.ActionContract = ActionContract;
            this.ActionInputKey = ActionInputKey;
            this.ActionName = ActionName;
            this.ApplicationId = ApplicationId;
            this.ApplicationName = ApplicationName;
            this.ConnectedFieldsData = ConnectedFieldsData;
            this.ConnectionInstances = ConnectionInstances;
            this.ExtensionContract = ExtensionContract;
            this.ExtensionGroupId = ExtensionGroupId;
            this.ExtensionName = ExtensionName;
            this.ExtensionPolicy = ExtensionPolicy;
            this.PublisherName = PublisherName;
            this.RequiredForExtension = RequiredForExtension;
        }
        
        /// <summary>
        /// Gets or Sets ActionContract
        /// </summary>
        [DataMember(Name="actionContract", EmitDefaultValue=false)]
        public string ActionContract { get; set; }
        /// <summary>
        /// Gets or Sets ActionInputKey
        /// </summary>
        [DataMember(Name="actionInputKey", EmitDefaultValue=false)]
        public string ActionInputKey { get; set; }
        /// <summary>
        /// Gets or Sets ActionName
        /// </summary>
        [DataMember(Name="actionName", EmitDefaultValue=false)]
        public string ActionName { get; set; }
        /// <summary>
        /// Gets or Sets ApplicationId
        /// </summary>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public string ApplicationId { get; set; }
        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="applicationName", EmitDefaultValue=false)]
        public string ApplicationName { get; set; }
        /// <summary>
        /// Gets or Sets ConnectedFieldsData
        /// </summary>
        [DataMember(Name="connectedFieldsData", EmitDefaultValue=false)]
        public ConnectedData ConnectedFieldsData { get; set; }
        /// <summary>
        /// Gets or Sets ConnectionInstances
        /// </summary>
        [DataMember(Name="connectionInstances", EmitDefaultValue=false)]
        public List<ConnectionInstance> ConnectionInstances { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionContract
        /// </summary>
        [DataMember(Name="extensionContract", EmitDefaultValue=false)]
        public string ExtensionContract { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionGroupId
        /// </summary>
        [DataMember(Name="extensionGroupId", EmitDefaultValue=false)]
        public string ExtensionGroupId { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionName
        /// </summary>
        [DataMember(Name="extensionName", EmitDefaultValue=false)]
        public string ExtensionName { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPolicy
        /// </summary>
        [DataMember(Name="extensionPolicy", EmitDefaultValue=false)]
        public string ExtensionPolicy { get; set; }
        /// <summary>
        /// Gets or Sets PublisherName
        /// </summary>
        [DataMember(Name="publisherName", EmitDefaultValue=false)]
        public string PublisherName { get; set; }
        /// <summary>
        /// Gets or Sets RequiredForExtension
        /// </summary>
        [DataMember(Name="requiredForExtension", EmitDefaultValue=false)]
        public string RequiredForExtension { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtensionData {\n");
            sb.Append("  ActionContract: ").Append(ActionContract).Append("\n");
            sb.Append("  ActionInputKey: ").Append(ActionInputKey).Append("\n");
            sb.Append("  ActionName: ").Append(ActionName).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  ConnectedFieldsData: ").Append(ConnectedFieldsData).Append("\n");
            sb.Append("  ConnectionInstances: ").Append(ConnectionInstances).Append("\n");
            sb.Append("  ExtensionContract: ").Append(ExtensionContract).Append("\n");
            sb.Append("  ExtensionGroupId: ").Append(ExtensionGroupId).Append("\n");
            sb.Append("  ExtensionName: ").Append(ExtensionName).Append("\n");
            sb.Append("  ExtensionPolicy: ").Append(ExtensionPolicy).Append("\n");
            sb.Append("  PublisherName: ").Append(PublisherName).Append("\n");
            sb.Append("  RequiredForExtension: ").Append(RequiredForExtension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ExtensionData);
        }

        /// <summary>
        /// Returns true if ExtensionData instances are equal
        /// </summary>
        /// <param name="other">Instance of ExtensionData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ActionContract == other.ActionContract ||
                    this.ActionContract != null &&
                    this.ActionContract.Equals(other.ActionContract)
                ) && 
                (
                    this.ActionInputKey == other.ActionInputKey ||
                    this.ActionInputKey != null &&
                    this.ActionInputKey.Equals(other.ActionInputKey)
                ) && 
                (
                    this.ActionName == other.ActionName ||
                    this.ActionName != null &&
                    this.ActionName.Equals(other.ActionName)
                ) && 
                (
                    this.ApplicationId == other.ApplicationId ||
                    this.ApplicationId != null &&
                    this.ApplicationId.Equals(other.ApplicationId)
                ) && 
                (
                    this.ApplicationName == other.ApplicationName ||
                    this.ApplicationName != null &&
                    this.ApplicationName.Equals(other.ApplicationName)
                ) && 
                (
                    this.ConnectedFieldsData == other.ConnectedFieldsData ||
                    this.ConnectedFieldsData != null &&
                    this.ConnectedFieldsData.Equals(other.ConnectedFieldsData)
                ) && 
                (
                    this.ConnectionInstances == other.ConnectionInstances ||
                    this.ConnectionInstances != null &&
                    this.ConnectionInstances.SequenceEqual(other.ConnectionInstances)
                ) && 
                (
                    this.ExtensionContract == other.ExtensionContract ||
                    this.ExtensionContract != null &&
                    this.ExtensionContract.Equals(other.ExtensionContract)
                ) && 
                (
                    this.ExtensionGroupId == other.ExtensionGroupId ||
                    this.ExtensionGroupId != null &&
                    this.ExtensionGroupId.Equals(other.ExtensionGroupId)
                ) && 
                (
                    this.ExtensionName == other.ExtensionName ||
                    this.ExtensionName != null &&
                    this.ExtensionName.Equals(other.ExtensionName)
                ) && 
                (
                    this.ExtensionPolicy == other.ExtensionPolicy ||
                    this.ExtensionPolicy != null &&
                    this.ExtensionPolicy.Equals(other.ExtensionPolicy)
                ) && 
                (
                    this.PublisherName == other.PublisherName ||
                    this.PublisherName != null &&
                    this.PublisherName.Equals(other.PublisherName)
                ) && 
                (
                    this.RequiredForExtension == other.RequiredForExtension ||
                    this.RequiredForExtension != null &&
                    this.RequiredForExtension.Equals(other.RequiredForExtension)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ActionContract != null)
                    hash = hash * 59 + this.ActionContract.GetHashCode();
                if (this.ActionInputKey != null)
                    hash = hash * 59 + this.ActionInputKey.GetHashCode();
                if (this.ActionName != null)
                    hash = hash * 59 + this.ActionName.GetHashCode();
                if (this.ApplicationId != null)
                    hash = hash * 59 + this.ApplicationId.GetHashCode();
                if (this.ApplicationName != null)
                    hash = hash * 59 + this.ApplicationName.GetHashCode();
                if (this.ConnectedFieldsData != null)
                    hash = hash * 59 + this.ConnectedFieldsData.GetHashCode();
                if (this.ConnectionInstances != null)
                    hash = hash * 59 + this.ConnectionInstances.GetHashCode();
                if (this.ExtensionContract != null)
                    hash = hash * 59 + this.ExtensionContract.GetHashCode();
                if (this.ExtensionGroupId != null)
                    hash = hash * 59 + this.ExtensionGroupId.GetHashCode();
                if (this.ExtensionName != null)
                    hash = hash * 59 + this.ExtensionName.GetHashCode();
                if (this.ExtensionPolicy != null)
                    hash = hash * 59 + this.ExtensionPolicy.GetHashCode();
                if (this.PublisherName != null)
                    hash = hash * 59 + this.PublisherName.GetHashCode();
                if (this.RequiredForExtension != null)
                    hash = hash * 59 + this.RequiredForExtension.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
