/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Contains information about an in-person recipient. This is a DocuSign user, acting as a Signing Host, who is in the same physical location as the signer. To learn about the fields used for the eNotary feature, see the [recipients resource][resource].  [resource]: /docs/esign-rest-api/reference/envelopes/enveloperecipients/#in-person-signer-recipient 
    /// </summary>
    [DataContract]
    public partial class InPersonSigner :  IEquatable<InPersonSigner>, IValidatableObject
    {
        public InPersonSigner()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InPersonSigner" /> class.
        /// </summary>
        /// <param name="AccessCode">If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account&#39;s access code format setting.  If blank, but the signer &#x60;accessCode&#x60; property is set in the envelope, then that value is used.  If blank and the signer &#x60;accessCode&#x60; property is not set, then the access code is not required..</param>
        /// <param name="AccessCodeMetadata">Metadata that indicates whether the &#x60;accessCode&#x60; property is editable. This property is read-only..</param>
        /// <param name="AddAccessCodeToEmail">This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient..</param>
        /// <param name="AllowSystemOverrideForLockedRecipient">AllowSystemOverrideForLockedRecipient.</param>
        /// <param name="AutoNavigation">AutoNavigation.</param>
        /// <param name="AutoRespondedReason">AutoRespondedReason.</param>
        /// <param name="BulkSendV2Recipient">BulkSendV2Recipient.</param>
        /// <param name="CanSignOffline">When set to **true**, specifies that the signer can perform the signing ceremony offline..</param>
        /// <param name="ClientUserId">Specifies whether the recipient is embedded or remote.   If the &#x60;clientUserId&#x60; property is not null then the recipient is embedded. Note that if the &#x60;ClientUserId&#x60; property is set and either &#x60;SignerMustHaveAccount&#x60; or &#x60;SignerMustLoginToSign&#x60; property of the account settings is set to  **true**, an error is generated on sending.ng.   Maximum length: 100 characters. .</param>
        /// <param name="CompletedCount">CompletedCount.</param>
        /// <param name="CreationReason">CreationReason.</param>
        /// <param name="CustomFields">An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters..</param>
        /// <param name="DeclinedDateTime">The date and time the recipient declined the document..</param>
        /// <param name="DeclinedReason">The reason the recipient declined the document..</param>
        /// <param name="DefaultRecipient">DefaultRecipient.</param>
        /// <param name="DeliveredDateTime">Reserved: For DocuSign use only..</param>
        /// <param name="DeliveryMethod">Reserved: For DocuSign use only..</param>
        /// <param name="DeliveryMethodMetadata">Reserved for DocuSign..</param>
        /// <param name="DesignatorId">DesignatorId.</param>
        /// <param name="DesignatorIdGuid">DesignatorIdGuid.</param>
        /// <param name="DocumentTemplateId">DocumentTemplateId.</param>
        /// <param name="DocumentVisibility">DocumentVisibility.</param>
        /// <param name="Email">Email.</param>
        /// <param name="EmailMetadata">Metadata that indicates whether the &#x60;email&#x60; property is editable. This property is read-only..</param>
        /// <param name="EmailNotification">A complex type that contains information sets the language of the recipient&#39;s email information.   **IMPORTANT**: If you enable email notification for one recipient, you must enable email notification for all recipients as it overrides the Envelope Subject and &#x60;EmailBlurb&#x60; property settings. .</param>
        /// <param name="EmbeddedRecipientStartURL">Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender&#39;s system (the server responding to the URL) must request a recipient token to launch a signing session.   If set to &#x60;SIGN_AT_DOCUSIGN&#x60;, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.  It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient&#39;s identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets &#x60;EmbeddedRecipientStartURL&#x3D;SIGN_AT_DOCUSIGN&#x60;, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.  If the &#x60;clientUserId&#x60; property is NOT set, and the &#x60;embeddedRecipientStartURL&#x60; is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The &#x60;customFields&#x60; property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets.   *Example*:   &#x60;http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&amp;[[mergeField3]]&#x60; .</param>
        /// <param name="ErrorDetails">Array or errors..</param>
        /// <param name="ExcludedDocuments">Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the &#x60;enforceSignerVisibility&#x60; property must be set to **true** for the envelope to use this.  When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent..</param>
        /// <param name="FaxNumber">Reserved:.</param>
        /// <param name="FaxNumberMetadata">Reserved for DocuSign..</param>
        /// <param name="HostEmail">HostEmail.</param>
        /// <param name="HostEmailMetadata">Metadata that indicates whether the &#x60;hostEmail&#x60; property is editable..</param>
        /// <param name="HostName">Specifies the name of the signing host. It is a required element for In Person Signers recipient Type.  Maximum Length: 100 characters..</param>
        /// <param name="HostNameMetadata">Metadata that indicates whether the &#x60;hostName&#x60; property is editable..</param>
        /// <param name="IdCheckConfigurationName">Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.  *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as &#39;ID Check $&#39; and &#39;SMS Auth $&#39;. To use ID check in an envelope, the idCheckConfigurationName should be &#39;ID Check &#39;. If you wanted to use SMS, it would be &#39;SMS Auth $&#39; and you would need to add you would need to add phone number information to the &#x60;smsAuthentication&#x60; node..</param>
        /// <param name="IdCheckConfigurationNameMetadata">Metadata that indicates whether the &#x60;idCheckConfigurationName&#x60; property is editable. This property is read-only..</param>
        /// <param name="IdCheckInformationInput">An object that contains input information related to a recipient ID check..</param>
        /// <param name="IdentityVerification">Specifies the ID Verification workflow applied on an envelope by workflow ID. &lt;br/&gt;See the [list](/docs/esign-rest-api/reference/accounts/identityverifications/list/) method in the [IdentityVerifications](/docs/esign-rest-api/reference/accounts/identityverifications/) resource for more information on how to retrieve workflow IDs available for an account. &lt;br/&gt;This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods. &lt;br/&gt;Note that ID Verification and ID Check are two distinct methods. ID Verification checks recipients&#39; identity by verifying their ID while ID Check relies on data available on public records (such as current and former address)..</param>
        /// <param name="InheritEmailNotificationConfiguration">When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient&#39;s account. .</param>
        /// <param name="InPersonSigningType">InPersonSigningType.</param>
        /// <param name="InPersonSigningTypeMetadata">Metadata that indicates whether the &#x60;inPersonSigningType&#x60; property is editable..</param>
        /// <param name="LockedRecipientPhoneAuthEditable">LockedRecipientPhoneAuthEditable.</param>
        /// <param name="LockedRecipientSmsEditable">LockedRecipientSmsEditable.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NameMetadata">Metadata that indicates whether the &#x60;name&#x60; property is editable. This property is read-only..</param>
        /// <param name="NotaryHost">Information about the notary host. The following information is required when using the eNotary in-person signing flow:  - &#x60;name&#x60;: The name of the notary. - &#x60;email&#x60;: The email address of the notary. - &#x60;recipientId&#x60;: A unique ID number for the notary signing host..</param>
        /// <param name="NotaryId">NotaryId.</param>
        /// <param name="Note">Specifies a note that is unique to this recipient. This note is sent to the recipient via the signing email. The note displays in the signing UI near the upper left corner of the document on the signing screen.  Maximum Length: 1000 characters..</param>
        /// <param name="NoteMetadata">Metadata that indicates whether the &#x60;note&#x60; property is editable. This property is read-only..</param>
        /// <param name="OfflineAttributes">Reserved for DocuSign..</param>
        /// <param name="PhoneAuthentication">When &#x60;idCheckConfigurationName&#x60; is set to &#x60;Phone Auth $&#x60;, you use this complex type to provide the recipient authentication method details. It contains the following elements:  * &#x60;recipMayProvideNumber&#x60;: Boolean. When **true,** the recipient can use whatever phone number they choose. * &#x60;senderProvidedNumbers&#x60;: ArrayOfStrings.  A list of phone numbers the recipient can use. * &#x60;recordVoicePrint&#x60;: Reserved for DocuSign. * &#x60;validateRecipProvidedNumber&#x60;: Reserved for DocuSign.  .</param>
        /// <param name="ProofFile">ProofFile.</param>
        /// <param name="RecipientAttachments">Reserved:.</param>
        /// <param name="RecipientAuthenticationStatus">Information about the recipient&#39;s authentication status. This property is read-only..</param>
        /// <param name="RecipientFeatureMetadata">RecipientFeatureMetadata.</param>
        /// <param name="RecipientId">Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document..</param>
        /// <param name="RecipientIdGuid">RecipientIdGuid.</param>
        /// <param name="RecipientSignatureProviders">RecipientSignatureProviders.</param>
        /// <param name="RecipientSuppliesTabs">RecipientSuppliesTabs.</param>
        /// <param name="RecipientType">RecipientType.</param>
        /// <param name="RecipientTypeMetadata">Metadata that indicates whether the &#x60;recipientType&#x60; property is editable. This property is read-only..</param>
        /// <param name="RequireIdLookup">When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. .</param>
        /// <param name="RequireIdLookupMetadata">Metadata that indicates whether the &#x60;requireIdLookup&#x60; property is editable. This property is read-only..</param>
        /// <param name="RequireSignerCertificate">RequireSignerCertificate.</param>
        /// <param name="RequireSignOnPaper">RequireSignOnPaper.</param>
        /// <param name="RequireUploadSignature">RequireUploadSignature.</param>
        /// <param name="RoleName">Optional element. Specifies the role name associated with the recipient.&lt;br/&gt;&lt;br/&gt;This is required when working with template recipients..</param>
        /// <param name="RoutingOrder">Specifies the routing order of the recipient in the envelope. .</param>
        /// <param name="RoutingOrderMetadata">Metadata that indicates whether the &#x60;routingOrder&#x60; property is editable. This property is read-only..</param>
        /// <param name="SentDateTime">The date and time the envelope was sent..</param>
        /// <param name="SignatureInfo">Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.  Used only with recipient types In Person Signers and Signers..</param>
        /// <param name="SignedDateTime">Reserved: For DocuSign use only. .</param>
        /// <param name="SignerEmail">The email address for an InPersonSigner recipient Type.   Maximum Length: 100 characters. .</param>
        /// <param name="SignerEmailMetadata">Metadata that indicates if the sender can edit the in-person signer&#39;s email address..</param>
        /// <param name="SignerFirstName">SignerFirstName.</param>
        /// <param name="SignerFirstNameMetadata">Metadata that indicates if the &#x60;signerFirstName&#x60; property is editable..</param>
        /// <param name="SignerLastName">SignerLastName.</param>
        /// <param name="SignerLastNameMetadata">Metadata that indicates whether the &#x60;signerLastName&#x60; property is editable..</param>
        /// <param name="SignerName">Required. The full legal name of a signer for the envelope.   Maximum Length: 100 characters.   .</param>
        /// <param name="SignerNameMetadata">Metadata that indicates whether the &#x60;signerName&#x60; property is editable..</param>
        /// <param name="SignInEachLocation">When set to **true**, specifies that the signer must sign in all locations..</param>
        /// <param name="SignInEachLocationMetadata">Metadata that indicates whether the &#x60;signInEachLocation&#x60; property is editable. This property is read-only..</param>
        /// <param name="SigningGroupId">When set to **true** and the feature is enabled in the sender&#39;s account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once)..</param>
        /// <param name="SigningGroupIdMetadata">Not applicable..</param>
        /// <param name="SigningGroupName">The display name for the signing group.   Maximum Length: 100 characters. .</param>
        /// <param name="SigningGroupUsers">A complex type that contains information about users in the signing group..</param>
        /// <param name="SmsAuthentication">When &#x60;idCheckConfigurationName&#x60; is set to &#x60;SMS Auth $&#x60;, you use this complex type to provide the recipient authentication method details. It contains the element &#x60;senderProvidedNumbers&#x60;, which is an array of phone numbers that the recipient can use for SMS text authentication.   .</param>
        /// <param name="SocialAuthentications"> Lists the social ID type that can be used for recipient authentication..</param>
        /// <param name="Status">Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later..</param>
        /// <param name="StatusCode">StatusCode.</param>
        /// <param name="SuppressEmails">SuppressEmails.</param>
        /// <param name="Tabs">A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or enter data. They may also display data to the recipients..</param>
        /// <param name="TemplateLocked">When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. .</param>
        /// <param name="TemplateRequired">When set to **true**, the sender may not remove the recipient. Used only when working with template recipients..</param>
        /// <param name="TotalTabCount">TotalTabCount.</param>
        /// <param name="UserId">UserId.</param>
        /// <param name="WebFormRecipientViewId">WebFormRecipientViewId.</param>
        public InPersonSigner(string AccessCode = default(string), PropertyMetadata AccessCodeMetadata = default(PropertyMetadata), string AddAccessCodeToEmail = default(string), string AllowSystemOverrideForLockedRecipient = default(string), string AutoNavigation = default(string), string AutoRespondedReason = default(string), string BulkSendV2Recipient = default(string), string CanSignOffline = default(string), string ClientUserId = default(string), string CompletedCount = default(string), string CreationReason = default(string), List<string> CustomFields = default(List<string>), string DeclinedDateTime = default(string), string DeclinedReason = default(string), string DefaultRecipient = default(string), string DeliveredDateTime = default(string), string DeliveryMethod = default(string), PropertyMetadata DeliveryMethodMetadata = default(PropertyMetadata), string DesignatorId = default(string), string DesignatorIdGuid = default(string), string DocumentTemplateId = default(string), List<DocumentVisibility> DocumentVisibility = default(List<DocumentVisibility>), string Email = default(string), PropertyMetadata EmailMetadata = default(PropertyMetadata), RecipientEmailNotification EmailNotification = default(RecipientEmailNotification), string EmbeddedRecipientStartURL = default(string), ErrorDetails ErrorDetails = default(ErrorDetails), List<string> ExcludedDocuments = default(List<string>), string FaxNumber = default(string), PropertyMetadata FaxNumberMetadata = default(PropertyMetadata), string HostEmail = default(string), PropertyMetadata HostEmailMetadata = default(PropertyMetadata), string HostName = default(string), PropertyMetadata HostNameMetadata = default(PropertyMetadata), string IdCheckConfigurationName = default(string), PropertyMetadata IdCheckConfigurationNameMetadata = default(PropertyMetadata), IdCheckInformationInput IdCheckInformationInput = default(IdCheckInformationInput), RecipientIdentityVerification IdentityVerification = default(RecipientIdentityVerification), string InheritEmailNotificationConfiguration = default(string), string InPersonSigningType = default(string), PropertyMetadata InPersonSigningTypeMetadata = default(PropertyMetadata), string LockedRecipientPhoneAuthEditable = default(string), string LockedRecipientSmsEditable = default(string), string Name = default(string), PropertyMetadata NameMetadata = default(PropertyMetadata), NotaryHost NotaryHost = default(NotaryHost), string NotaryId = default(string), string Note = default(string), PropertyMetadata NoteMetadata = default(PropertyMetadata), OfflineAttributes OfflineAttributes = default(OfflineAttributes), RecipientPhoneAuthentication PhoneAuthentication = default(RecipientPhoneAuthentication), RecipientProofFile ProofFile = default(RecipientProofFile), List<RecipientAttachment> RecipientAttachments = default(List<RecipientAttachment>), AuthenticationStatus RecipientAuthenticationStatus = default(AuthenticationStatus), List<FeatureAvailableMetadata> RecipientFeatureMetadata = default(List<FeatureAvailableMetadata>), string RecipientId = default(string), string RecipientIdGuid = default(string), List<RecipientSignatureProvider> RecipientSignatureProviders = default(List<RecipientSignatureProvider>), string RecipientSuppliesTabs = default(string), string RecipientType = default(string), PropertyMetadata RecipientTypeMetadata = default(PropertyMetadata), string RequireIdLookup = default(string), PropertyMetadata RequireIdLookupMetadata = default(PropertyMetadata), string RequireSignerCertificate = default(string), string RequireSignOnPaper = default(string), string RequireUploadSignature = default(string), string RoleName = default(string), string RoutingOrder = default(string), PropertyMetadata RoutingOrderMetadata = default(PropertyMetadata), string SentDateTime = default(string), RecipientSignatureInformation SignatureInfo = default(RecipientSignatureInformation), string SignedDateTime = default(string), string SignerEmail = default(string), PropertyMetadata SignerEmailMetadata = default(PropertyMetadata), string SignerFirstName = default(string), PropertyMetadata SignerFirstNameMetadata = default(PropertyMetadata), string SignerLastName = default(string), PropertyMetadata SignerLastNameMetadata = default(PropertyMetadata), string SignerName = default(string), PropertyMetadata SignerNameMetadata = default(PropertyMetadata), string SignInEachLocation = default(string), PropertyMetadata SignInEachLocationMetadata = default(PropertyMetadata), string SigningGroupId = default(string), PropertyMetadata SigningGroupIdMetadata = default(PropertyMetadata), string SigningGroupName = default(string), List<UserInfo> SigningGroupUsers = default(List<UserInfo>), RecipientSMSAuthentication SmsAuthentication = default(RecipientSMSAuthentication), List<SocialAuthentication> SocialAuthentications = default(List<SocialAuthentication>), string Status = default(string), string StatusCode = default(string), string SuppressEmails = default(string), Tabs Tabs = default(Tabs), string TemplateLocked = default(string), string TemplateRequired = default(string), string TotalTabCount = default(string), string UserId = default(string), string WebFormRecipientViewId = default(string))
        {
            this.AccessCode = AccessCode;
            this.AccessCodeMetadata = AccessCodeMetadata;
            this.AddAccessCodeToEmail = AddAccessCodeToEmail;
            this.AllowSystemOverrideForLockedRecipient = AllowSystemOverrideForLockedRecipient;
            this.AutoNavigation = AutoNavigation;
            this.AutoRespondedReason = AutoRespondedReason;
            this.BulkSendV2Recipient = BulkSendV2Recipient;
            this.CanSignOffline = CanSignOffline;
            this.ClientUserId = ClientUserId;
            this.CompletedCount = CompletedCount;
            this.CreationReason = CreationReason;
            this.CustomFields = CustomFields;
            this.DeclinedDateTime = DeclinedDateTime;
            this.DeclinedReason = DeclinedReason;
            this.DefaultRecipient = DefaultRecipient;
            this.DeliveredDateTime = DeliveredDateTime;
            this.DeliveryMethod = DeliveryMethod;
            this.DeliveryMethodMetadata = DeliveryMethodMetadata;
            this.DesignatorId = DesignatorId;
            this.DesignatorIdGuid = DesignatorIdGuid;
            this.DocumentTemplateId = DocumentTemplateId;
            this.DocumentVisibility = DocumentVisibility;
            this.Email = Email;
            this.EmailMetadata = EmailMetadata;
            this.EmailNotification = EmailNotification;
            this.EmbeddedRecipientStartURL = EmbeddedRecipientStartURL;
            this.ErrorDetails = ErrorDetails;
            this.ExcludedDocuments = ExcludedDocuments;
            this.FaxNumber = FaxNumber;
            this.FaxNumberMetadata = FaxNumberMetadata;
            this.HostEmail = HostEmail;
            this.HostEmailMetadata = HostEmailMetadata;
            this.HostName = HostName;
            this.HostNameMetadata = HostNameMetadata;
            this.IdCheckConfigurationName = IdCheckConfigurationName;
            this.IdCheckConfigurationNameMetadata = IdCheckConfigurationNameMetadata;
            this.IdCheckInformationInput = IdCheckInformationInput;
            this.IdentityVerification = IdentityVerification;
            this.InheritEmailNotificationConfiguration = InheritEmailNotificationConfiguration;
            this.InPersonSigningType = InPersonSigningType;
            this.InPersonSigningTypeMetadata = InPersonSigningTypeMetadata;
            this.LockedRecipientPhoneAuthEditable = LockedRecipientPhoneAuthEditable;
            this.LockedRecipientSmsEditable = LockedRecipientSmsEditable;
            this.Name = Name;
            this.NameMetadata = NameMetadata;
            this.NotaryHost = NotaryHost;
            this.NotaryId = NotaryId;
            this.Note = Note;
            this.NoteMetadata = NoteMetadata;
            this.OfflineAttributes = OfflineAttributes;
            this.PhoneAuthentication = PhoneAuthentication;
            this.ProofFile = ProofFile;
            this.RecipientAttachments = RecipientAttachments;
            this.RecipientAuthenticationStatus = RecipientAuthenticationStatus;
            this.RecipientFeatureMetadata = RecipientFeatureMetadata;
            this.RecipientId = RecipientId;
            this.RecipientIdGuid = RecipientIdGuid;
            this.RecipientSignatureProviders = RecipientSignatureProviders;
            this.RecipientSuppliesTabs = RecipientSuppliesTabs;
            this.RecipientType = RecipientType;
            this.RecipientTypeMetadata = RecipientTypeMetadata;
            this.RequireIdLookup = RequireIdLookup;
            this.RequireIdLookupMetadata = RequireIdLookupMetadata;
            this.RequireSignerCertificate = RequireSignerCertificate;
            this.RequireSignOnPaper = RequireSignOnPaper;
            this.RequireUploadSignature = RequireUploadSignature;
            this.RoleName = RoleName;
            this.RoutingOrder = RoutingOrder;
            this.RoutingOrderMetadata = RoutingOrderMetadata;
            this.SentDateTime = SentDateTime;
            this.SignatureInfo = SignatureInfo;
            this.SignedDateTime = SignedDateTime;
            this.SignerEmail = SignerEmail;
            this.SignerEmailMetadata = SignerEmailMetadata;
            this.SignerFirstName = SignerFirstName;
            this.SignerFirstNameMetadata = SignerFirstNameMetadata;
            this.SignerLastName = SignerLastName;
            this.SignerLastNameMetadata = SignerLastNameMetadata;
            this.SignerName = SignerName;
            this.SignerNameMetadata = SignerNameMetadata;
            this.SignInEachLocation = SignInEachLocation;
            this.SignInEachLocationMetadata = SignInEachLocationMetadata;
            this.SigningGroupId = SigningGroupId;
            this.SigningGroupIdMetadata = SigningGroupIdMetadata;
            this.SigningGroupName = SigningGroupName;
            this.SigningGroupUsers = SigningGroupUsers;
            this.SmsAuthentication = SmsAuthentication;
            this.SocialAuthentications = SocialAuthentications;
            this.Status = Status;
            this.StatusCode = StatusCode;
            this.SuppressEmails = SuppressEmails;
            this.Tabs = Tabs;
            this.TemplateLocked = TemplateLocked;
            this.TemplateRequired = TemplateRequired;
            this.TotalTabCount = TotalTabCount;
            this.UserId = UserId;
            this.WebFormRecipientViewId = WebFormRecipientViewId;
        }
        
        /// <summary>
        /// If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account&#39;s access code format setting.  If blank, but the signer &#x60;accessCode&#x60; property is set in the envelope, then that value is used.  If blank and the signer &#x60;accessCode&#x60; property is not set, then the access code is not required.
        /// </summary>
        /// <value>If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account&#39;s access code format setting.  If blank, but the signer &#x60;accessCode&#x60; property is set in the envelope, then that value is used.  If blank and the signer &#x60;accessCode&#x60; property is not set, then the access code is not required.</value>
        [DataMember(Name="accessCode", EmitDefaultValue=false)]
        public string AccessCode { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;accessCode&#x60; property is editable. This property is read-only.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;accessCode&#x60; property is editable. This property is read-only.</value>
        [DataMember(Name="accessCodeMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AccessCodeMetadata { get; set; }
        /// <summary>
        /// This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.
        /// </summary>
        /// <value>This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.</value>
        [DataMember(Name="addAccessCodeToEmail", EmitDefaultValue=false)]
        public string AddAccessCodeToEmail { get; set; }
        /// <summary>
        /// Gets or Sets AllowSystemOverrideForLockedRecipient
        /// </summary>
        [DataMember(Name="allowSystemOverrideForLockedRecipient", EmitDefaultValue=false)]
        public string AllowSystemOverrideForLockedRecipient { get; set; }
        /// <summary>
        /// Gets or Sets AutoNavigation
        /// </summary>
        [DataMember(Name="autoNavigation", EmitDefaultValue=false)]
        public string AutoNavigation { get; set; }
        /// <summary>
        /// Gets or Sets AutoRespondedReason
        /// </summary>
        [DataMember(Name="autoRespondedReason", EmitDefaultValue=false)]
        public string AutoRespondedReason { get; set; }
        /// <summary>
        /// Gets or Sets BulkSendV2Recipient
        /// </summary>
        [DataMember(Name="bulkSendV2Recipient", EmitDefaultValue=false)]
        public string BulkSendV2Recipient { get; set; }
        /// <summary>
        /// When set to **true**, specifies that the signer can perform the signing ceremony offline.
        /// </summary>
        /// <value>When set to **true**, specifies that the signer can perform the signing ceremony offline.</value>
        [DataMember(Name="canSignOffline", EmitDefaultValue=false)]
        public string CanSignOffline { get; set; }
        /// <summary>
        /// Specifies whether the recipient is embedded or remote.   If the &#x60;clientUserId&#x60; property is not null then the recipient is embedded. Note that if the &#x60;ClientUserId&#x60; property is set and either &#x60;SignerMustHaveAccount&#x60; or &#x60;SignerMustLoginToSign&#x60; property of the account settings is set to  **true**, an error is generated on sending.ng.   Maximum length: 100 characters. 
        /// </summary>
        /// <value>Specifies whether the recipient is embedded or remote.   If the &#x60;clientUserId&#x60; property is not null then the recipient is embedded. Note that if the &#x60;ClientUserId&#x60; property is set and either &#x60;SignerMustHaveAccount&#x60; or &#x60;SignerMustLoginToSign&#x60; property of the account settings is set to  **true**, an error is generated on sending.ng.   Maximum length: 100 characters. </value>
        [DataMember(Name="clientUserId", EmitDefaultValue=false)]
        public string ClientUserId { get; set; }
        /// <summary>
        /// Gets or Sets CompletedCount
        /// </summary>
        [DataMember(Name="completedCount", EmitDefaultValue=false)]
        public string CompletedCount { get; set; }
        /// <summary>
        /// Gets or Sets CreationReason
        /// </summary>
        [DataMember(Name="creationReason", EmitDefaultValue=false)]
        public string CreationReason { get; set; }
        /// <summary>
        /// An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
        /// </summary>
        /// <value>An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.</value>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public List<string> CustomFields { get; set; }
        /// <summary>
        /// The date and time the recipient declined the document.
        /// </summary>
        /// <value>The date and time the recipient declined the document.</value>
        [DataMember(Name="declinedDateTime", EmitDefaultValue=false)]
        public string DeclinedDateTime { get; set; }
        /// <summary>
        /// The reason the recipient declined the document.
        /// </summary>
        /// <value>The reason the recipient declined the document.</value>
        [DataMember(Name="declinedReason", EmitDefaultValue=false)]
        public string DeclinedReason { get; set; }
        /// <summary>
        /// Gets or Sets DefaultRecipient
        /// </summary>
        [DataMember(Name="defaultRecipient", EmitDefaultValue=false)]
        public string DefaultRecipient { get; set; }
        /// <summary>
        /// Reserved: For DocuSign use only.
        /// </summary>
        /// <value>Reserved: For DocuSign use only.</value>
        [DataMember(Name="deliveredDateTime", EmitDefaultValue=false)]
        public string DeliveredDateTime { get; set; }
        /// <summary>
        /// Reserved: For DocuSign use only.
        /// </summary>
        /// <value>Reserved: For DocuSign use only.</value>
        [DataMember(Name="deliveryMethod", EmitDefaultValue=false)]
        public string DeliveryMethod { get; set; }
        /// <summary>
        /// Reserved for DocuSign.
        /// </summary>
        /// <value>Reserved for DocuSign.</value>
        [DataMember(Name="deliveryMethodMetadata", EmitDefaultValue=false)]
        public PropertyMetadata DeliveryMethodMetadata { get; set; }
        /// <summary>
        /// Gets or Sets DesignatorId
        /// </summary>
        [DataMember(Name="designatorId", EmitDefaultValue=false)]
        public string DesignatorId { get; set; }
        /// <summary>
        /// Gets or Sets DesignatorIdGuid
        /// </summary>
        [DataMember(Name="designatorIdGuid", EmitDefaultValue=false)]
        public string DesignatorIdGuid { get; set; }
        /// <summary>
        /// Gets or Sets DocumentTemplateId
        /// </summary>
        [DataMember(Name="documentTemplateId", EmitDefaultValue=false)]
        public string DocumentTemplateId { get; set; }
        /// <summary>
        /// Gets or Sets DocumentVisibility
        /// </summary>
        [DataMember(Name="documentVisibility", EmitDefaultValue=false)]
        public List<DocumentVisibility> DocumentVisibility { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;email&#x60; property is editable. This property is read-only.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;email&#x60; property is editable. This property is read-only.</value>
        [DataMember(Name="emailMetadata", EmitDefaultValue=false)]
        public PropertyMetadata EmailMetadata { get; set; }
        /// <summary>
        /// A complex type that contains information sets the language of the recipient&#39;s email information.   **IMPORTANT**: If you enable email notification for one recipient, you must enable email notification for all recipients as it overrides the Envelope Subject and &#x60;EmailBlurb&#x60; property settings. 
        /// </summary>
        /// <value>A complex type that contains information sets the language of the recipient&#39;s email information.   **IMPORTANT**: If you enable email notification for one recipient, you must enable email notification for all recipients as it overrides the Envelope Subject and &#x60;EmailBlurb&#x60; property settings. </value>
        [DataMember(Name="emailNotification", EmitDefaultValue=false)]
        public RecipientEmailNotification EmailNotification { get; set; }
        /// <summary>
        /// Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender&#39;s system (the server responding to the URL) must request a recipient token to launch a signing session.   If set to &#x60;SIGN_AT_DOCUSIGN&#x60;, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.  It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient&#39;s identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets &#x60;EmbeddedRecipientStartURL&#x3D;SIGN_AT_DOCUSIGN&#x60;, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.  If the &#x60;clientUserId&#x60; property is NOT set, and the &#x60;embeddedRecipientStartURL&#x60; is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The &#x60;customFields&#x60; property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets.   *Example*:   &#x60;http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&amp;[[mergeField3]]&#x60; 
        /// </summary>
        /// <value>Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender&#39;s system (the server responding to the URL) must request a recipient token to launch a signing session.   If set to &#x60;SIGN_AT_DOCUSIGN&#x60;, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.  It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient&#39;s identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets &#x60;EmbeddedRecipientStartURL&#x3D;SIGN_AT_DOCUSIGN&#x60;, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.  If the &#x60;clientUserId&#x60; property is NOT set, and the &#x60;embeddedRecipientStartURL&#x60; is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The &#x60;customFields&#x60; property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets.   *Example*:   &#x60;http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&amp;[[mergeField3]]&#x60; </value>
        [DataMember(Name="embeddedRecipientStartURL", EmitDefaultValue=false)]
        public string EmbeddedRecipientStartURL { get; set; }
        /// <summary>
        /// Array or errors.
        /// </summary>
        /// <value>Array or errors.</value>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the &#x60;enforceSignerVisibility&#x60; property must be set to **true** for the envelope to use this.  When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.
        /// </summary>
        /// <value>Specifies the documents that are not visible to this recipient. Document Visibility must be enabled for the account and the &#x60;enforceSignerVisibility&#x60; property must be set to **true** for the envelope to use this.  When enforce signer visibility is enabled, documents with tabs can only be viewed by signers that have a tab on that document. Recipients that have an administrative role (Agent, Editor, or Intermediaries) or informational role (Certified Deliveries or Carbon Copies) can always see all the documents in an envelope, unless they are specifically excluded using this setting when an envelope is sent. Documents that do not have tabs are always visible to all recipients, unless they are specifically excluded using this setting when an envelope is sent.</value>
        [DataMember(Name="excludedDocuments", EmitDefaultValue=false)]
        public List<string> ExcludedDocuments { get; set; }
        /// <summary>
        /// Reserved:
        /// </summary>
        /// <value>Reserved:</value>
        [DataMember(Name="faxNumber", EmitDefaultValue=false)]
        public string FaxNumber { get; set; }
        /// <summary>
        /// Reserved for DocuSign.
        /// </summary>
        /// <value>Reserved for DocuSign.</value>
        [DataMember(Name="faxNumberMetadata", EmitDefaultValue=false)]
        public PropertyMetadata FaxNumberMetadata { get; set; }
        /// <summary>
        /// Gets or Sets HostEmail
        /// </summary>
        [DataMember(Name="hostEmail", EmitDefaultValue=false)]
        public string HostEmail { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;hostEmail&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;hostEmail&#x60; property is editable.</value>
        [DataMember(Name="hostEmailMetadata", EmitDefaultValue=false)]
        public PropertyMetadata HostEmailMetadata { get; set; }
        /// <summary>
        /// Specifies the name of the signing host. It is a required element for In Person Signers recipient Type.  Maximum Length: 100 characters.
        /// </summary>
        /// <value>Specifies the name of the signing host. It is a required element for In Person Signers recipient Type.  Maximum Length: 100 characters.</value>
        [DataMember(Name="hostName", EmitDefaultValue=false)]
        public string HostName { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;hostName&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;hostName&#x60; property is editable.</value>
        [DataMember(Name="hostNameMetadata", EmitDefaultValue=false)]
        public PropertyMetadata HostNameMetadata { get; set; }
        /// <summary>
        /// Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.  *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as &#39;ID Check $&#39; and &#39;SMS Auth $&#39;. To use ID check in an envelope, the idCheckConfigurationName should be &#39;ID Check &#39;. If you wanted to use SMS, it would be &#39;SMS Auth $&#39; and you would need to add you would need to add phone number information to the &#x60;smsAuthentication&#x60; node.
        /// </summary>
        /// <value>Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.  *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as &#39;ID Check $&#39; and &#39;SMS Auth $&#39;. To use ID check in an envelope, the idCheckConfigurationName should be &#39;ID Check &#39;. If you wanted to use SMS, it would be &#39;SMS Auth $&#39; and you would need to add you would need to add phone number information to the &#x60;smsAuthentication&#x60; node.</value>
        [DataMember(Name="idCheckConfigurationName", EmitDefaultValue=false)]
        public string IdCheckConfigurationName { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;idCheckConfigurationName&#x60; property is editable. This property is read-only.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;idCheckConfigurationName&#x60; property is editable. This property is read-only.</value>
        [DataMember(Name="idCheckConfigurationNameMetadata", EmitDefaultValue=false)]
        public PropertyMetadata IdCheckConfigurationNameMetadata { get; set; }
        /// <summary>
        /// An object that contains input information related to a recipient ID check.
        /// </summary>
        /// <value>An object that contains input information related to a recipient ID check.</value>
        [DataMember(Name="idCheckInformationInput", EmitDefaultValue=false)]
        public IdCheckInformationInput IdCheckInformationInput { get; set; }
        /// <summary>
        /// Specifies the ID Verification workflow applied on an envelope by workflow ID. &lt;br/&gt;See the [list](/docs/esign-rest-api/reference/accounts/identityverifications/list/) method in the [IdentityVerifications](/docs/esign-rest-api/reference/accounts/identityverifications/) resource for more information on how to retrieve workflow IDs available for an account. &lt;br/&gt;This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods. &lt;br/&gt;Note that ID Verification and ID Check are two distinct methods. ID Verification checks recipients&#39; identity by verifying their ID while ID Check relies on data available on public records (such as current and former address).
        /// </summary>
        /// <value>Specifies the ID Verification workflow applied on an envelope by workflow ID. &lt;br/&gt;See the [list](/docs/esign-rest-api/reference/accounts/identityverifications/list/) method in the [IdentityVerifications](/docs/esign-rest-api/reference/accounts/identityverifications/) resource for more information on how to retrieve workflow IDs available for an account. &lt;br/&gt;This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods. &lt;br/&gt;Note that ID Verification and ID Check are two distinct methods. ID Verification checks recipients&#39; identity by verifying their ID while ID Check relies on data available on public records (such as current and former address).</value>
        [DataMember(Name="identityVerification", EmitDefaultValue=false)]
        public RecipientIdentityVerification IdentityVerification { get; set; }
        /// <summary>
        /// When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient&#39;s account. 
        /// </summary>
        /// <value>When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient&#39;s account. </value>
        [DataMember(Name="inheritEmailNotificationConfiguration", EmitDefaultValue=false)]
        public string InheritEmailNotificationConfiguration { get; set; }
        /// <summary>
        /// Gets or Sets InPersonSigningType
        /// </summary>
        [DataMember(Name="inPersonSigningType", EmitDefaultValue=false)]
        public string InPersonSigningType { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;inPersonSigningType&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;inPersonSigningType&#x60; property is editable.</value>
        [DataMember(Name="inPersonSigningTypeMetadata", EmitDefaultValue=false)]
        public PropertyMetadata InPersonSigningTypeMetadata { get; set; }
        /// <summary>
        /// Gets or Sets LockedRecipientPhoneAuthEditable
        /// </summary>
        [DataMember(Name="lockedRecipientPhoneAuthEditable", EmitDefaultValue=false)]
        public string LockedRecipientPhoneAuthEditable { get; set; }
        /// <summary>
        /// Gets or Sets LockedRecipientSmsEditable
        /// </summary>
        [DataMember(Name="lockedRecipientSmsEditable", EmitDefaultValue=false)]
        public string LockedRecipientSmsEditable { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;name&#x60; property is editable. This property is read-only.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;name&#x60; property is editable. This property is read-only.</value>
        [DataMember(Name="nameMetadata", EmitDefaultValue=false)]
        public PropertyMetadata NameMetadata { get; set; }
        /// <summary>
        /// Information about the notary host. The following information is required when using the eNotary in-person signing flow:  - &#x60;name&#x60;: The name of the notary. - &#x60;email&#x60;: The email address of the notary. - &#x60;recipientId&#x60;: A unique ID number for the notary signing host.
        /// </summary>
        /// <value>Information about the notary host. The following information is required when using the eNotary in-person signing flow:  - &#x60;name&#x60;: The name of the notary. - &#x60;email&#x60;: The email address of the notary. - &#x60;recipientId&#x60;: A unique ID number for the notary signing host.</value>
        [DataMember(Name="notaryHost", EmitDefaultValue=false)]
        public NotaryHost NotaryHost { get; set; }
        /// <summary>
        /// Gets or Sets NotaryId
        /// </summary>
        [DataMember(Name="notaryId", EmitDefaultValue=false)]
        public string NotaryId { get; set; }
        /// <summary>
        /// Specifies a note that is unique to this recipient. This note is sent to the recipient via the signing email. The note displays in the signing UI near the upper left corner of the document on the signing screen.  Maximum Length: 1000 characters.
        /// </summary>
        /// <value>Specifies a note that is unique to this recipient. This note is sent to the recipient via the signing email. The note displays in the signing UI near the upper left corner of the document on the signing screen.  Maximum Length: 1000 characters.</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;note&#x60; property is editable. This property is read-only.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;note&#x60; property is editable. This property is read-only.</value>
        [DataMember(Name="noteMetadata", EmitDefaultValue=false)]
        public PropertyMetadata NoteMetadata { get; set; }
        /// <summary>
        /// Reserved for DocuSign.
        /// </summary>
        /// <value>Reserved for DocuSign.</value>
        [DataMember(Name="offlineAttributes", EmitDefaultValue=false)]
        public OfflineAttributes OfflineAttributes { get; set; }
        /// <summary>
        /// When &#x60;idCheckConfigurationName&#x60; is set to &#x60;Phone Auth $&#x60;, you use this complex type to provide the recipient authentication method details. It contains the following elements:  * &#x60;recipMayProvideNumber&#x60;: Boolean. When **true,** the recipient can use whatever phone number they choose. * &#x60;senderProvidedNumbers&#x60;: ArrayOfStrings.  A list of phone numbers the recipient can use. * &#x60;recordVoicePrint&#x60;: Reserved for DocuSign. * &#x60;validateRecipProvidedNumber&#x60;: Reserved for DocuSign.  
        /// </summary>
        /// <value>When &#x60;idCheckConfigurationName&#x60; is set to &#x60;Phone Auth $&#x60;, you use this complex type to provide the recipient authentication method details. It contains the following elements:  * &#x60;recipMayProvideNumber&#x60;: Boolean. When **true,** the recipient can use whatever phone number they choose. * &#x60;senderProvidedNumbers&#x60;: ArrayOfStrings.  A list of phone numbers the recipient can use. * &#x60;recordVoicePrint&#x60;: Reserved for DocuSign. * &#x60;validateRecipProvidedNumber&#x60;: Reserved for DocuSign.  </value>
        [DataMember(Name="phoneAuthentication", EmitDefaultValue=false)]
        public RecipientPhoneAuthentication PhoneAuthentication { get; set; }
        /// <summary>
        /// Gets or Sets ProofFile
        /// </summary>
        [DataMember(Name="proofFile", EmitDefaultValue=false)]
        public RecipientProofFile ProofFile { get; set; }
        /// <summary>
        /// Reserved:
        /// </summary>
        /// <value>Reserved:</value>
        [DataMember(Name="recipientAttachments", EmitDefaultValue=false)]
        public List<RecipientAttachment> RecipientAttachments { get; set; }
        /// <summary>
        /// Information about the recipient&#39;s authentication status. This property is read-only.
        /// </summary>
        /// <value>Information about the recipient&#39;s authentication status. This property is read-only.</value>
        [DataMember(Name="recipientAuthenticationStatus", EmitDefaultValue=false)]
        public AuthenticationStatus RecipientAuthenticationStatus { get; set; }
        /// <summary>
        /// Gets or Sets RecipientFeatureMetadata
        /// </summary>
        [DataMember(Name="recipientFeatureMetadata", EmitDefaultValue=false)]
        public List<FeatureAvailableMetadata> RecipientFeatureMetadata { get; set; }
        /// <summary>
        /// Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
        /// </summary>
        /// <value>Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.</value>
        [DataMember(Name="recipientId", EmitDefaultValue=false)]
        public string RecipientId { get; set; }
        /// <summary>
        /// Gets or Sets RecipientIdGuid
        /// </summary>
        [DataMember(Name="recipientIdGuid", EmitDefaultValue=false)]
        public string RecipientIdGuid { get; set; }
        /// <summary>
        /// Gets or Sets RecipientSignatureProviders
        /// </summary>
        [DataMember(Name="recipientSignatureProviders", EmitDefaultValue=false)]
        public List<RecipientSignatureProvider> RecipientSignatureProviders { get; set; }
        /// <summary>
        /// Gets or Sets RecipientSuppliesTabs
        /// </summary>
        [DataMember(Name="recipientSuppliesTabs", EmitDefaultValue=false)]
        public string RecipientSuppliesTabs { get; set; }
        /// <summary>
        /// Gets or Sets RecipientType
        /// </summary>
        [DataMember(Name="recipientType", EmitDefaultValue=false)]
        public string RecipientType { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;recipientType&#x60; property is editable. This property is read-only.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;recipientType&#x60; property is editable. This property is read-only.</value>
        [DataMember(Name="recipientTypeMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RecipientTypeMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. 
        /// </summary>
        /// <value>When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. </value>
        [DataMember(Name="requireIdLookup", EmitDefaultValue=false)]
        public string RequireIdLookup { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;requireIdLookup&#x60; property is editable. This property is read-only.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;requireIdLookup&#x60; property is editable. This property is read-only.</value>
        [DataMember(Name="requireIdLookupMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RequireIdLookupMetadata { get; set; }
        /// <summary>
        /// Gets or Sets RequireSignerCertificate
        /// </summary>
        [DataMember(Name="requireSignerCertificate", EmitDefaultValue=false)]
        public string RequireSignerCertificate { get; set; }
        /// <summary>
        /// Gets or Sets RequireSignOnPaper
        /// </summary>
        [DataMember(Name="requireSignOnPaper", EmitDefaultValue=false)]
        public string RequireSignOnPaper { get; set; }
        /// <summary>
        /// Gets or Sets RequireUploadSignature
        /// </summary>
        [DataMember(Name="requireUploadSignature", EmitDefaultValue=false)]
        public string RequireUploadSignature { get; set; }
        /// <summary>
        /// Optional element. Specifies the role name associated with the recipient.&lt;br/&gt;&lt;br/&gt;This is required when working with template recipients.
        /// </summary>
        /// <value>Optional element. Specifies the role name associated with the recipient.&lt;br/&gt;&lt;br/&gt;This is required when working with template recipients.</value>
        [DataMember(Name="roleName", EmitDefaultValue=false)]
        public string RoleName { get; set; }
        /// <summary>
        /// Specifies the routing order of the recipient in the envelope. 
        /// </summary>
        /// <value>Specifies the routing order of the recipient in the envelope. </value>
        [DataMember(Name="routingOrder", EmitDefaultValue=false)]
        public string RoutingOrder { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;routingOrder&#x60; property is editable. This property is read-only.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;routingOrder&#x60; property is editable. This property is read-only.</value>
        [DataMember(Name="routingOrderMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RoutingOrderMetadata { get; set; }
        /// <summary>
        /// The date and time the envelope was sent.
        /// </summary>
        /// <value>The date and time the envelope was sent.</value>
        [DataMember(Name="sentDateTime", EmitDefaultValue=false)]
        public string SentDateTime { get; set; }
        /// <summary>
        /// Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.  Used only with recipient types In Person Signers and Signers.
        /// </summary>
        /// <value>Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.  Used only with recipient types In Person Signers and Signers.</value>
        [DataMember(Name="signatureInfo", EmitDefaultValue=false)]
        public RecipientSignatureInformation SignatureInfo { get; set; }
        /// <summary>
        /// Reserved: For DocuSign use only. 
        /// </summary>
        /// <value>Reserved: For DocuSign use only. </value>
        [DataMember(Name="signedDateTime", EmitDefaultValue=false)]
        public string SignedDateTime { get; set; }
        /// <summary>
        /// The email address for an InPersonSigner recipient Type.   Maximum Length: 100 characters. 
        /// </summary>
        /// <value>The email address for an InPersonSigner recipient Type.   Maximum Length: 100 characters. </value>
        [DataMember(Name="signerEmail", EmitDefaultValue=false)]
        public string SignerEmail { get; set; }
        /// <summary>
        /// Metadata that indicates if the sender can edit the in-person signer&#39;s email address.
        /// </summary>
        /// <value>Metadata that indicates if the sender can edit the in-person signer&#39;s email address.</value>
        [DataMember(Name="signerEmailMetadata", EmitDefaultValue=false)]
        public PropertyMetadata SignerEmailMetadata { get; set; }
        /// <summary>
        /// Gets or Sets SignerFirstName
        /// </summary>
        [DataMember(Name="signerFirstName", EmitDefaultValue=false)]
        public string SignerFirstName { get; set; }
        /// <summary>
        /// Metadata that indicates if the &#x60;signerFirstName&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates if the &#x60;signerFirstName&#x60; property is editable.</value>
        [DataMember(Name="signerFirstNameMetadata", EmitDefaultValue=false)]
        public PropertyMetadata SignerFirstNameMetadata { get; set; }
        /// <summary>
        /// Gets or Sets SignerLastName
        /// </summary>
        [DataMember(Name="signerLastName", EmitDefaultValue=false)]
        public string SignerLastName { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;signerLastName&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;signerLastName&#x60; property is editable.</value>
        [DataMember(Name="signerLastNameMetadata", EmitDefaultValue=false)]
        public PropertyMetadata SignerLastNameMetadata { get; set; }
        /// <summary>
        /// Required. The full legal name of a signer for the envelope.   Maximum Length: 100 characters.   
        /// </summary>
        /// <value>Required. The full legal name of a signer for the envelope.   Maximum Length: 100 characters.   </value>
        [DataMember(Name="signerName", EmitDefaultValue=false)]
        public string SignerName { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;signerName&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;signerName&#x60; property is editable.</value>
        [DataMember(Name="signerNameMetadata", EmitDefaultValue=false)]
        public PropertyMetadata SignerNameMetadata { get; set; }
        /// <summary>
        /// When set to **true**, specifies that the signer must sign in all locations.
        /// </summary>
        /// <value>When set to **true**, specifies that the signer must sign in all locations.</value>
        [DataMember(Name="signInEachLocation", EmitDefaultValue=false)]
        public string SignInEachLocation { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;signInEachLocation&#x60; property is editable. This property is read-only.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;signInEachLocation&#x60; property is editable. This property is read-only.</value>
        [DataMember(Name="signInEachLocationMetadata", EmitDefaultValue=false)]
        public PropertyMetadata SignInEachLocationMetadata { get; set; }
        /// <summary>
        /// When set to **true** and the feature is enabled in the sender&#39;s account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
        /// </summary>
        /// <value>When set to **true** and the feature is enabled in the sender&#39;s account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).</value>
        [DataMember(Name="signingGroupId", EmitDefaultValue=false)]
        public string SigningGroupId { get; set; }
        /// <summary>
        /// Not applicable.
        /// </summary>
        /// <value>Not applicable.</value>
        [DataMember(Name="signingGroupIdMetadata", EmitDefaultValue=false)]
        public PropertyMetadata SigningGroupIdMetadata { get; set; }
        /// <summary>
        /// The display name for the signing group.   Maximum Length: 100 characters. 
        /// </summary>
        /// <value>The display name for the signing group.   Maximum Length: 100 characters. </value>
        [DataMember(Name="signingGroupName", EmitDefaultValue=false)]
        public string SigningGroupName { get; set; }
        /// <summary>
        /// A complex type that contains information about users in the signing group.
        /// </summary>
        /// <value>A complex type that contains information about users in the signing group.</value>
        [DataMember(Name="signingGroupUsers", EmitDefaultValue=false)]
        public List<UserInfo> SigningGroupUsers { get; set; }
        /// <summary>
        /// When &#x60;idCheckConfigurationName&#x60; is set to &#x60;SMS Auth $&#x60;, you use this complex type to provide the recipient authentication method details. It contains the element &#x60;senderProvidedNumbers&#x60;, which is an array of phone numbers that the recipient can use for SMS text authentication.   
        /// </summary>
        /// <value>When &#x60;idCheckConfigurationName&#x60; is set to &#x60;SMS Auth $&#x60;, you use this complex type to provide the recipient authentication method details. It contains the element &#x60;senderProvidedNumbers&#x60;, which is an array of phone numbers that the recipient can use for SMS text authentication.   </value>
        [DataMember(Name="smsAuthentication", EmitDefaultValue=false)]
        public RecipientSMSAuthentication SmsAuthentication { get; set; }
        /// <summary>
        ///  Lists the social ID type that can be used for recipient authentication.
        /// </summary>
        /// <value> Lists the social ID type that can be used for recipient authentication.</value>
        [DataMember(Name="socialAuthentications", EmitDefaultValue=false)]
        public List<SocialAuthentication> SocialAuthentications { get; set; }
        /// <summary>
        /// Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.
        /// </summary>
        /// <value>Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public string StatusCode { get; set; }
        /// <summary>
        /// Gets or Sets SuppressEmails
        /// </summary>
        [DataMember(Name="suppressEmails", EmitDefaultValue=false)]
        public string SuppressEmails { get; set; }
        /// <summary>
        /// A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or enter data. They may also display data to the recipients.
        /// </summary>
        /// <value>A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or enter data. They may also display data to the recipients.</value>
        [DataMember(Name="tabs", EmitDefaultValue=false)]
        public Tabs Tabs { get; set; }
        /// <summary>
        /// When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
        /// </summary>
        /// <value>When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. </value>
        [DataMember(Name="templateLocked", EmitDefaultValue=false)]
        public string TemplateLocked { get; set; }
        /// <summary>
        /// When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
        /// </summary>
        /// <value>When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.</value>
        [DataMember(Name="templateRequired", EmitDefaultValue=false)]
        public string TemplateRequired { get; set; }
        /// <summary>
        /// Gets or Sets TotalTabCount
        /// </summary>
        [DataMember(Name="totalTabCount", EmitDefaultValue=false)]
        public string TotalTabCount { get; set; }
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// Gets or Sets WebFormRecipientViewId
        /// </summary>
        [DataMember(Name="webFormRecipientViewId", EmitDefaultValue=false)]
        public string WebFormRecipientViewId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InPersonSigner {\n");
            sb.Append("  AccessCode: ").Append(AccessCode).Append("\n");
            sb.Append("  AccessCodeMetadata: ").Append(AccessCodeMetadata).Append("\n");
            sb.Append("  AddAccessCodeToEmail: ").Append(AddAccessCodeToEmail).Append("\n");
            sb.Append("  AllowSystemOverrideForLockedRecipient: ").Append(AllowSystemOverrideForLockedRecipient).Append("\n");
            sb.Append("  AutoNavigation: ").Append(AutoNavigation).Append("\n");
            sb.Append("  AutoRespondedReason: ").Append(AutoRespondedReason).Append("\n");
            sb.Append("  BulkSendV2Recipient: ").Append(BulkSendV2Recipient).Append("\n");
            sb.Append("  CanSignOffline: ").Append(CanSignOffline).Append("\n");
            sb.Append("  ClientUserId: ").Append(ClientUserId).Append("\n");
            sb.Append("  CompletedCount: ").Append(CompletedCount).Append("\n");
            sb.Append("  CreationReason: ").Append(CreationReason).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  DeclinedDateTime: ").Append(DeclinedDateTime).Append("\n");
            sb.Append("  DeclinedReason: ").Append(DeclinedReason).Append("\n");
            sb.Append("  DefaultRecipient: ").Append(DefaultRecipient).Append("\n");
            sb.Append("  DeliveredDateTime: ").Append(DeliveredDateTime).Append("\n");
            sb.Append("  DeliveryMethod: ").Append(DeliveryMethod).Append("\n");
            sb.Append("  DeliveryMethodMetadata: ").Append(DeliveryMethodMetadata).Append("\n");
            sb.Append("  DesignatorId: ").Append(DesignatorId).Append("\n");
            sb.Append("  DesignatorIdGuid: ").Append(DesignatorIdGuid).Append("\n");
            sb.Append("  DocumentTemplateId: ").Append(DocumentTemplateId).Append("\n");
            sb.Append("  DocumentVisibility: ").Append(DocumentVisibility).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailMetadata: ").Append(EmailMetadata).Append("\n");
            sb.Append("  EmailNotification: ").Append(EmailNotification).Append("\n");
            sb.Append("  EmbeddedRecipientStartURL: ").Append(EmbeddedRecipientStartURL).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  ExcludedDocuments: ").Append(ExcludedDocuments).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  FaxNumberMetadata: ").Append(FaxNumberMetadata).Append("\n");
            sb.Append("  HostEmail: ").Append(HostEmail).Append("\n");
            sb.Append("  HostEmailMetadata: ").Append(HostEmailMetadata).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  HostNameMetadata: ").Append(HostNameMetadata).Append("\n");
            sb.Append("  IdCheckConfigurationName: ").Append(IdCheckConfigurationName).Append("\n");
            sb.Append("  IdCheckConfigurationNameMetadata: ").Append(IdCheckConfigurationNameMetadata).Append("\n");
            sb.Append("  IdCheckInformationInput: ").Append(IdCheckInformationInput).Append("\n");
            sb.Append("  IdentityVerification: ").Append(IdentityVerification).Append("\n");
            sb.Append("  InheritEmailNotificationConfiguration: ").Append(InheritEmailNotificationConfiguration).Append("\n");
            sb.Append("  InPersonSigningType: ").Append(InPersonSigningType).Append("\n");
            sb.Append("  InPersonSigningTypeMetadata: ").Append(InPersonSigningTypeMetadata).Append("\n");
            sb.Append("  LockedRecipientPhoneAuthEditable: ").Append(LockedRecipientPhoneAuthEditable).Append("\n");
            sb.Append("  LockedRecipientSmsEditable: ").Append(LockedRecipientSmsEditable).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameMetadata: ").Append(NameMetadata).Append("\n");
            sb.Append("  NotaryHost: ").Append(NotaryHost).Append("\n");
            sb.Append("  NotaryId: ").Append(NotaryId).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  NoteMetadata: ").Append(NoteMetadata).Append("\n");
            sb.Append("  OfflineAttributes: ").Append(OfflineAttributes).Append("\n");
            sb.Append("  PhoneAuthentication: ").Append(PhoneAuthentication).Append("\n");
            sb.Append("  ProofFile: ").Append(ProofFile).Append("\n");
            sb.Append("  RecipientAttachments: ").Append(RecipientAttachments).Append("\n");
            sb.Append("  RecipientAuthenticationStatus: ").Append(RecipientAuthenticationStatus).Append("\n");
            sb.Append("  RecipientFeatureMetadata: ").Append(RecipientFeatureMetadata).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  RecipientIdGuid: ").Append(RecipientIdGuid).Append("\n");
            sb.Append("  RecipientSignatureProviders: ").Append(RecipientSignatureProviders).Append("\n");
            sb.Append("  RecipientSuppliesTabs: ").Append(RecipientSuppliesTabs).Append("\n");
            sb.Append("  RecipientType: ").Append(RecipientType).Append("\n");
            sb.Append("  RecipientTypeMetadata: ").Append(RecipientTypeMetadata).Append("\n");
            sb.Append("  RequireIdLookup: ").Append(RequireIdLookup).Append("\n");
            sb.Append("  RequireIdLookupMetadata: ").Append(RequireIdLookupMetadata).Append("\n");
            sb.Append("  RequireSignerCertificate: ").Append(RequireSignerCertificate).Append("\n");
            sb.Append("  RequireSignOnPaper: ").Append(RequireSignOnPaper).Append("\n");
            sb.Append("  RequireUploadSignature: ").Append(RequireUploadSignature).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  RoutingOrder: ").Append(RoutingOrder).Append("\n");
            sb.Append("  RoutingOrderMetadata: ").Append(RoutingOrderMetadata).Append("\n");
            sb.Append("  SentDateTime: ").Append(SentDateTime).Append("\n");
            sb.Append("  SignatureInfo: ").Append(SignatureInfo).Append("\n");
            sb.Append("  SignedDateTime: ").Append(SignedDateTime).Append("\n");
            sb.Append("  SignerEmail: ").Append(SignerEmail).Append("\n");
            sb.Append("  SignerEmailMetadata: ").Append(SignerEmailMetadata).Append("\n");
            sb.Append("  SignerFirstName: ").Append(SignerFirstName).Append("\n");
            sb.Append("  SignerFirstNameMetadata: ").Append(SignerFirstNameMetadata).Append("\n");
            sb.Append("  SignerLastName: ").Append(SignerLastName).Append("\n");
            sb.Append("  SignerLastNameMetadata: ").Append(SignerLastNameMetadata).Append("\n");
            sb.Append("  SignerName: ").Append(SignerName).Append("\n");
            sb.Append("  SignerNameMetadata: ").Append(SignerNameMetadata).Append("\n");
            sb.Append("  SignInEachLocation: ").Append(SignInEachLocation).Append("\n");
            sb.Append("  SignInEachLocationMetadata: ").Append(SignInEachLocationMetadata).Append("\n");
            sb.Append("  SigningGroupId: ").Append(SigningGroupId).Append("\n");
            sb.Append("  SigningGroupIdMetadata: ").Append(SigningGroupIdMetadata).Append("\n");
            sb.Append("  SigningGroupName: ").Append(SigningGroupName).Append("\n");
            sb.Append("  SigningGroupUsers: ").Append(SigningGroupUsers).Append("\n");
            sb.Append("  SmsAuthentication: ").Append(SmsAuthentication).Append("\n");
            sb.Append("  SocialAuthentications: ").Append(SocialAuthentications).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  SuppressEmails: ").Append(SuppressEmails).Append("\n");
            sb.Append("  Tabs: ").Append(Tabs).Append("\n");
            sb.Append("  TemplateLocked: ").Append(TemplateLocked).Append("\n");
            sb.Append("  TemplateRequired: ").Append(TemplateRequired).Append("\n");
            sb.Append("  TotalTabCount: ").Append(TotalTabCount).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  WebFormRecipientViewId: ").Append(WebFormRecipientViewId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InPersonSigner);
        }

        /// <summary>
        /// Returns true if InPersonSigner instances are equal
        /// </summary>
        /// <param name="other">Instance of InPersonSigner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InPersonSigner other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessCode == other.AccessCode ||
                    this.AccessCode != null &&
                    this.AccessCode.Equals(other.AccessCode)
                ) && 
                (
                    this.AccessCodeMetadata == other.AccessCodeMetadata ||
                    this.AccessCodeMetadata != null &&
                    this.AccessCodeMetadata.Equals(other.AccessCodeMetadata)
                ) && 
                (
                    this.AddAccessCodeToEmail == other.AddAccessCodeToEmail ||
                    this.AddAccessCodeToEmail != null &&
                    this.AddAccessCodeToEmail.Equals(other.AddAccessCodeToEmail)
                ) && 
                (
                    this.AllowSystemOverrideForLockedRecipient == other.AllowSystemOverrideForLockedRecipient ||
                    this.AllowSystemOverrideForLockedRecipient != null &&
                    this.AllowSystemOverrideForLockedRecipient.Equals(other.AllowSystemOverrideForLockedRecipient)
                ) && 
                (
                    this.AutoNavigation == other.AutoNavigation ||
                    this.AutoNavigation != null &&
                    this.AutoNavigation.Equals(other.AutoNavigation)
                ) && 
                (
                    this.AutoRespondedReason == other.AutoRespondedReason ||
                    this.AutoRespondedReason != null &&
                    this.AutoRespondedReason.Equals(other.AutoRespondedReason)
                ) && 
                (
                    this.BulkSendV2Recipient == other.BulkSendV2Recipient ||
                    this.BulkSendV2Recipient != null &&
                    this.BulkSendV2Recipient.Equals(other.BulkSendV2Recipient)
                ) && 
                (
                    this.CanSignOffline == other.CanSignOffline ||
                    this.CanSignOffline != null &&
                    this.CanSignOffline.Equals(other.CanSignOffline)
                ) && 
                (
                    this.ClientUserId == other.ClientUserId ||
                    this.ClientUserId != null &&
                    this.ClientUserId.Equals(other.ClientUserId)
                ) && 
                (
                    this.CompletedCount == other.CompletedCount ||
                    this.CompletedCount != null &&
                    this.CompletedCount.Equals(other.CompletedCount)
                ) && 
                (
                    this.CreationReason == other.CreationReason ||
                    this.CreationReason != null &&
                    this.CreationReason.Equals(other.CreationReason)
                ) && 
                (
                    this.CustomFields == other.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    this.DeclinedDateTime == other.DeclinedDateTime ||
                    this.DeclinedDateTime != null &&
                    this.DeclinedDateTime.Equals(other.DeclinedDateTime)
                ) && 
                (
                    this.DeclinedReason == other.DeclinedReason ||
                    this.DeclinedReason != null &&
                    this.DeclinedReason.Equals(other.DeclinedReason)
                ) && 
                (
                    this.DefaultRecipient == other.DefaultRecipient ||
                    this.DefaultRecipient != null &&
                    this.DefaultRecipient.Equals(other.DefaultRecipient)
                ) && 
                (
                    this.DeliveredDateTime == other.DeliveredDateTime ||
                    this.DeliveredDateTime != null &&
                    this.DeliveredDateTime.Equals(other.DeliveredDateTime)
                ) && 
                (
                    this.DeliveryMethod == other.DeliveryMethod ||
                    this.DeliveryMethod != null &&
                    this.DeliveryMethod.Equals(other.DeliveryMethod)
                ) && 
                (
                    this.DeliveryMethodMetadata == other.DeliveryMethodMetadata ||
                    this.DeliveryMethodMetadata != null &&
                    this.DeliveryMethodMetadata.Equals(other.DeliveryMethodMetadata)
                ) && 
                (
                    this.DesignatorId == other.DesignatorId ||
                    this.DesignatorId != null &&
                    this.DesignatorId.Equals(other.DesignatorId)
                ) && 
                (
                    this.DesignatorIdGuid == other.DesignatorIdGuid ||
                    this.DesignatorIdGuid != null &&
                    this.DesignatorIdGuid.Equals(other.DesignatorIdGuid)
                ) && 
                (
                    this.DocumentTemplateId == other.DocumentTemplateId ||
                    this.DocumentTemplateId != null &&
                    this.DocumentTemplateId.Equals(other.DocumentTemplateId)
                ) && 
                (
                    this.DocumentVisibility == other.DocumentVisibility ||
                    this.DocumentVisibility != null &&
                    this.DocumentVisibility.SequenceEqual(other.DocumentVisibility)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.EmailMetadata == other.EmailMetadata ||
                    this.EmailMetadata != null &&
                    this.EmailMetadata.Equals(other.EmailMetadata)
                ) && 
                (
                    this.EmailNotification == other.EmailNotification ||
                    this.EmailNotification != null &&
                    this.EmailNotification.Equals(other.EmailNotification)
                ) && 
                (
                    this.EmbeddedRecipientStartURL == other.EmbeddedRecipientStartURL ||
                    this.EmbeddedRecipientStartURL != null &&
                    this.EmbeddedRecipientStartURL.Equals(other.EmbeddedRecipientStartURL)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.ExcludedDocuments == other.ExcludedDocuments ||
                    this.ExcludedDocuments != null &&
                    this.ExcludedDocuments.SequenceEqual(other.ExcludedDocuments)
                ) && 
                (
                    this.FaxNumber == other.FaxNumber ||
                    this.FaxNumber != null &&
                    this.FaxNumber.Equals(other.FaxNumber)
                ) && 
                (
                    this.FaxNumberMetadata == other.FaxNumberMetadata ||
                    this.FaxNumberMetadata != null &&
                    this.FaxNumberMetadata.Equals(other.FaxNumberMetadata)
                ) && 
                (
                    this.HostEmail == other.HostEmail ||
                    this.HostEmail != null &&
                    this.HostEmail.Equals(other.HostEmail)
                ) && 
                (
                    this.HostEmailMetadata == other.HostEmailMetadata ||
                    this.HostEmailMetadata != null &&
                    this.HostEmailMetadata.Equals(other.HostEmailMetadata)
                ) && 
                (
                    this.HostName == other.HostName ||
                    this.HostName != null &&
                    this.HostName.Equals(other.HostName)
                ) && 
                (
                    this.HostNameMetadata == other.HostNameMetadata ||
                    this.HostNameMetadata != null &&
                    this.HostNameMetadata.Equals(other.HostNameMetadata)
                ) && 
                (
                    this.IdCheckConfigurationName == other.IdCheckConfigurationName ||
                    this.IdCheckConfigurationName != null &&
                    this.IdCheckConfigurationName.Equals(other.IdCheckConfigurationName)
                ) && 
                (
                    this.IdCheckConfigurationNameMetadata == other.IdCheckConfigurationNameMetadata ||
                    this.IdCheckConfigurationNameMetadata != null &&
                    this.IdCheckConfigurationNameMetadata.Equals(other.IdCheckConfigurationNameMetadata)
                ) && 
                (
                    this.IdCheckInformationInput == other.IdCheckInformationInput ||
                    this.IdCheckInformationInput != null &&
                    this.IdCheckInformationInput.Equals(other.IdCheckInformationInput)
                ) && 
                (
                    this.IdentityVerification == other.IdentityVerification ||
                    this.IdentityVerification != null &&
                    this.IdentityVerification.Equals(other.IdentityVerification)
                ) && 
                (
                    this.InheritEmailNotificationConfiguration == other.InheritEmailNotificationConfiguration ||
                    this.InheritEmailNotificationConfiguration != null &&
                    this.InheritEmailNotificationConfiguration.Equals(other.InheritEmailNotificationConfiguration)
                ) && 
                (
                    this.InPersonSigningType == other.InPersonSigningType ||
                    this.InPersonSigningType != null &&
                    this.InPersonSigningType.Equals(other.InPersonSigningType)
                ) && 
                (
                    this.InPersonSigningTypeMetadata == other.InPersonSigningTypeMetadata ||
                    this.InPersonSigningTypeMetadata != null &&
                    this.InPersonSigningTypeMetadata.Equals(other.InPersonSigningTypeMetadata)
                ) && 
                (
                    this.LockedRecipientPhoneAuthEditable == other.LockedRecipientPhoneAuthEditable ||
                    this.LockedRecipientPhoneAuthEditable != null &&
                    this.LockedRecipientPhoneAuthEditable.Equals(other.LockedRecipientPhoneAuthEditable)
                ) && 
                (
                    this.LockedRecipientSmsEditable == other.LockedRecipientSmsEditable ||
                    this.LockedRecipientSmsEditable != null &&
                    this.LockedRecipientSmsEditable.Equals(other.LockedRecipientSmsEditable)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NameMetadata == other.NameMetadata ||
                    this.NameMetadata != null &&
                    this.NameMetadata.Equals(other.NameMetadata)
                ) && 
                (
                    this.NotaryHost == other.NotaryHost ||
                    this.NotaryHost != null &&
                    this.NotaryHost.Equals(other.NotaryHost)
                ) && 
                (
                    this.NotaryId == other.NotaryId ||
                    this.NotaryId != null &&
                    this.NotaryId.Equals(other.NotaryId)
                ) && 
                (
                    this.Note == other.Note ||
                    this.Note != null &&
                    this.Note.Equals(other.Note)
                ) && 
                (
                    this.NoteMetadata == other.NoteMetadata ||
                    this.NoteMetadata != null &&
                    this.NoteMetadata.Equals(other.NoteMetadata)
                ) && 
                (
                    this.OfflineAttributes == other.OfflineAttributes ||
                    this.OfflineAttributes != null &&
                    this.OfflineAttributes.Equals(other.OfflineAttributes)
                ) && 
                (
                    this.PhoneAuthentication == other.PhoneAuthentication ||
                    this.PhoneAuthentication != null &&
                    this.PhoneAuthentication.Equals(other.PhoneAuthentication)
                ) && 
                (
                    this.ProofFile == other.ProofFile ||
                    this.ProofFile != null &&
                    this.ProofFile.Equals(other.ProofFile)
                ) && 
                (
                    this.RecipientAttachments == other.RecipientAttachments ||
                    this.RecipientAttachments != null &&
                    this.RecipientAttachments.SequenceEqual(other.RecipientAttachments)
                ) && 
                (
                    this.RecipientAuthenticationStatus == other.RecipientAuthenticationStatus ||
                    this.RecipientAuthenticationStatus != null &&
                    this.RecipientAuthenticationStatus.Equals(other.RecipientAuthenticationStatus)
                ) && 
                (
                    this.RecipientFeatureMetadata == other.RecipientFeatureMetadata ||
                    this.RecipientFeatureMetadata != null &&
                    this.RecipientFeatureMetadata.SequenceEqual(other.RecipientFeatureMetadata)
                ) && 
                (
                    this.RecipientId == other.RecipientId ||
                    this.RecipientId != null &&
                    this.RecipientId.Equals(other.RecipientId)
                ) && 
                (
                    this.RecipientIdGuid == other.RecipientIdGuid ||
                    this.RecipientIdGuid != null &&
                    this.RecipientIdGuid.Equals(other.RecipientIdGuid)
                ) && 
                (
                    this.RecipientSignatureProviders == other.RecipientSignatureProviders ||
                    this.RecipientSignatureProviders != null &&
                    this.RecipientSignatureProviders.SequenceEqual(other.RecipientSignatureProviders)
                ) && 
                (
                    this.RecipientSuppliesTabs == other.RecipientSuppliesTabs ||
                    this.RecipientSuppliesTabs != null &&
                    this.RecipientSuppliesTabs.Equals(other.RecipientSuppliesTabs)
                ) && 
                (
                    this.RecipientType == other.RecipientType ||
                    this.RecipientType != null &&
                    this.RecipientType.Equals(other.RecipientType)
                ) && 
                (
                    this.RecipientTypeMetadata == other.RecipientTypeMetadata ||
                    this.RecipientTypeMetadata != null &&
                    this.RecipientTypeMetadata.Equals(other.RecipientTypeMetadata)
                ) && 
                (
                    this.RequireIdLookup == other.RequireIdLookup ||
                    this.RequireIdLookup != null &&
                    this.RequireIdLookup.Equals(other.RequireIdLookup)
                ) && 
                (
                    this.RequireIdLookupMetadata == other.RequireIdLookupMetadata ||
                    this.RequireIdLookupMetadata != null &&
                    this.RequireIdLookupMetadata.Equals(other.RequireIdLookupMetadata)
                ) && 
                (
                    this.RequireSignerCertificate == other.RequireSignerCertificate ||
                    this.RequireSignerCertificate != null &&
                    this.RequireSignerCertificate.Equals(other.RequireSignerCertificate)
                ) && 
                (
                    this.RequireSignOnPaper == other.RequireSignOnPaper ||
                    this.RequireSignOnPaper != null &&
                    this.RequireSignOnPaper.Equals(other.RequireSignOnPaper)
                ) && 
                (
                    this.RequireUploadSignature == other.RequireUploadSignature ||
                    this.RequireUploadSignature != null &&
                    this.RequireUploadSignature.Equals(other.RequireUploadSignature)
                ) && 
                (
                    this.RoleName == other.RoleName ||
                    this.RoleName != null &&
                    this.RoleName.Equals(other.RoleName)
                ) && 
                (
                    this.RoutingOrder == other.RoutingOrder ||
                    this.RoutingOrder != null &&
                    this.RoutingOrder.Equals(other.RoutingOrder)
                ) && 
                (
                    this.RoutingOrderMetadata == other.RoutingOrderMetadata ||
                    this.RoutingOrderMetadata != null &&
                    this.RoutingOrderMetadata.Equals(other.RoutingOrderMetadata)
                ) && 
                (
                    this.SentDateTime == other.SentDateTime ||
                    this.SentDateTime != null &&
                    this.SentDateTime.Equals(other.SentDateTime)
                ) && 
                (
                    this.SignatureInfo == other.SignatureInfo ||
                    this.SignatureInfo != null &&
                    this.SignatureInfo.Equals(other.SignatureInfo)
                ) && 
                (
                    this.SignedDateTime == other.SignedDateTime ||
                    this.SignedDateTime != null &&
                    this.SignedDateTime.Equals(other.SignedDateTime)
                ) && 
                (
                    this.SignerEmail == other.SignerEmail ||
                    this.SignerEmail != null &&
                    this.SignerEmail.Equals(other.SignerEmail)
                ) && 
                (
                    this.SignerEmailMetadata == other.SignerEmailMetadata ||
                    this.SignerEmailMetadata != null &&
                    this.SignerEmailMetadata.Equals(other.SignerEmailMetadata)
                ) && 
                (
                    this.SignerFirstName == other.SignerFirstName ||
                    this.SignerFirstName != null &&
                    this.SignerFirstName.Equals(other.SignerFirstName)
                ) && 
                (
                    this.SignerFirstNameMetadata == other.SignerFirstNameMetadata ||
                    this.SignerFirstNameMetadata != null &&
                    this.SignerFirstNameMetadata.Equals(other.SignerFirstNameMetadata)
                ) && 
                (
                    this.SignerLastName == other.SignerLastName ||
                    this.SignerLastName != null &&
                    this.SignerLastName.Equals(other.SignerLastName)
                ) && 
                (
                    this.SignerLastNameMetadata == other.SignerLastNameMetadata ||
                    this.SignerLastNameMetadata != null &&
                    this.SignerLastNameMetadata.Equals(other.SignerLastNameMetadata)
                ) && 
                (
                    this.SignerName == other.SignerName ||
                    this.SignerName != null &&
                    this.SignerName.Equals(other.SignerName)
                ) && 
                (
                    this.SignerNameMetadata == other.SignerNameMetadata ||
                    this.SignerNameMetadata != null &&
                    this.SignerNameMetadata.Equals(other.SignerNameMetadata)
                ) && 
                (
                    this.SignInEachLocation == other.SignInEachLocation ||
                    this.SignInEachLocation != null &&
                    this.SignInEachLocation.Equals(other.SignInEachLocation)
                ) && 
                (
                    this.SignInEachLocationMetadata == other.SignInEachLocationMetadata ||
                    this.SignInEachLocationMetadata != null &&
                    this.SignInEachLocationMetadata.Equals(other.SignInEachLocationMetadata)
                ) && 
                (
                    this.SigningGroupId == other.SigningGroupId ||
                    this.SigningGroupId != null &&
                    this.SigningGroupId.Equals(other.SigningGroupId)
                ) && 
                (
                    this.SigningGroupIdMetadata == other.SigningGroupIdMetadata ||
                    this.SigningGroupIdMetadata != null &&
                    this.SigningGroupIdMetadata.Equals(other.SigningGroupIdMetadata)
                ) && 
                (
                    this.SigningGroupName == other.SigningGroupName ||
                    this.SigningGroupName != null &&
                    this.SigningGroupName.Equals(other.SigningGroupName)
                ) && 
                (
                    this.SigningGroupUsers == other.SigningGroupUsers ||
                    this.SigningGroupUsers != null &&
                    this.SigningGroupUsers.SequenceEqual(other.SigningGroupUsers)
                ) && 
                (
                    this.SmsAuthentication == other.SmsAuthentication ||
                    this.SmsAuthentication != null &&
                    this.SmsAuthentication.Equals(other.SmsAuthentication)
                ) && 
                (
                    this.SocialAuthentications == other.SocialAuthentications ||
                    this.SocialAuthentications != null &&
                    this.SocialAuthentications.SequenceEqual(other.SocialAuthentications)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusCode == other.StatusCode ||
                    this.StatusCode != null &&
                    this.StatusCode.Equals(other.StatusCode)
                ) && 
                (
                    this.SuppressEmails == other.SuppressEmails ||
                    this.SuppressEmails != null &&
                    this.SuppressEmails.Equals(other.SuppressEmails)
                ) && 
                (
                    this.Tabs == other.Tabs ||
                    this.Tabs != null &&
                    this.Tabs.Equals(other.Tabs)
                ) && 
                (
                    this.TemplateLocked == other.TemplateLocked ||
                    this.TemplateLocked != null &&
                    this.TemplateLocked.Equals(other.TemplateLocked)
                ) && 
                (
                    this.TemplateRequired == other.TemplateRequired ||
                    this.TemplateRequired != null &&
                    this.TemplateRequired.Equals(other.TemplateRequired)
                ) && 
                (
                    this.TotalTabCount == other.TotalTabCount ||
                    this.TotalTabCount != null &&
                    this.TotalTabCount.Equals(other.TotalTabCount)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.WebFormRecipientViewId == other.WebFormRecipientViewId ||
                    this.WebFormRecipientViewId != null &&
                    this.WebFormRecipientViewId.Equals(other.WebFormRecipientViewId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessCode != null)
                    hash = hash * 59 + this.AccessCode.GetHashCode();
                if (this.AccessCodeMetadata != null)
                    hash = hash * 59 + this.AccessCodeMetadata.GetHashCode();
                if (this.AddAccessCodeToEmail != null)
                    hash = hash * 59 + this.AddAccessCodeToEmail.GetHashCode();
                if (this.AllowSystemOverrideForLockedRecipient != null)
                    hash = hash * 59 + this.AllowSystemOverrideForLockedRecipient.GetHashCode();
                if (this.AutoNavigation != null)
                    hash = hash * 59 + this.AutoNavigation.GetHashCode();
                if (this.AutoRespondedReason != null)
                    hash = hash * 59 + this.AutoRespondedReason.GetHashCode();
                if (this.BulkSendV2Recipient != null)
                    hash = hash * 59 + this.BulkSendV2Recipient.GetHashCode();
                if (this.CanSignOffline != null)
                    hash = hash * 59 + this.CanSignOffline.GetHashCode();
                if (this.ClientUserId != null)
                    hash = hash * 59 + this.ClientUserId.GetHashCode();
                if (this.CompletedCount != null)
                    hash = hash * 59 + this.CompletedCount.GetHashCode();
                if (this.CreationReason != null)
                    hash = hash * 59 + this.CreationReason.GetHashCode();
                if (this.CustomFields != null)
                    hash = hash * 59 + this.CustomFields.GetHashCode();
                if (this.DeclinedDateTime != null)
                    hash = hash * 59 + this.DeclinedDateTime.GetHashCode();
                if (this.DeclinedReason != null)
                    hash = hash * 59 + this.DeclinedReason.GetHashCode();
                if (this.DefaultRecipient != null)
                    hash = hash * 59 + this.DefaultRecipient.GetHashCode();
                if (this.DeliveredDateTime != null)
                    hash = hash * 59 + this.DeliveredDateTime.GetHashCode();
                if (this.DeliveryMethod != null)
                    hash = hash * 59 + this.DeliveryMethod.GetHashCode();
                if (this.DeliveryMethodMetadata != null)
                    hash = hash * 59 + this.DeliveryMethodMetadata.GetHashCode();
                if (this.DesignatorId != null)
                    hash = hash * 59 + this.DesignatorId.GetHashCode();
                if (this.DesignatorIdGuid != null)
                    hash = hash * 59 + this.DesignatorIdGuid.GetHashCode();
                if (this.DocumentTemplateId != null)
                    hash = hash * 59 + this.DocumentTemplateId.GetHashCode();
                if (this.DocumentVisibility != null)
                    hash = hash * 59 + this.DocumentVisibility.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.EmailMetadata != null)
                    hash = hash * 59 + this.EmailMetadata.GetHashCode();
                if (this.EmailNotification != null)
                    hash = hash * 59 + this.EmailNotification.GetHashCode();
                if (this.EmbeddedRecipientStartURL != null)
                    hash = hash * 59 + this.EmbeddedRecipientStartURL.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.ExcludedDocuments != null)
                    hash = hash * 59 + this.ExcludedDocuments.GetHashCode();
                if (this.FaxNumber != null)
                    hash = hash * 59 + this.FaxNumber.GetHashCode();
                if (this.FaxNumberMetadata != null)
                    hash = hash * 59 + this.FaxNumberMetadata.GetHashCode();
                if (this.HostEmail != null)
                    hash = hash * 59 + this.HostEmail.GetHashCode();
                if (this.HostEmailMetadata != null)
                    hash = hash * 59 + this.HostEmailMetadata.GetHashCode();
                if (this.HostName != null)
                    hash = hash * 59 + this.HostName.GetHashCode();
                if (this.HostNameMetadata != null)
                    hash = hash * 59 + this.HostNameMetadata.GetHashCode();
                if (this.IdCheckConfigurationName != null)
                    hash = hash * 59 + this.IdCheckConfigurationName.GetHashCode();
                if (this.IdCheckConfigurationNameMetadata != null)
                    hash = hash * 59 + this.IdCheckConfigurationNameMetadata.GetHashCode();
                if (this.IdCheckInformationInput != null)
                    hash = hash * 59 + this.IdCheckInformationInput.GetHashCode();
                if (this.IdentityVerification != null)
                    hash = hash * 59 + this.IdentityVerification.GetHashCode();
                if (this.InheritEmailNotificationConfiguration != null)
                    hash = hash * 59 + this.InheritEmailNotificationConfiguration.GetHashCode();
                if (this.InPersonSigningType != null)
                    hash = hash * 59 + this.InPersonSigningType.GetHashCode();
                if (this.InPersonSigningTypeMetadata != null)
                    hash = hash * 59 + this.InPersonSigningTypeMetadata.GetHashCode();
                if (this.LockedRecipientPhoneAuthEditable != null)
                    hash = hash * 59 + this.LockedRecipientPhoneAuthEditable.GetHashCode();
                if (this.LockedRecipientSmsEditable != null)
                    hash = hash * 59 + this.LockedRecipientSmsEditable.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NameMetadata != null)
                    hash = hash * 59 + this.NameMetadata.GetHashCode();
                if (this.NotaryHost != null)
                    hash = hash * 59 + this.NotaryHost.GetHashCode();
                if (this.NotaryId != null)
                    hash = hash * 59 + this.NotaryId.GetHashCode();
                if (this.Note != null)
                    hash = hash * 59 + this.Note.GetHashCode();
                if (this.NoteMetadata != null)
                    hash = hash * 59 + this.NoteMetadata.GetHashCode();
                if (this.OfflineAttributes != null)
                    hash = hash * 59 + this.OfflineAttributes.GetHashCode();
                if (this.PhoneAuthentication != null)
                    hash = hash * 59 + this.PhoneAuthentication.GetHashCode();
                if (this.ProofFile != null)
                    hash = hash * 59 + this.ProofFile.GetHashCode();
                if (this.RecipientAttachments != null)
                    hash = hash * 59 + this.RecipientAttachments.GetHashCode();
                if (this.RecipientAuthenticationStatus != null)
                    hash = hash * 59 + this.RecipientAuthenticationStatus.GetHashCode();
                if (this.RecipientFeatureMetadata != null)
                    hash = hash * 59 + this.RecipientFeatureMetadata.GetHashCode();
                if (this.RecipientId != null)
                    hash = hash * 59 + this.RecipientId.GetHashCode();
                if (this.RecipientIdGuid != null)
                    hash = hash * 59 + this.RecipientIdGuid.GetHashCode();
                if (this.RecipientSignatureProviders != null)
                    hash = hash * 59 + this.RecipientSignatureProviders.GetHashCode();
                if (this.RecipientSuppliesTabs != null)
                    hash = hash * 59 + this.RecipientSuppliesTabs.GetHashCode();
                if (this.RecipientType != null)
                    hash = hash * 59 + this.RecipientType.GetHashCode();
                if (this.RecipientTypeMetadata != null)
                    hash = hash * 59 + this.RecipientTypeMetadata.GetHashCode();
                if (this.RequireIdLookup != null)
                    hash = hash * 59 + this.RequireIdLookup.GetHashCode();
                if (this.RequireIdLookupMetadata != null)
                    hash = hash * 59 + this.RequireIdLookupMetadata.GetHashCode();
                if (this.RequireSignerCertificate != null)
                    hash = hash * 59 + this.RequireSignerCertificate.GetHashCode();
                if (this.RequireSignOnPaper != null)
                    hash = hash * 59 + this.RequireSignOnPaper.GetHashCode();
                if (this.RequireUploadSignature != null)
                    hash = hash * 59 + this.RequireUploadSignature.GetHashCode();
                if (this.RoleName != null)
                    hash = hash * 59 + this.RoleName.GetHashCode();
                if (this.RoutingOrder != null)
                    hash = hash * 59 + this.RoutingOrder.GetHashCode();
                if (this.RoutingOrderMetadata != null)
                    hash = hash * 59 + this.RoutingOrderMetadata.GetHashCode();
                if (this.SentDateTime != null)
                    hash = hash * 59 + this.SentDateTime.GetHashCode();
                if (this.SignatureInfo != null)
                    hash = hash * 59 + this.SignatureInfo.GetHashCode();
                if (this.SignedDateTime != null)
                    hash = hash * 59 + this.SignedDateTime.GetHashCode();
                if (this.SignerEmail != null)
                    hash = hash * 59 + this.SignerEmail.GetHashCode();
                if (this.SignerEmailMetadata != null)
                    hash = hash * 59 + this.SignerEmailMetadata.GetHashCode();
                if (this.SignerFirstName != null)
                    hash = hash * 59 + this.SignerFirstName.GetHashCode();
                if (this.SignerFirstNameMetadata != null)
                    hash = hash * 59 + this.SignerFirstNameMetadata.GetHashCode();
                if (this.SignerLastName != null)
                    hash = hash * 59 + this.SignerLastName.GetHashCode();
                if (this.SignerLastNameMetadata != null)
                    hash = hash * 59 + this.SignerLastNameMetadata.GetHashCode();
                if (this.SignerName != null)
                    hash = hash * 59 + this.SignerName.GetHashCode();
                if (this.SignerNameMetadata != null)
                    hash = hash * 59 + this.SignerNameMetadata.GetHashCode();
                if (this.SignInEachLocation != null)
                    hash = hash * 59 + this.SignInEachLocation.GetHashCode();
                if (this.SignInEachLocationMetadata != null)
                    hash = hash * 59 + this.SignInEachLocationMetadata.GetHashCode();
                if (this.SigningGroupId != null)
                    hash = hash * 59 + this.SigningGroupId.GetHashCode();
                if (this.SigningGroupIdMetadata != null)
                    hash = hash * 59 + this.SigningGroupIdMetadata.GetHashCode();
                if (this.SigningGroupName != null)
                    hash = hash * 59 + this.SigningGroupName.GetHashCode();
                if (this.SigningGroupUsers != null)
                    hash = hash * 59 + this.SigningGroupUsers.GetHashCode();
                if (this.SmsAuthentication != null)
                    hash = hash * 59 + this.SmsAuthentication.GetHashCode();
                if (this.SocialAuthentications != null)
                    hash = hash * 59 + this.SocialAuthentications.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusCode != null)
                    hash = hash * 59 + this.StatusCode.GetHashCode();
                if (this.SuppressEmails != null)
                    hash = hash * 59 + this.SuppressEmails.GetHashCode();
                if (this.Tabs != null)
                    hash = hash * 59 + this.Tabs.GetHashCode();
                if (this.TemplateLocked != null)
                    hash = hash * 59 + this.TemplateLocked.GetHashCode();
                if (this.TemplateRequired != null)
                    hash = hash * 59 + this.TemplateRequired.GetHashCode();
                if (this.TotalTabCount != null)
                    hash = hash * 59 + this.TotalTabCount.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.WebFormRecipientViewId != null)
                    hash = hash * 59 + this.WebFormRecipientViewId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
