/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// One of the selectable radio buttons in the &#x60;radios&#x60; property of a [&#x60;radioGroup&#x60;](/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/) tab. 
    /// </summary>
    [DataContract]
    public partial class Radio :  IEquatable<Radio>, IValidatableObject
    {
        public Radio()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Radio" /> class.
        /// </summary>
        /// <param name="AnchorAllowWhiteSpaceInCharacters">AnchorAllowWhiteSpaceInCharacters.</param>
        /// <param name="AnchorAllowWhiteSpaceInCharactersMetadata">Metadata that indicates whether the &#x60;anchorAllowWhiteSpaceInCharacters&#x60; property is editable..</param>
        /// <param name="AnchorCaseSensitive">When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**..</param>
        /// <param name="AnchorCaseSensitiveMetadata">Metadata that indicates whether the &#x60;anchorCaseSensitive&#x60; property is editable..</param>
        /// <param name="AnchorHorizontalAlignment">Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**..</param>
        /// <param name="AnchorHorizontalAlignmentMetadata">Metadata that indicates whether the &#x60;anchorHorizontalAlignment&#x60; property is editable..</param>
        /// <param name="AnchorIgnoreIfNotPresent">When set to **true**, this tab is ignored if anchorString is not found in the document..</param>
        /// <param name="AnchorIgnoreIfNotPresentMetadata">Metadata that indicates whether the &#x60;anchorIgnoreIfNotPresent&#x60; property is editable..</param>
        /// <param name="AnchorMatchWholeWord">When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**..</param>
        /// <param name="AnchorMatchWholeWordMetadata">Metadata that indicates whether the &#x60;anchorMatchWholeWord&#x60; property is editable..</param>
        /// <param name="AnchorString">Anchor text information for a radio button..</param>
        /// <param name="AnchorStringMetadata">Metadata that indicates whether the &#x60;anchorString&#x60; property is editable..</param>
        /// <param name="AnchorTabProcessorVersion">AnchorTabProcessorVersion.</param>
        /// <param name="AnchorTabProcessorVersionMetadata">Reserved for DocuSign..</param>
        /// <param name="AnchorUnits">Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches..</param>
        /// <param name="AnchorUnitsMetadata">Metadata that indicates whether the &#x60;anchorUnits&#x60; property is editable..</param>
        /// <param name="AnchorXOffset">Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString..</param>
        /// <param name="AnchorXOffsetMetadata">Metadata that indicates whether the &#x60;anchorXOffset&#x60; property is editable..</param>
        /// <param name="AnchorYOffset">Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString..</param>
        /// <param name="AnchorYOffsetMetadata">Metadata that indicates whether the &#x60;anchorYOffset&#x60; property is editable..</param>
        /// <param name="Bold">When set to **true**, the information in the tab is bold..</param>
        /// <param name="BoldMetadata">Metadata that indicates whether the &#x60;bold&#x60; property is editable..</param>
        /// <param name="Caption">Caption.</param>
        /// <param name="CaptionMetadata">CaptionMetadata.</param>
        /// <param name="ConnectedObjectDetails">ConnectedObjectDetails.</param>
        /// <param name="ErrorDetails">Array or errors..</param>
        /// <param name="Font">The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default..</param>
        /// <param name="FontColor">The font color used for the information in the tab.  Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White..</param>
        /// <param name="FontColorMetadata">Metadata that indicates whether the &#x60;fontColor&#x60; property is editable..</param>
        /// <param name="FontMetadata">Metadata that indicates whether the &#x60;font&#x60; property is editable..</param>
        /// <param name="FontSize">The font size used for the information in the tab.  Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72..</param>
        /// <param name="FontSizeMetadata">Metadata that indicates whether the &#x60;fontSize&#x60; property is editable..</param>
        /// <param name="Italic">When set to **true**, the information in the tab is italic..</param>
        /// <param name="ItalicMetadata">Metadata that indicates whether the &#x60;italic&#x60; property is editable..</param>
        /// <param name="Locked">When set to **true**, the signer cannot change the data of the custom tab..</param>
        /// <param name="LockedMetadata">Metadata that indicates whether the &#x60;locked&#x60; property is editable..</param>
        /// <param name="MergeFieldXml">MergeFieldXml.</param>
        /// <param name="PageNumber">Specifies the page number on which the tab is located..</param>
        /// <param name="PageNumberMetadata">Metadata that indicates whether the &#x60;pageNumber&#x60; property is editable..</param>
        /// <param name="Required">When set to **true**, the signer is required to fill out this tab.</param>
        /// <param name="RequiredMetadata">Metadata that indicates whether the &#x60;required&#x60; property is editable..</param>
        /// <param name="Selected">When set to **true**, the radio button is selected..</param>
        /// <param name="SelectedMetadata">Metadata that indicates whether the &#x60;selected&#x60; property is editable..</param>
        /// <param name="Status">Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later..</param>
        /// <param name="StatusMetadata">Metadata that indicates whether the &#x60;status&#x60; property is editable..</param>
        /// <param name="TabFullyQualifiedPath">TabFullyQualifiedPath.</param>
        /// <param name="TabId">The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].     .</param>
        /// <param name="TabIdMetadata">Metadata that indicates whether the &#x60;tabId&#x60; property is editable..</param>
        /// <param name="TabOrder">TabOrder.</param>
        /// <param name="TabOrderMetadata">Metadata that indicates whether the &#x60;tabOrder&#x60; property is editable..</param>
        /// <param name="Underline">When set to **true**, the information in the tab is underlined..</param>
        /// <param name="UnderlineMetadata">Metadata that indicates whether the &#x60;underline&#x60; property is editable..</param>
        /// <param name="Value">Specifies the value of the tab. .</param>
        /// <param name="ValueMetadata">Metadata that indicates whether the &#x60;value&#x60; property is editable..</param>
        /// <param name="XPosition">This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position..</param>
        /// <param name="XPositionMetadata">Metadata that indicates whether the &#x60;xPosition&#x60; property is editable..</param>
        /// <param name="YPosition">This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position..</param>
        /// <param name="YPositionMetadata">Metadata that indicates whether the &#x60;yPosition&#x60; property is editable..</param>
        public Radio(string AnchorAllowWhiteSpaceInCharacters = default(string), PropertyMetadata AnchorAllowWhiteSpaceInCharactersMetadata = default(PropertyMetadata), string AnchorCaseSensitive = default(string), PropertyMetadata AnchorCaseSensitiveMetadata = default(PropertyMetadata), string AnchorHorizontalAlignment = default(string), PropertyMetadata AnchorHorizontalAlignmentMetadata = default(PropertyMetadata), string AnchorIgnoreIfNotPresent = default(string), PropertyMetadata AnchorIgnoreIfNotPresentMetadata = default(PropertyMetadata), string AnchorMatchWholeWord = default(string), PropertyMetadata AnchorMatchWholeWordMetadata = default(PropertyMetadata), string AnchorString = default(string), PropertyMetadata AnchorStringMetadata = default(PropertyMetadata), string AnchorTabProcessorVersion = default(string), PropertyMetadata AnchorTabProcessorVersionMetadata = default(PropertyMetadata), string AnchorUnits = default(string), PropertyMetadata AnchorUnitsMetadata = default(PropertyMetadata), string AnchorXOffset = default(string), PropertyMetadata AnchorXOffsetMetadata = default(PropertyMetadata), string AnchorYOffset = default(string), PropertyMetadata AnchorYOffsetMetadata = default(PropertyMetadata), string Bold = default(string), PropertyMetadata BoldMetadata = default(PropertyMetadata), string Caption = default(string), PropertyMetadata CaptionMetadata = default(PropertyMetadata), ConnectedObjectDetails ConnectedObjectDetails = default(ConnectedObjectDetails), ErrorDetails ErrorDetails = default(ErrorDetails), string Font = default(string), string FontColor = default(string), PropertyMetadata FontColorMetadata = default(PropertyMetadata), PropertyMetadata FontMetadata = default(PropertyMetadata), string FontSize = default(string), PropertyMetadata FontSizeMetadata = default(PropertyMetadata), string Italic = default(string), PropertyMetadata ItalicMetadata = default(PropertyMetadata), string Locked = default(string), PropertyMetadata LockedMetadata = default(PropertyMetadata), string MergeFieldXml = default(string), string PageNumber = default(string), PropertyMetadata PageNumberMetadata = default(PropertyMetadata), string Required = default(string), PropertyMetadata RequiredMetadata = default(PropertyMetadata), string Selected = default(string), PropertyMetadata SelectedMetadata = default(PropertyMetadata), string Status = default(string), PropertyMetadata StatusMetadata = default(PropertyMetadata), string TabFullyQualifiedPath = default(string), string TabId = default(string), PropertyMetadata TabIdMetadata = default(PropertyMetadata), string TabOrder = default(string), PropertyMetadata TabOrderMetadata = default(PropertyMetadata), string Underline = default(string), PropertyMetadata UnderlineMetadata = default(PropertyMetadata), string Value = default(string), PropertyMetadata ValueMetadata = default(PropertyMetadata), string XPosition = default(string), PropertyMetadata XPositionMetadata = default(PropertyMetadata), string YPosition = default(string), PropertyMetadata YPositionMetadata = default(PropertyMetadata))
        {
            this.AnchorAllowWhiteSpaceInCharacters = AnchorAllowWhiteSpaceInCharacters;
            this.AnchorAllowWhiteSpaceInCharactersMetadata = AnchorAllowWhiteSpaceInCharactersMetadata;
            this.AnchorCaseSensitive = AnchorCaseSensitive;
            this.AnchorCaseSensitiveMetadata = AnchorCaseSensitiveMetadata;
            this.AnchorHorizontalAlignment = AnchorHorizontalAlignment;
            this.AnchorHorizontalAlignmentMetadata = AnchorHorizontalAlignmentMetadata;
            this.AnchorIgnoreIfNotPresent = AnchorIgnoreIfNotPresent;
            this.AnchorIgnoreIfNotPresentMetadata = AnchorIgnoreIfNotPresentMetadata;
            this.AnchorMatchWholeWord = AnchorMatchWholeWord;
            this.AnchorMatchWholeWordMetadata = AnchorMatchWholeWordMetadata;
            this.AnchorString = AnchorString;
            this.AnchorStringMetadata = AnchorStringMetadata;
            this.AnchorTabProcessorVersion = AnchorTabProcessorVersion;
            this.AnchorTabProcessorVersionMetadata = AnchorTabProcessorVersionMetadata;
            this.AnchorUnits = AnchorUnits;
            this.AnchorUnitsMetadata = AnchorUnitsMetadata;
            this.AnchorXOffset = AnchorXOffset;
            this.AnchorXOffsetMetadata = AnchorXOffsetMetadata;
            this.AnchorYOffset = AnchorYOffset;
            this.AnchorYOffsetMetadata = AnchorYOffsetMetadata;
            this.Bold = Bold;
            this.BoldMetadata = BoldMetadata;
            this.Caption = Caption;
            this.CaptionMetadata = CaptionMetadata;
            this.ConnectedObjectDetails = ConnectedObjectDetails;
            this.ErrorDetails = ErrorDetails;
            this.Font = Font;
            this.FontColor = FontColor;
            this.FontColorMetadata = FontColorMetadata;
            this.FontMetadata = FontMetadata;
            this.FontSize = FontSize;
            this.FontSizeMetadata = FontSizeMetadata;
            this.Italic = Italic;
            this.ItalicMetadata = ItalicMetadata;
            this.Locked = Locked;
            this.LockedMetadata = LockedMetadata;
            this.MergeFieldXml = MergeFieldXml;
            this.PageNumber = PageNumber;
            this.PageNumberMetadata = PageNumberMetadata;
            this.Required = Required;
            this.RequiredMetadata = RequiredMetadata;
            this.Selected = Selected;
            this.SelectedMetadata = SelectedMetadata;
            this.Status = Status;
            this.StatusMetadata = StatusMetadata;
            this.TabFullyQualifiedPath = TabFullyQualifiedPath;
            this.TabId = TabId;
            this.TabIdMetadata = TabIdMetadata;
            this.TabOrder = TabOrder;
            this.TabOrderMetadata = TabOrderMetadata;
            this.Underline = Underline;
            this.UnderlineMetadata = UnderlineMetadata;
            this.Value = Value;
            this.ValueMetadata = ValueMetadata;
            this.XPosition = XPosition;
            this.XPositionMetadata = XPositionMetadata;
            this.YPosition = YPosition;
            this.YPositionMetadata = YPositionMetadata;
        }
        
        /// <summary>
        /// Gets or Sets AnchorAllowWhiteSpaceInCharacters
        /// </summary>
        [DataMember(Name="anchorAllowWhiteSpaceInCharacters", EmitDefaultValue=false)]
        public string AnchorAllowWhiteSpaceInCharacters { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorAllowWhiteSpaceInCharacters&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorAllowWhiteSpaceInCharacters&#x60; property is editable.</value>
        [DataMember(Name="anchorAllowWhiteSpaceInCharactersMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorAllowWhiteSpaceInCharactersMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.
        /// </summary>
        /// <value>When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.</value>
        [DataMember(Name="anchorCaseSensitive", EmitDefaultValue=false)]
        public string AnchorCaseSensitive { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorCaseSensitive&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorCaseSensitive&#x60; property is editable.</value>
        [DataMember(Name="anchorCaseSensitiveMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorCaseSensitiveMetadata { get; set; }
        /// <summary>
        /// Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.
        /// </summary>
        /// <value>Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.</value>
        [DataMember(Name="anchorHorizontalAlignment", EmitDefaultValue=false)]
        public string AnchorHorizontalAlignment { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorHorizontalAlignment&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorHorizontalAlignment&#x60; property is editable.</value>
        [DataMember(Name="anchorHorizontalAlignmentMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorHorizontalAlignmentMetadata { get; set; }
        /// <summary>
        /// When set to **true**, this tab is ignored if anchorString is not found in the document.
        /// </summary>
        /// <value>When set to **true**, this tab is ignored if anchorString is not found in the document.</value>
        [DataMember(Name="anchorIgnoreIfNotPresent", EmitDefaultValue=false)]
        public string AnchorIgnoreIfNotPresent { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorIgnoreIfNotPresent&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorIgnoreIfNotPresent&#x60; property is editable.</value>
        [DataMember(Name="anchorIgnoreIfNotPresentMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorIgnoreIfNotPresentMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.
        /// </summary>
        /// <value>When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.</value>
        [DataMember(Name="anchorMatchWholeWord", EmitDefaultValue=false)]
        public string AnchorMatchWholeWord { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorMatchWholeWord&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorMatchWholeWord&#x60; property is editable.</value>
        [DataMember(Name="anchorMatchWholeWordMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorMatchWholeWordMetadata { get; set; }
        /// <summary>
        /// Anchor text information for a radio button.
        /// </summary>
        /// <value>Anchor text information for a radio button.</value>
        [DataMember(Name="anchorString", EmitDefaultValue=false)]
        public string AnchorString { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorString&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorString&#x60; property is editable.</value>
        [DataMember(Name="anchorStringMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorStringMetadata { get; set; }
        /// <summary>
        /// Gets or Sets AnchorTabProcessorVersion
        /// </summary>
        [DataMember(Name="anchorTabProcessorVersion", EmitDefaultValue=false)]
        public string AnchorTabProcessorVersion { get; set; }
        /// <summary>
        /// Reserved for DocuSign.
        /// </summary>
        /// <value>Reserved for DocuSign.</value>
        [DataMember(Name="anchorTabProcessorVersionMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorTabProcessorVersionMetadata { get; set; }
        /// <summary>
        /// Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.
        /// </summary>
        /// <value>Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.</value>
        [DataMember(Name="anchorUnits", EmitDefaultValue=false)]
        public string AnchorUnits { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorUnits&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorUnits&#x60; property is editable.</value>
        [DataMember(Name="anchorUnitsMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorUnitsMetadata { get; set; }
        /// <summary>
        /// Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString.
        /// </summary>
        /// <value>Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString.</value>
        [DataMember(Name="anchorXOffset", EmitDefaultValue=false)]
        public string AnchorXOffset { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorXOffset&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorXOffset&#x60; property is editable.</value>
        [DataMember(Name="anchorXOffsetMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorXOffsetMetadata { get; set; }
        /// <summary>
        /// Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString.
        /// </summary>
        /// <value>Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString.</value>
        [DataMember(Name="anchorYOffset", EmitDefaultValue=false)]
        public string AnchorYOffset { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;anchorYOffset&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;anchorYOffset&#x60; property is editable.</value>
        [DataMember(Name="anchorYOffsetMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AnchorYOffsetMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the information in the tab is bold.
        /// </summary>
        /// <value>When set to **true**, the information in the tab is bold.</value>
        [DataMember(Name="bold", EmitDefaultValue=false)]
        public string Bold { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;bold&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;bold&#x60; property is editable.</value>
        [DataMember(Name="boldMetadata", EmitDefaultValue=false)]
        public PropertyMetadata BoldMetadata { get; set; }
        /// <summary>
        /// Gets or Sets Caption
        /// </summary>
        [DataMember(Name="caption", EmitDefaultValue=false)]
        public string Caption { get; set; }
        /// <summary>
        /// Gets or Sets CaptionMetadata
        /// </summary>
        [DataMember(Name="captionMetadata", EmitDefaultValue=false)]
        public PropertyMetadata CaptionMetadata { get; set; }
        /// <summary>
        /// Gets or Sets ConnectedObjectDetails
        /// </summary>
        [DataMember(Name="connectedObjectDetails", EmitDefaultValue=false)]
        public ConnectedObjectDetails ConnectedObjectDetails { get; set; }
        /// <summary>
        /// Array or errors.
        /// </summary>
        /// <value>Array or errors.</value>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.
        /// </summary>
        /// <value>The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.</value>
        [DataMember(Name="font", EmitDefaultValue=false)]
        public string Font { get; set; }
        /// <summary>
        /// The font color used for the information in the tab.  Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.
        /// </summary>
        /// <value>The font color used for the information in the tab.  Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.</value>
        [DataMember(Name="fontColor", EmitDefaultValue=false)]
        public string FontColor { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;fontColor&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;fontColor&#x60; property is editable.</value>
        [DataMember(Name="fontColorMetadata", EmitDefaultValue=false)]
        public PropertyMetadata FontColorMetadata { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;font&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;font&#x60; property is editable.</value>
        [DataMember(Name="fontMetadata", EmitDefaultValue=false)]
        public PropertyMetadata FontMetadata { get; set; }
        /// <summary>
        /// The font size used for the information in the tab.  Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.
        /// </summary>
        /// <value>The font size used for the information in the tab.  Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.</value>
        [DataMember(Name="fontSize", EmitDefaultValue=false)]
        public string FontSize { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;fontSize&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;fontSize&#x60; property is editable.</value>
        [DataMember(Name="fontSizeMetadata", EmitDefaultValue=false)]
        public PropertyMetadata FontSizeMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the information in the tab is italic.
        /// </summary>
        /// <value>When set to **true**, the information in the tab is italic.</value>
        [DataMember(Name="italic", EmitDefaultValue=false)]
        public string Italic { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;italic&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;italic&#x60; property is editable.</value>
        [DataMember(Name="italicMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ItalicMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the signer cannot change the data of the custom tab.
        /// </summary>
        /// <value>When set to **true**, the signer cannot change the data of the custom tab.</value>
        [DataMember(Name="locked", EmitDefaultValue=false)]
        public string Locked { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;locked&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;locked&#x60; property is editable.</value>
        [DataMember(Name="lockedMetadata", EmitDefaultValue=false)]
        public PropertyMetadata LockedMetadata { get; set; }
        /// <summary>
        /// Gets or Sets MergeFieldXml
        /// </summary>
        [DataMember(Name="mergeFieldXml", EmitDefaultValue=false)]
        public string MergeFieldXml { get; set; }
        /// <summary>
        /// Specifies the page number on which the tab is located.
        /// </summary>
        /// <value>Specifies the page number on which the tab is located.</value>
        [DataMember(Name="pageNumber", EmitDefaultValue=false)]
        public string PageNumber { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;pageNumber&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;pageNumber&#x60; property is editable.</value>
        [DataMember(Name="pageNumberMetadata", EmitDefaultValue=false)]
        public PropertyMetadata PageNumberMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the signer is required to fill out this tab
        /// </summary>
        /// <value>When set to **true**, the signer is required to fill out this tab</value>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public string Required { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;required&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;required&#x60; property is editable.</value>
        [DataMember(Name="requiredMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RequiredMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the radio button is selected.
        /// </summary>
        /// <value>When set to **true**, the radio button is selected.</value>
        [DataMember(Name="selected", EmitDefaultValue=false)]
        public string Selected { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;selected&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;selected&#x60; property is editable.</value>
        [DataMember(Name="selectedMetadata", EmitDefaultValue=false)]
        public PropertyMetadata SelectedMetadata { get; set; }
        /// <summary>
        /// Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.
        /// </summary>
        /// <value>Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;status&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;status&#x60; property is editable.</value>
        [DataMember(Name="statusMetadata", EmitDefaultValue=false)]
        public PropertyMetadata StatusMetadata { get; set; }
        /// <summary>
        /// Gets or Sets TabFullyQualifiedPath
        /// </summary>
        [DataMember(Name="tabFullyQualifiedPath", EmitDefaultValue=false)]
        public string TabFullyQualifiedPath { get; set; }
        /// <summary>
        /// The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].     
        /// </summary>
        /// <value>The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].     </value>
        [DataMember(Name="tabId", EmitDefaultValue=false)]
        public string TabId { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;tabId&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;tabId&#x60; property is editable.</value>
        [DataMember(Name="tabIdMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TabIdMetadata { get; set; }
        /// <summary>
        /// Gets or Sets TabOrder
        /// </summary>
        [DataMember(Name="tabOrder", EmitDefaultValue=false)]
        public string TabOrder { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;tabOrder&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;tabOrder&#x60; property is editable.</value>
        [DataMember(Name="tabOrderMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TabOrderMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the information in the tab is underlined.
        /// </summary>
        /// <value>When set to **true**, the information in the tab is underlined.</value>
        [DataMember(Name="underline", EmitDefaultValue=false)]
        public string Underline { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;underline&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;underline&#x60; property is editable.</value>
        [DataMember(Name="underlineMetadata", EmitDefaultValue=false)]
        public PropertyMetadata UnderlineMetadata { get; set; }
        /// <summary>
        /// Specifies the value of the tab. 
        /// </summary>
        /// <value>Specifies the value of the tab. </value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;value&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;value&#x60; property is editable.</value>
        [DataMember(Name="valueMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ValueMetadata { get; set; }
        /// <summary>
        /// This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position.
        /// </summary>
        /// <value>This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position.</value>
        [DataMember(Name="xPosition", EmitDefaultValue=false)]
        public string XPosition { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;xPosition&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;xPosition&#x60; property is editable.</value>
        [DataMember(Name="xPositionMetadata", EmitDefaultValue=false)]
        public PropertyMetadata XPositionMetadata { get; set; }
        /// <summary>
        /// This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.
        /// </summary>
        /// <value>This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.</value>
        [DataMember(Name="yPosition", EmitDefaultValue=false)]
        public string YPosition { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;yPosition&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;yPosition&#x60; property is editable.</value>
        [DataMember(Name="yPositionMetadata", EmitDefaultValue=false)]
        public PropertyMetadata YPositionMetadata { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Radio {\n");
            sb.Append("  AnchorAllowWhiteSpaceInCharacters: ").Append(AnchorAllowWhiteSpaceInCharacters).Append("\n");
            sb.Append("  AnchorAllowWhiteSpaceInCharactersMetadata: ").Append(AnchorAllowWhiteSpaceInCharactersMetadata).Append("\n");
            sb.Append("  AnchorCaseSensitive: ").Append(AnchorCaseSensitive).Append("\n");
            sb.Append("  AnchorCaseSensitiveMetadata: ").Append(AnchorCaseSensitiveMetadata).Append("\n");
            sb.Append("  AnchorHorizontalAlignment: ").Append(AnchorHorizontalAlignment).Append("\n");
            sb.Append("  AnchorHorizontalAlignmentMetadata: ").Append(AnchorHorizontalAlignmentMetadata).Append("\n");
            sb.Append("  AnchorIgnoreIfNotPresent: ").Append(AnchorIgnoreIfNotPresent).Append("\n");
            sb.Append("  AnchorIgnoreIfNotPresentMetadata: ").Append(AnchorIgnoreIfNotPresentMetadata).Append("\n");
            sb.Append("  AnchorMatchWholeWord: ").Append(AnchorMatchWholeWord).Append("\n");
            sb.Append("  AnchorMatchWholeWordMetadata: ").Append(AnchorMatchWholeWordMetadata).Append("\n");
            sb.Append("  AnchorString: ").Append(AnchorString).Append("\n");
            sb.Append("  AnchorStringMetadata: ").Append(AnchorStringMetadata).Append("\n");
            sb.Append("  AnchorTabProcessorVersion: ").Append(AnchorTabProcessorVersion).Append("\n");
            sb.Append("  AnchorTabProcessorVersionMetadata: ").Append(AnchorTabProcessorVersionMetadata).Append("\n");
            sb.Append("  AnchorUnits: ").Append(AnchorUnits).Append("\n");
            sb.Append("  AnchorUnitsMetadata: ").Append(AnchorUnitsMetadata).Append("\n");
            sb.Append("  AnchorXOffset: ").Append(AnchorXOffset).Append("\n");
            sb.Append("  AnchorXOffsetMetadata: ").Append(AnchorXOffsetMetadata).Append("\n");
            sb.Append("  AnchorYOffset: ").Append(AnchorYOffset).Append("\n");
            sb.Append("  AnchorYOffsetMetadata: ").Append(AnchorYOffsetMetadata).Append("\n");
            sb.Append("  Bold: ").Append(Bold).Append("\n");
            sb.Append("  BoldMetadata: ").Append(BoldMetadata).Append("\n");
            sb.Append("  Caption: ").Append(Caption).Append("\n");
            sb.Append("  CaptionMetadata: ").Append(CaptionMetadata).Append("\n");
            sb.Append("  ConnectedObjectDetails: ").Append(ConnectedObjectDetails).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  Font: ").Append(Font).Append("\n");
            sb.Append("  FontColor: ").Append(FontColor).Append("\n");
            sb.Append("  FontColorMetadata: ").Append(FontColorMetadata).Append("\n");
            sb.Append("  FontMetadata: ").Append(FontMetadata).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  FontSizeMetadata: ").Append(FontSizeMetadata).Append("\n");
            sb.Append("  Italic: ").Append(Italic).Append("\n");
            sb.Append("  ItalicMetadata: ").Append(ItalicMetadata).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  LockedMetadata: ").Append(LockedMetadata).Append("\n");
            sb.Append("  MergeFieldXml: ").Append(MergeFieldXml).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  PageNumberMetadata: ").Append(PageNumberMetadata).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  RequiredMetadata: ").Append(RequiredMetadata).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("  SelectedMetadata: ").Append(SelectedMetadata).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusMetadata: ").Append(StatusMetadata).Append("\n");
            sb.Append("  TabFullyQualifiedPath: ").Append(TabFullyQualifiedPath).Append("\n");
            sb.Append("  TabId: ").Append(TabId).Append("\n");
            sb.Append("  TabIdMetadata: ").Append(TabIdMetadata).Append("\n");
            sb.Append("  TabOrder: ").Append(TabOrder).Append("\n");
            sb.Append("  TabOrderMetadata: ").Append(TabOrderMetadata).Append("\n");
            sb.Append("  Underline: ").Append(Underline).Append("\n");
            sb.Append("  UnderlineMetadata: ").Append(UnderlineMetadata).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueMetadata: ").Append(ValueMetadata).Append("\n");
            sb.Append("  XPosition: ").Append(XPosition).Append("\n");
            sb.Append("  XPositionMetadata: ").Append(XPositionMetadata).Append("\n");
            sb.Append("  YPosition: ").Append(YPosition).Append("\n");
            sb.Append("  YPositionMetadata: ").Append(YPositionMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Radio);
        }

        /// <summary>
        /// Returns true if Radio instances are equal
        /// </summary>
        /// <param name="other">Instance of Radio to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Radio other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AnchorAllowWhiteSpaceInCharacters == other.AnchorAllowWhiteSpaceInCharacters ||
                    this.AnchorAllowWhiteSpaceInCharacters != null &&
                    this.AnchorAllowWhiteSpaceInCharacters.Equals(other.AnchorAllowWhiteSpaceInCharacters)
                ) && 
                (
                    this.AnchorAllowWhiteSpaceInCharactersMetadata == other.AnchorAllowWhiteSpaceInCharactersMetadata ||
                    this.AnchorAllowWhiteSpaceInCharactersMetadata != null &&
                    this.AnchorAllowWhiteSpaceInCharactersMetadata.Equals(other.AnchorAllowWhiteSpaceInCharactersMetadata)
                ) && 
                (
                    this.AnchorCaseSensitive == other.AnchorCaseSensitive ||
                    this.AnchorCaseSensitive != null &&
                    this.AnchorCaseSensitive.Equals(other.AnchorCaseSensitive)
                ) && 
                (
                    this.AnchorCaseSensitiveMetadata == other.AnchorCaseSensitiveMetadata ||
                    this.AnchorCaseSensitiveMetadata != null &&
                    this.AnchorCaseSensitiveMetadata.Equals(other.AnchorCaseSensitiveMetadata)
                ) && 
                (
                    this.AnchorHorizontalAlignment == other.AnchorHorizontalAlignment ||
                    this.AnchorHorizontalAlignment != null &&
                    this.AnchorHorizontalAlignment.Equals(other.AnchorHorizontalAlignment)
                ) && 
                (
                    this.AnchorHorizontalAlignmentMetadata == other.AnchorHorizontalAlignmentMetadata ||
                    this.AnchorHorizontalAlignmentMetadata != null &&
                    this.AnchorHorizontalAlignmentMetadata.Equals(other.AnchorHorizontalAlignmentMetadata)
                ) && 
                (
                    this.AnchorIgnoreIfNotPresent == other.AnchorIgnoreIfNotPresent ||
                    this.AnchorIgnoreIfNotPresent != null &&
                    this.AnchorIgnoreIfNotPresent.Equals(other.AnchorIgnoreIfNotPresent)
                ) && 
                (
                    this.AnchorIgnoreIfNotPresentMetadata == other.AnchorIgnoreIfNotPresentMetadata ||
                    this.AnchorIgnoreIfNotPresentMetadata != null &&
                    this.AnchorIgnoreIfNotPresentMetadata.Equals(other.AnchorIgnoreIfNotPresentMetadata)
                ) && 
                (
                    this.AnchorMatchWholeWord == other.AnchorMatchWholeWord ||
                    this.AnchorMatchWholeWord != null &&
                    this.AnchorMatchWholeWord.Equals(other.AnchorMatchWholeWord)
                ) && 
                (
                    this.AnchorMatchWholeWordMetadata == other.AnchorMatchWholeWordMetadata ||
                    this.AnchorMatchWholeWordMetadata != null &&
                    this.AnchorMatchWholeWordMetadata.Equals(other.AnchorMatchWholeWordMetadata)
                ) && 
                (
                    this.AnchorString == other.AnchorString ||
                    this.AnchorString != null &&
                    this.AnchorString.Equals(other.AnchorString)
                ) && 
                (
                    this.AnchorStringMetadata == other.AnchorStringMetadata ||
                    this.AnchorStringMetadata != null &&
                    this.AnchorStringMetadata.Equals(other.AnchorStringMetadata)
                ) && 
                (
                    this.AnchorTabProcessorVersion == other.AnchorTabProcessorVersion ||
                    this.AnchorTabProcessorVersion != null &&
                    this.AnchorTabProcessorVersion.Equals(other.AnchorTabProcessorVersion)
                ) && 
                (
                    this.AnchorTabProcessorVersionMetadata == other.AnchorTabProcessorVersionMetadata ||
                    this.AnchorTabProcessorVersionMetadata != null &&
                    this.AnchorTabProcessorVersionMetadata.Equals(other.AnchorTabProcessorVersionMetadata)
                ) && 
                (
                    this.AnchorUnits == other.AnchorUnits ||
                    this.AnchorUnits != null &&
                    this.AnchorUnits.Equals(other.AnchorUnits)
                ) && 
                (
                    this.AnchorUnitsMetadata == other.AnchorUnitsMetadata ||
                    this.AnchorUnitsMetadata != null &&
                    this.AnchorUnitsMetadata.Equals(other.AnchorUnitsMetadata)
                ) && 
                (
                    this.AnchorXOffset == other.AnchorXOffset ||
                    this.AnchorXOffset != null &&
                    this.AnchorXOffset.Equals(other.AnchorXOffset)
                ) && 
                (
                    this.AnchorXOffsetMetadata == other.AnchorXOffsetMetadata ||
                    this.AnchorXOffsetMetadata != null &&
                    this.AnchorXOffsetMetadata.Equals(other.AnchorXOffsetMetadata)
                ) && 
                (
                    this.AnchorYOffset == other.AnchorYOffset ||
                    this.AnchorYOffset != null &&
                    this.AnchorYOffset.Equals(other.AnchorYOffset)
                ) && 
                (
                    this.AnchorYOffsetMetadata == other.AnchorYOffsetMetadata ||
                    this.AnchorYOffsetMetadata != null &&
                    this.AnchorYOffsetMetadata.Equals(other.AnchorYOffsetMetadata)
                ) && 
                (
                    this.Bold == other.Bold ||
                    this.Bold != null &&
                    this.Bold.Equals(other.Bold)
                ) && 
                (
                    this.BoldMetadata == other.BoldMetadata ||
                    this.BoldMetadata != null &&
                    this.BoldMetadata.Equals(other.BoldMetadata)
                ) && 
                (
                    this.Caption == other.Caption ||
                    this.Caption != null &&
                    this.Caption.Equals(other.Caption)
                ) && 
                (
                    this.CaptionMetadata == other.CaptionMetadata ||
                    this.CaptionMetadata != null &&
                    this.CaptionMetadata.Equals(other.CaptionMetadata)
                ) && 
                (
                    this.ConnectedObjectDetails == other.ConnectedObjectDetails ||
                    this.ConnectedObjectDetails != null &&
                    this.ConnectedObjectDetails.Equals(other.ConnectedObjectDetails)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.Font == other.Font ||
                    this.Font != null &&
                    this.Font.Equals(other.Font)
                ) && 
                (
                    this.FontColor == other.FontColor ||
                    this.FontColor != null &&
                    this.FontColor.Equals(other.FontColor)
                ) && 
                (
                    this.FontColorMetadata == other.FontColorMetadata ||
                    this.FontColorMetadata != null &&
                    this.FontColorMetadata.Equals(other.FontColorMetadata)
                ) && 
                (
                    this.FontMetadata == other.FontMetadata ||
                    this.FontMetadata != null &&
                    this.FontMetadata.Equals(other.FontMetadata)
                ) && 
                (
                    this.FontSize == other.FontSize ||
                    this.FontSize != null &&
                    this.FontSize.Equals(other.FontSize)
                ) && 
                (
                    this.FontSizeMetadata == other.FontSizeMetadata ||
                    this.FontSizeMetadata != null &&
                    this.FontSizeMetadata.Equals(other.FontSizeMetadata)
                ) && 
                (
                    this.Italic == other.Italic ||
                    this.Italic != null &&
                    this.Italic.Equals(other.Italic)
                ) && 
                (
                    this.ItalicMetadata == other.ItalicMetadata ||
                    this.ItalicMetadata != null &&
                    this.ItalicMetadata.Equals(other.ItalicMetadata)
                ) && 
                (
                    this.Locked == other.Locked ||
                    this.Locked != null &&
                    this.Locked.Equals(other.Locked)
                ) && 
                (
                    this.LockedMetadata == other.LockedMetadata ||
                    this.LockedMetadata != null &&
                    this.LockedMetadata.Equals(other.LockedMetadata)
                ) && 
                (
                    this.MergeFieldXml == other.MergeFieldXml ||
                    this.MergeFieldXml != null &&
                    this.MergeFieldXml.Equals(other.MergeFieldXml)
                ) && 
                (
                    this.PageNumber == other.PageNumber ||
                    this.PageNumber != null &&
                    this.PageNumber.Equals(other.PageNumber)
                ) && 
                (
                    this.PageNumberMetadata == other.PageNumberMetadata ||
                    this.PageNumberMetadata != null &&
                    this.PageNumberMetadata.Equals(other.PageNumberMetadata)
                ) && 
                (
                    this.Required == other.Required ||
                    this.Required != null &&
                    this.Required.Equals(other.Required)
                ) && 
                (
                    this.RequiredMetadata == other.RequiredMetadata ||
                    this.RequiredMetadata != null &&
                    this.RequiredMetadata.Equals(other.RequiredMetadata)
                ) && 
                (
                    this.Selected == other.Selected ||
                    this.Selected != null &&
                    this.Selected.Equals(other.Selected)
                ) && 
                (
                    this.SelectedMetadata == other.SelectedMetadata ||
                    this.SelectedMetadata != null &&
                    this.SelectedMetadata.Equals(other.SelectedMetadata)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusMetadata == other.StatusMetadata ||
                    this.StatusMetadata != null &&
                    this.StatusMetadata.Equals(other.StatusMetadata)
                ) && 
                (
                    this.TabFullyQualifiedPath == other.TabFullyQualifiedPath ||
                    this.TabFullyQualifiedPath != null &&
                    this.TabFullyQualifiedPath.Equals(other.TabFullyQualifiedPath)
                ) && 
                (
                    this.TabId == other.TabId ||
                    this.TabId != null &&
                    this.TabId.Equals(other.TabId)
                ) && 
                (
                    this.TabIdMetadata == other.TabIdMetadata ||
                    this.TabIdMetadata != null &&
                    this.TabIdMetadata.Equals(other.TabIdMetadata)
                ) && 
                (
                    this.TabOrder == other.TabOrder ||
                    this.TabOrder != null &&
                    this.TabOrder.Equals(other.TabOrder)
                ) && 
                (
                    this.TabOrderMetadata == other.TabOrderMetadata ||
                    this.TabOrderMetadata != null &&
                    this.TabOrderMetadata.Equals(other.TabOrderMetadata)
                ) && 
                (
                    this.Underline == other.Underline ||
                    this.Underline != null &&
                    this.Underline.Equals(other.Underline)
                ) && 
                (
                    this.UnderlineMetadata == other.UnderlineMetadata ||
                    this.UnderlineMetadata != null &&
                    this.UnderlineMetadata.Equals(other.UnderlineMetadata)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.ValueMetadata == other.ValueMetadata ||
                    this.ValueMetadata != null &&
                    this.ValueMetadata.Equals(other.ValueMetadata)
                ) && 
                (
                    this.XPosition == other.XPosition ||
                    this.XPosition != null &&
                    this.XPosition.Equals(other.XPosition)
                ) && 
                (
                    this.XPositionMetadata == other.XPositionMetadata ||
                    this.XPositionMetadata != null &&
                    this.XPositionMetadata.Equals(other.XPositionMetadata)
                ) && 
                (
                    this.YPosition == other.YPosition ||
                    this.YPosition != null &&
                    this.YPosition.Equals(other.YPosition)
                ) && 
                (
                    this.YPositionMetadata == other.YPositionMetadata ||
                    this.YPositionMetadata != null &&
                    this.YPositionMetadata.Equals(other.YPositionMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AnchorAllowWhiteSpaceInCharacters != null)
                    hash = hash * 59 + this.AnchorAllowWhiteSpaceInCharacters.GetHashCode();
                if (this.AnchorAllowWhiteSpaceInCharactersMetadata != null)
                    hash = hash * 59 + this.AnchorAllowWhiteSpaceInCharactersMetadata.GetHashCode();
                if (this.AnchorCaseSensitive != null)
                    hash = hash * 59 + this.AnchorCaseSensitive.GetHashCode();
                if (this.AnchorCaseSensitiveMetadata != null)
                    hash = hash * 59 + this.AnchorCaseSensitiveMetadata.GetHashCode();
                if (this.AnchorHorizontalAlignment != null)
                    hash = hash * 59 + this.AnchorHorizontalAlignment.GetHashCode();
                if (this.AnchorHorizontalAlignmentMetadata != null)
                    hash = hash * 59 + this.AnchorHorizontalAlignmentMetadata.GetHashCode();
                if (this.AnchorIgnoreIfNotPresent != null)
                    hash = hash * 59 + this.AnchorIgnoreIfNotPresent.GetHashCode();
                if (this.AnchorIgnoreIfNotPresentMetadata != null)
                    hash = hash * 59 + this.AnchorIgnoreIfNotPresentMetadata.GetHashCode();
                if (this.AnchorMatchWholeWord != null)
                    hash = hash * 59 + this.AnchorMatchWholeWord.GetHashCode();
                if (this.AnchorMatchWholeWordMetadata != null)
                    hash = hash * 59 + this.AnchorMatchWholeWordMetadata.GetHashCode();
                if (this.AnchorString != null)
                    hash = hash * 59 + this.AnchorString.GetHashCode();
                if (this.AnchorStringMetadata != null)
                    hash = hash * 59 + this.AnchorStringMetadata.GetHashCode();
                if (this.AnchorTabProcessorVersion != null)
                    hash = hash * 59 + this.AnchorTabProcessorVersion.GetHashCode();
                if (this.AnchorTabProcessorVersionMetadata != null)
                    hash = hash * 59 + this.AnchorTabProcessorVersionMetadata.GetHashCode();
                if (this.AnchorUnits != null)
                    hash = hash * 59 + this.AnchorUnits.GetHashCode();
                if (this.AnchorUnitsMetadata != null)
                    hash = hash * 59 + this.AnchorUnitsMetadata.GetHashCode();
                if (this.AnchorXOffset != null)
                    hash = hash * 59 + this.AnchorXOffset.GetHashCode();
                if (this.AnchorXOffsetMetadata != null)
                    hash = hash * 59 + this.AnchorXOffsetMetadata.GetHashCode();
                if (this.AnchorYOffset != null)
                    hash = hash * 59 + this.AnchorYOffset.GetHashCode();
                if (this.AnchorYOffsetMetadata != null)
                    hash = hash * 59 + this.AnchorYOffsetMetadata.GetHashCode();
                if (this.Bold != null)
                    hash = hash * 59 + this.Bold.GetHashCode();
                if (this.BoldMetadata != null)
                    hash = hash * 59 + this.BoldMetadata.GetHashCode();
                if (this.Caption != null)
                    hash = hash * 59 + this.Caption.GetHashCode();
                if (this.CaptionMetadata != null)
                    hash = hash * 59 + this.CaptionMetadata.GetHashCode();
                if (this.ConnectedObjectDetails != null)
                    hash = hash * 59 + this.ConnectedObjectDetails.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.Font != null)
                    hash = hash * 59 + this.Font.GetHashCode();
                if (this.FontColor != null)
                    hash = hash * 59 + this.FontColor.GetHashCode();
                if (this.FontColorMetadata != null)
                    hash = hash * 59 + this.FontColorMetadata.GetHashCode();
                if (this.FontMetadata != null)
                    hash = hash * 59 + this.FontMetadata.GetHashCode();
                if (this.FontSize != null)
                    hash = hash * 59 + this.FontSize.GetHashCode();
                if (this.FontSizeMetadata != null)
                    hash = hash * 59 + this.FontSizeMetadata.GetHashCode();
                if (this.Italic != null)
                    hash = hash * 59 + this.Italic.GetHashCode();
                if (this.ItalicMetadata != null)
                    hash = hash * 59 + this.ItalicMetadata.GetHashCode();
                if (this.Locked != null)
                    hash = hash * 59 + this.Locked.GetHashCode();
                if (this.LockedMetadata != null)
                    hash = hash * 59 + this.LockedMetadata.GetHashCode();
                if (this.MergeFieldXml != null)
                    hash = hash * 59 + this.MergeFieldXml.GetHashCode();
                if (this.PageNumber != null)
                    hash = hash * 59 + this.PageNumber.GetHashCode();
                if (this.PageNumberMetadata != null)
                    hash = hash * 59 + this.PageNumberMetadata.GetHashCode();
                if (this.Required != null)
                    hash = hash * 59 + this.Required.GetHashCode();
                if (this.RequiredMetadata != null)
                    hash = hash * 59 + this.RequiredMetadata.GetHashCode();
                if (this.Selected != null)
                    hash = hash * 59 + this.Selected.GetHashCode();
                if (this.SelectedMetadata != null)
                    hash = hash * 59 + this.SelectedMetadata.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusMetadata != null)
                    hash = hash * 59 + this.StatusMetadata.GetHashCode();
                if (this.TabFullyQualifiedPath != null)
                    hash = hash * 59 + this.TabFullyQualifiedPath.GetHashCode();
                if (this.TabId != null)
                    hash = hash * 59 + this.TabId.GetHashCode();
                if (this.TabIdMetadata != null)
                    hash = hash * 59 + this.TabIdMetadata.GetHashCode();
                if (this.TabOrder != null)
                    hash = hash * 59 + this.TabOrder.GetHashCode();
                if (this.TabOrderMetadata != null)
                    hash = hash * 59 + this.TabOrderMetadata.GetHashCode();
                if (this.Underline != null)
                    hash = hash * 59 + this.Underline.GetHashCode();
                if (this.UnderlineMetadata != null)
                    hash = hash * 59 + this.UnderlineMetadata.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.ValueMetadata != null)
                    hash = hash * 59 + this.ValueMetadata.GetHashCode();
                if (this.XPosition != null)
                    hash = hash * 59 + this.XPosition.GetHashCode();
                if (this.XPositionMetadata != null)
                    hash = hash * 59 + this.XPositionMetadata.GetHashCode();
                if (this.YPosition != null)
                    hash = hash * 59 + this.YPosition.GetHashCode();
                if (this.YPositionMetadata != null)
                    hash = hash * 59 + this.YPositionMetadata.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
