/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.  Example:   &#x60;&#x60;&#x60;json \&quot;recipients\&quot;: {       \&quot;seals\&quot;: [         {           \&quot;recipientId\&quot;: \&quot;1\&quot;,           \&quot;routingOrder\&quot; : 1,           \&quot;recipientSignatureProviders\&quot;: [             {               \&quot;sealName\&quot;: \&quot;52e9d968-xxxx-xxxx-xxxx-4682bc45c106\&quot;             }        ]      }    ]  },     .     .     . &#x60;&#x60;&#x60; For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals). 
    /// </summary>
    [DataContract]
    public partial class SealSign :  IEquatable<SealSign>, IValidatableObject
    {
        public SealSign()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SealSign" /> class.
        /// </summary>
        /// <param name="AccessCode">If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account&#39;s access code format setting.  If blank, but the signer &#x60;accessCode&#x60; property is set in the envelope, then that value is used.  If blank and the signer &#x60;accessCode&#x60; property is not set, then the access code is not required..</param>
        /// <param name="AccessCodeMetadata">Not applicable..</param>
        /// <param name="AddAccessCodeToEmail">This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient..</param>
        /// <param name="AllowSystemOverrideForLockedRecipient">AllowSystemOverrideForLockedRecipient.</param>
        /// <param name="AutoRespondedReason">AutoRespondedReason.</param>
        /// <param name="BulkSendV2Recipient">BulkSendV2Recipient.</param>
        /// <param name="ClientUserId">Specifies whether the recipient is embedded or remote.   If the &#x60;clientUserId&#x60; property is not null then the recipient is embedded. Note that if the &#x60;ClientUserId&#x60; property is set and either &#x60;SignerMustHaveAccount&#x60; or &#x60;SignerMustLoginToSign&#x60; property of the account settings is set to  **true**, an error is generated on sending.ng.   Maximum length: 100 characters. .</param>
        /// <param name="CompletedCount">CompletedCount.</param>
        /// <param name="CustomFields">An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters..</param>
        /// <param name="DeclinedDateTime">The date and time the recipient declined the document..</param>
        /// <param name="DeclinedReason">The reason the recipient declined the document..</param>
        /// <param name="DeliveredDateTime">Reserved: For DocuSign use only..</param>
        /// <param name="DeliveryMethod">Reserved: For DocuSign use only..</param>
        /// <param name="DeliveryMethodMetadata">Reserved for DocuSign..</param>
        /// <param name="DesignatorId">DesignatorId.</param>
        /// <param name="DesignatorIdGuid">DesignatorIdGuid.</param>
        /// <param name="DocumentTemplateId">DocumentTemplateId.</param>
        /// <param name="DocumentVisibility">DocumentVisibility.</param>
        /// <param name="EmailNotification">A complex type that contains information sets the language of the recipient&#39;s email information.   **IMPORTANT**: If you enable email notification for one recipient, you must enable email notification for all recipients as it overrides the Envelope Subject and &#x60;EmailBlurb&#x60; property settings. .</param>
        /// <param name="EmbeddedRecipientStartURL">Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender&#39;s system (the server responding to the URL) must request a recipient token to launch a signing session.   If set to &#x60;SIGN_AT_DOCUSIGN&#x60;, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.  It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient&#39;s identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets &#x60;EmbeddedRecipientStartURL&#x3D;SIGN_AT_DOCUSIGN&#x60;, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.  If the &#x60;clientUserId&#x60; property is NOT set, and the &#x60;embeddedRecipientStartURL&#x60; is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The &#x60;customFields&#x60; property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets.   *Example*:   &#x60;http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&amp;[[mergeField3]]&#x60; .</param>
        /// <param name="ErrorDetails">Array or errors..</param>
        /// <param name="FaxNumber">Reserved:.</param>
        /// <param name="FaxNumberMetadata">Reserved for DocuSign..</param>
        /// <param name="IdCheckConfigurationName">Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.  *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as &#39;ID Check $&#39; and &#39;SMS Auth $&#39;. To use ID check in an envelope, the idCheckConfigurationName should be &#39;ID Check &#39;. If you wanted to use SMS, it would be &#39;SMS Auth $&#39; and you would need to add you would need to add phone number information to the &#x60;smsAuthentication&#x60; node..</param>
        /// <param name="IdCheckConfigurationNameMetadata">Not applicable..</param>
        /// <param name="IdCheckInformationInput">Not applicable..</param>
        /// <param name="IdentityVerification">Specifies the ID Verification workflow applied on an envelope by workflow ID. &lt;br/&gt;See the [list](/docs/esign-rest-api/reference/accounts/identityverifications/list/) method in the [IdentityVerifications](/docs/esign-rest-api/reference/accounts/identityverifications/) resource for more information on how to retrieve workflow IDs available for an account. &lt;br/&gt;This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods. &lt;br/&gt;Note that ID Verification and ID Check are two distinct methods. ID Verification checks recipients&#39; identity by verifying their ID while ID Check relies on data available on public records (such as current and former address)..</param>
        /// <param name="InheritEmailNotificationConfiguration">When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient&#39;s account. .</param>
        /// <param name="LockedRecipientPhoneAuthEditable">LockedRecipientPhoneAuthEditable.</param>
        /// <param name="LockedRecipientSmsEditable">LockedRecipientSmsEditable.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Note">Specifies a note that is unique to this recipient. This note is sent to the recipient via the signing email. The note displays in the signing UI near the upper left corner of the document on the signing screen.  Maximum Length: 1000 characters..</param>
        /// <param name="NoteMetadata">Not applicable..</param>
        /// <param name="PhoneAuthentication">Not applicable..</param>
        /// <param name="ProofFile">ProofFile.</param>
        /// <param name="RecipientAttachments">Reserved:.</param>
        /// <param name="RecipientAuthenticationStatus">Not applicable..</param>
        /// <param name="RecipientFeatureMetadata">RecipientFeatureMetadata.</param>
        /// <param name="RecipientId">Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document..</param>
        /// <param name="RecipientIdGuid">RecipientIdGuid.</param>
        /// <param name="RecipientSignatureProviders">RecipientSignatureProviders.</param>
        /// <param name="RecipientType">RecipientType.</param>
        /// <param name="RecipientTypeMetadata">Metadata that indicates whether the &#x60;recipientType&#x60; property is editable. This property is read-only..</param>
        /// <param name="RequireIdLookup">When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. .</param>
        /// <param name="RequireIdLookupMetadata">Not applicable..</param>
        /// <param name="RoleName">Optional element. Specifies the role name associated with the recipient.&lt;br/&gt;&lt;br/&gt;This is required when working with template recipients..</param>
        /// <param name="RoutingOrder">Specifies the routing order of the recipient in the envelope. .</param>
        /// <param name="RoutingOrderMetadata">Metadata that indicates whether the &#x60;routingOrder&#x60; property is editable. This property is read-only..</param>
        /// <param name="SentDateTime">The date and time the envelope was sent..</param>
        /// <param name="SignedDateTime">Reserved: For DocuSign use only. .</param>
        /// <param name="SmsAuthentication">Not applicable..</param>
        /// <param name="SocialAuthentications"> Lists the social ID type that can be used for recipient authentication..</param>
        /// <param name="Status">Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later..</param>
        /// <param name="StatusCode">StatusCode.</param>
        /// <param name="SuppressEmails">SuppressEmails.</param>
        /// <param name="Tabs">A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or enter data. They may also display data to the recipients..</param>
        /// <param name="TemplateLocked">When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. .</param>
        /// <param name="TemplateRequired">When set to **true**, the sender may not remove the recipient. Used only when working with template recipients..</param>
        /// <param name="TotalTabCount">TotalTabCount.</param>
        /// <param name="UserId">UserId.</param>
        /// <param name="WebFormRecipientViewId">WebFormRecipientViewId.</param>
        public SealSign(string AccessCode = default(string), PropertyMetadata AccessCodeMetadata = default(PropertyMetadata), string AddAccessCodeToEmail = default(string), string AllowSystemOverrideForLockedRecipient = default(string), string AutoRespondedReason = default(string), string BulkSendV2Recipient = default(string), string ClientUserId = default(string), string CompletedCount = default(string), List<string> CustomFields = default(List<string>), string DeclinedDateTime = default(string), string DeclinedReason = default(string), string DeliveredDateTime = default(string), string DeliveryMethod = default(string), PropertyMetadata DeliveryMethodMetadata = default(PropertyMetadata), string DesignatorId = default(string), string DesignatorIdGuid = default(string), string DocumentTemplateId = default(string), List<DocumentVisibility> DocumentVisibility = default(List<DocumentVisibility>), RecipientEmailNotification EmailNotification = default(RecipientEmailNotification), string EmbeddedRecipientStartURL = default(string), ErrorDetails ErrorDetails = default(ErrorDetails), string FaxNumber = default(string), PropertyMetadata FaxNumberMetadata = default(PropertyMetadata), string IdCheckConfigurationName = default(string), PropertyMetadata IdCheckConfigurationNameMetadata = default(PropertyMetadata), IdCheckInformationInput IdCheckInformationInput = default(IdCheckInformationInput), RecipientIdentityVerification IdentityVerification = default(RecipientIdentityVerification), string InheritEmailNotificationConfiguration = default(string), string LockedRecipientPhoneAuthEditable = default(string), string LockedRecipientSmsEditable = default(string), string Name = default(string), string Note = default(string), PropertyMetadata NoteMetadata = default(PropertyMetadata), RecipientPhoneAuthentication PhoneAuthentication = default(RecipientPhoneAuthentication), RecipientProofFile ProofFile = default(RecipientProofFile), List<RecipientAttachment> RecipientAttachments = default(List<RecipientAttachment>), AuthenticationStatus RecipientAuthenticationStatus = default(AuthenticationStatus), List<FeatureAvailableMetadata> RecipientFeatureMetadata = default(List<FeatureAvailableMetadata>), string RecipientId = default(string), string RecipientIdGuid = default(string), List<RecipientSignatureProvider> RecipientSignatureProviders = default(List<RecipientSignatureProvider>), string RecipientType = default(string), PropertyMetadata RecipientTypeMetadata = default(PropertyMetadata), string RequireIdLookup = default(string), PropertyMetadata RequireIdLookupMetadata = default(PropertyMetadata), string RoleName = default(string), string RoutingOrder = default(string), PropertyMetadata RoutingOrderMetadata = default(PropertyMetadata), string SentDateTime = default(string), string SignedDateTime = default(string), RecipientSMSAuthentication SmsAuthentication = default(RecipientSMSAuthentication), List<SocialAuthentication> SocialAuthentications = default(List<SocialAuthentication>), string Status = default(string), string StatusCode = default(string), string SuppressEmails = default(string), Tabs Tabs = default(Tabs), string TemplateLocked = default(string), string TemplateRequired = default(string), string TotalTabCount = default(string), string UserId = default(string), string WebFormRecipientViewId = default(string))
        {
            this.AccessCode = AccessCode;
            this.AccessCodeMetadata = AccessCodeMetadata;
            this.AddAccessCodeToEmail = AddAccessCodeToEmail;
            this.AllowSystemOverrideForLockedRecipient = AllowSystemOverrideForLockedRecipient;
            this.AutoRespondedReason = AutoRespondedReason;
            this.BulkSendV2Recipient = BulkSendV2Recipient;
            this.ClientUserId = ClientUserId;
            this.CompletedCount = CompletedCount;
            this.CustomFields = CustomFields;
            this.DeclinedDateTime = DeclinedDateTime;
            this.DeclinedReason = DeclinedReason;
            this.DeliveredDateTime = DeliveredDateTime;
            this.DeliveryMethod = DeliveryMethod;
            this.DeliveryMethodMetadata = DeliveryMethodMetadata;
            this.DesignatorId = DesignatorId;
            this.DesignatorIdGuid = DesignatorIdGuid;
            this.DocumentTemplateId = DocumentTemplateId;
            this.DocumentVisibility = DocumentVisibility;
            this.EmailNotification = EmailNotification;
            this.EmbeddedRecipientStartURL = EmbeddedRecipientStartURL;
            this.ErrorDetails = ErrorDetails;
            this.FaxNumber = FaxNumber;
            this.FaxNumberMetadata = FaxNumberMetadata;
            this.IdCheckConfigurationName = IdCheckConfigurationName;
            this.IdCheckConfigurationNameMetadata = IdCheckConfigurationNameMetadata;
            this.IdCheckInformationInput = IdCheckInformationInput;
            this.IdentityVerification = IdentityVerification;
            this.InheritEmailNotificationConfiguration = InheritEmailNotificationConfiguration;
            this.LockedRecipientPhoneAuthEditable = LockedRecipientPhoneAuthEditable;
            this.LockedRecipientSmsEditable = LockedRecipientSmsEditable;
            this.Name = Name;
            this.Note = Note;
            this.NoteMetadata = NoteMetadata;
            this.PhoneAuthentication = PhoneAuthentication;
            this.ProofFile = ProofFile;
            this.RecipientAttachments = RecipientAttachments;
            this.RecipientAuthenticationStatus = RecipientAuthenticationStatus;
            this.RecipientFeatureMetadata = RecipientFeatureMetadata;
            this.RecipientId = RecipientId;
            this.RecipientIdGuid = RecipientIdGuid;
            this.RecipientSignatureProviders = RecipientSignatureProviders;
            this.RecipientType = RecipientType;
            this.RecipientTypeMetadata = RecipientTypeMetadata;
            this.RequireIdLookup = RequireIdLookup;
            this.RequireIdLookupMetadata = RequireIdLookupMetadata;
            this.RoleName = RoleName;
            this.RoutingOrder = RoutingOrder;
            this.RoutingOrderMetadata = RoutingOrderMetadata;
            this.SentDateTime = SentDateTime;
            this.SignedDateTime = SignedDateTime;
            this.SmsAuthentication = SmsAuthentication;
            this.SocialAuthentications = SocialAuthentications;
            this.Status = Status;
            this.StatusCode = StatusCode;
            this.SuppressEmails = SuppressEmails;
            this.Tabs = Tabs;
            this.TemplateLocked = TemplateLocked;
            this.TemplateRequired = TemplateRequired;
            this.TotalTabCount = TotalTabCount;
            this.UserId = UserId;
            this.WebFormRecipientViewId = WebFormRecipientViewId;
        }
        
        /// <summary>
        /// If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account&#39;s access code format setting.  If blank, but the signer &#x60;accessCode&#x60; property is set in the envelope, then that value is used.  If blank and the signer &#x60;accessCode&#x60; property is not set, then the access code is not required.
        /// </summary>
        /// <value>If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account&#39;s access code format setting.  If blank, but the signer &#x60;accessCode&#x60; property is set in the envelope, then that value is used.  If blank and the signer &#x60;accessCode&#x60; property is not set, then the access code is not required.</value>
        [DataMember(Name="accessCode", EmitDefaultValue=false)]
        public string AccessCode { get; set; }
        /// <summary>
        /// Not applicable.
        /// </summary>
        /// <value>Not applicable.</value>
        [DataMember(Name="accessCodeMetadata", EmitDefaultValue=false)]
        public PropertyMetadata AccessCodeMetadata { get; set; }
        /// <summary>
        /// This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.
        /// </summary>
        /// <value>This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.</value>
        [DataMember(Name="addAccessCodeToEmail", EmitDefaultValue=false)]
        public string AddAccessCodeToEmail { get; set; }
        /// <summary>
        /// Gets or Sets AllowSystemOverrideForLockedRecipient
        /// </summary>
        [DataMember(Name="allowSystemOverrideForLockedRecipient", EmitDefaultValue=false)]
        public string AllowSystemOverrideForLockedRecipient { get; set; }
        /// <summary>
        /// Gets or Sets AutoRespondedReason
        /// </summary>
        [DataMember(Name="autoRespondedReason", EmitDefaultValue=false)]
        public string AutoRespondedReason { get; set; }
        /// <summary>
        /// Gets or Sets BulkSendV2Recipient
        /// </summary>
        [DataMember(Name="bulkSendV2Recipient", EmitDefaultValue=false)]
        public string BulkSendV2Recipient { get; set; }
        /// <summary>
        /// Specifies whether the recipient is embedded or remote.   If the &#x60;clientUserId&#x60; property is not null then the recipient is embedded. Note that if the &#x60;ClientUserId&#x60; property is set and either &#x60;SignerMustHaveAccount&#x60; or &#x60;SignerMustLoginToSign&#x60; property of the account settings is set to  **true**, an error is generated on sending.ng.   Maximum length: 100 characters. 
        /// </summary>
        /// <value>Specifies whether the recipient is embedded or remote.   If the &#x60;clientUserId&#x60; property is not null then the recipient is embedded. Note that if the &#x60;ClientUserId&#x60; property is set and either &#x60;SignerMustHaveAccount&#x60; or &#x60;SignerMustLoginToSign&#x60; property of the account settings is set to  **true**, an error is generated on sending.ng.   Maximum length: 100 characters. </value>
        [DataMember(Name="clientUserId", EmitDefaultValue=false)]
        public string ClientUserId { get; set; }
        /// <summary>
        /// Gets or Sets CompletedCount
        /// </summary>
        [DataMember(Name="completedCount", EmitDefaultValue=false)]
        public string CompletedCount { get; set; }
        /// <summary>
        /// An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
        /// </summary>
        /// <value>An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.</value>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public List<string> CustomFields { get; set; }
        /// <summary>
        /// The date and time the recipient declined the document.
        /// </summary>
        /// <value>The date and time the recipient declined the document.</value>
        [DataMember(Name="declinedDateTime", EmitDefaultValue=false)]
        public string DeclinedDateTime { get; set; }
        /// <summary>
        /// The reason the recipient declined the document.
        /// </summary>
        /// <value>The reason the recipient declined the document.</value>
        [DataMember(Name="declinedReason", EmitDefaultValue=false)]
        public string DeclinedReason { get; set; }
        /// <summary>
        /// Reserved: For DocuSign use only.
        /// </summary>
        /// <value>Reserved: For DocuSign use only.</value>
        [DataMember(Name="deliveredDateTime", EmitDefaultValue=false)]
        public string DeliveredDateTime { get; set; }
        /// <summary>
        /// Reserved: For DocuSign use only.
        /// </summary>
        /// <value>Reserved: For DocuSign use only.</value>
        [DataMember(Name="deliveryMethod", EmitDefaultValue=false)]
        public string DeliveryMethod { get; set; }
        /// <summary>
        /// Reserved for DocuSign.
        /// </summary>
        /// <value>Reserved for DocuSign.</value>
        [DataMember(Name="deliveryMethodMetadata", EmitDefaultValue=false)]
        public PropertyMetadata DeliveryMethodMetadata { get; set; }
        /// <summary>
        /// Gets or Sets DesignatorId
        /// </summary>
        [DataMember(Name="designatorId", EmitDefaultValue=false)]
        public string DesignatorId { get; set; }
        /// <summary>
        /// Gets or Sets DesignatorIdGuid
        /// </summary>
        [DataMember(Name="designatorIdGuid", EmitDefaultValue=false)]
        public string DesignatorIdGuid { get; set; }
        /// <summary>
        /// Gets or Sets DocumentTemplateId
        /// </summary>
        [DataMember(Name="documentTemplateId", EmitDefaultValue=false)]
        public string DocumentTemplateId { get; set; }
        /// <summary>
        /// Gets or Sets DocumentVisibility
        /// </summary>
        [DataMember(Name="documentVisibility", EmitDefaultValue=false)]
        public List<DocumentVisibility> DocumentVisibility { get; set; }
        /// <summary>
        /// A complex type that contains information sets the language of the recipient&#39;s email information.   **IMPORTANT**: If you enable email notification for one recipient, you must enable email notification for all recipients as it overrides the Envelope Subject and &#x60;EmailBlurb&#x60; property settings. 
        /// </summary>
        /// <value>A complex type that contains information sets the language of the recipient&#39;s email information.   **IMPORTANT**: If you enable email notification for one recipient, you must enable email notification for all recipients as it overrides the Envelope Subject and &#x60;EmailBlurb&#x60; property settings. </value>
        [DataMember(Name="emailNotification", EmitDefaultValue=false)]
        public RecipientEmailNotification EmailNotification { get; set; }
        /// <summary>
        /// Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender&#39;s system (the server responding to the URL) must request a recipient token to launch a signing session.   If set to &#x60;SIGN_AT_DOCUSIGN&#x60;, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.  It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient&#39;s identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets &#x60;EmbeddedRecipientStartURL&#x3D;SIGN_AT_DOCUSIGN&#x60;, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.  If the &#x60;clientUserId&#x60; property is NOT set, and the &#x60;embeddedRecipientStartURL&#x60; is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The &#x60;customFields&#x60; property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets.   *Example*:   &#x60;http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&amp;[[mergeField3]]&#x60; 
        /// </summary>
        /// <value>Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender&#39;s system (the server responding to the URL) must request a recipient token to launch a signing session.   If set to &#x60;SIGN_AT_DOCUSIGN&#x60;, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.  It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient&#39;s identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets &#x60;EmbeddedRecipientStartURL&#x3D;SIGN_AT_DOCUSIGN&#x60;, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.  If the &#x60;clientUserId&#x60; property is NOT set, and the &#x60;embeddedRecipientStartURL&#x60; is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The &#x60;customFields&#x60; property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets.   *Example*:   &#x60;http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&amp;[[mergeField3]]&#x60; </value>
        [DataMember(Name="embeddedRecipientStartURL", EmitDefaultValue=false)]
        public string EmbeddedRecipientStartURL { get; set; }
        /// <summary>
        /// Array or errors.
        /// </summary>
        /// <value>Array or errors.</value>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// Reserved:
        /// </summary>
        /// <value>Reserved:</value>
        [DataMember(Name="faxNumber", EmitDefaultValue=false)]
        public string FaxNumber { get; set; }
        /// <summary>
        /// Reserved for DocuSign.
        /// </summary>
        /// <value>Reserved for DocuSign.</value>
        [DataMember(Name="faxNumberMetadata", EmitDefaultValue=false)]
        public PropertyMetadata FaxNumberMetadata { get; set; }
        /// <summary>
        /// Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.  *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as &#39;ID Check $&#39; and &#39;SMS Auth $&#39;. To use ID check in an envelope, the idCheckConfigurationName should be &#39;ID Check &#39;. If you wanted to use SMS, it would be &#39;SMS Auth $&#39; and you would need to add you would need to add phone number information to the &#x60;smsAuthentication&#x60; node.
        /// </summary>
        /// <value>Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.  *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as &#39;ID Check $&#39; and &#39;SMS Auth $&#39;. To use ID check in an envelope, the idCheckConfigurationName should be &#39;ID Check &#39;. If you wanted to use SMS, it would be &#39;SMS Auth $&#39; and you would need to add you would need to add phone number information to the &#x60;smsAuthentication&#x60; node.</value>
        [DataMember(Name="idCheckConfigurationName", EmitDefaultValue=false)]
        public string IdCheckConfigurationName { get; set; }
        /// <summary>
        /// Not applicable.
        /// </summary>
        /// <value>Not applicable.</value>
        [DataMember(Name="idCheckConfigurationNameMetadata", EmitDefaultValue=false)]
        public PropertyMetadata IdCheckConfigurationNameMetadata { get; set; }
        /// <summary>
        /// Not applicable.
        /// </summary>
        /// <value>Not applicable.</value>
        [DataMember(Name="idCheckInformationInput", EmitDefaultValue=false)]
        public IdCheckInformationInput IdCheckInformationInput { get; set; }
        /// <summary>
        /// Specifies the ID Verification workflow applied on an envelope by workflow ID. &lt;br/&gt;See the [list](/docs/esign-rest-api/reference/accounts/identityverifications/list/) method in the [IdentityVerifications](/docs/esign-rest-api/reference/accounts/identityverifications/) resource for more information on how to retrieve workflow IDs available for an account. &lt;br/&gt;This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods. &lt;br/&gt;Note that ID Verification and ID Check are two distinct methods. ID Verification checks recipients&#39; identity by verifying their ID while ID Check relies on data available on public records (such as current and former address).
        /// </summary>
        /// <value>Specifies the ID Verification workflow applied on an envelope by workflow ID. &lt;br/&gt;See the [list](/docs/esign-rest-api/reference/accounts/identityverifications/list/) method in the [IdentityVerifications](/docs/esign-rest-api/reference/accounts/identityverifications/) resource for more information on how to retrieve workflow IDs available for an account. &lt;br/&gt;This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods. &lt;br/&gt;Note that ID Verification and ID Check are two distinct methods. ID Verification checks recipients&#39; identity by verifying their ID while ID Check relies on data available on public records (such as current and former address).</value>
        [DataMember(Name="identityVerification", EmitDefaultValue=false)]
        public RecipientIdentityVerification IdentityVerification { get; set; }
        /// <summary>
        /// When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient&#39;s account. 
        /// </summary>
        /// <value>When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient&#39;s account. </value>
        [DataMember(Name="inheritEmailNotificationConfiguration", EmitDefaultValue=false)]
        public string InheritEmailNotificationConfiguration { get; set; }
        /// <summary>
        /// Gets or Sets LockedRecipientPhoneAuthEditable
        /// </summary>
        [DataMember(Name="lockedRecipientPhoneAuthEditable", EmitDefaultValue=false)]
        public string LockedRecipientPhoneAuthEditable { get; set; }
        /// <summary>
        /// Gets or Sets LockedRecipientSmsEditable
        /// </summary>
        [DataMember(Name="lockedRecipientSmsEditable", EmitDefaultValue=false)]
        public string LockedRecipientSmsEditable { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Specifies a note that is unique to this recipient. This note is sent to the recipient via the signing email. The note displays in the signing UI near the upper left corner of the document on the signing screen.  Maximum Length: 1000 characters.
        /// </summary>
        /// <value>Specifies a note that is unique to this recipient. This note is sent to the recipient via the signing email. The note displays in the signing UI near the upper left corner of the document on the signing screen.  Maximum Length: 1000 characters.</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }
        /// <summary>
        /// Not applicable.
        /// </summary>
        /// <value>Not applicable.</value>
        [DataMember(Name="noteMetadata", EmitDefaultValue=false)]
        public PropertyMetadata NoteMetadata { get; set; }
        /// <summary>
        /// Not applicable.
        /// </summary>
        /// <value>Not applicable.</value>
        [DataMember(Name="phoneAuthentication", EmitDefaultValue=false)]
        public RecipientPhoneAuthentication PhoneAuthentication { get; set; }
        /// <summary>
        /// Gets or Sets ProofFile
        /// </summary>
        [DataMember(Name="proofFile", EmitDefaultValue=false)]
        public RecipientProofFile ProofFile { get; set; }
        /// <summary>
        /// Reserved:
        /// </summary>
        /// <value>Reserved:</value>
        [DataMember(Name="recipientAttachments", EmitDefaultValue=false)]
        public List<RecipientAttachment> RecipientAttachments { get; set; }
        /// <summary>
        /// Not applicable.
        /// </summary>
        /// <value>Not applicable.</value>
        [DataMember(Name="recipientAuthenticationStatus", EmitDefaultValue=false)]
        public AuthenticationStatus RecipientAuthenticationStatus { get; set; }
        /// <summary>
        /// Gets or Sets RecipientFeatureMetadata
        /// </summary>
        [DataMember(Name="recipientFeatureMetadata", EmitDefaultValue=false)]
        public List<FeatureAvailableMetadata> RecipientFeatureMetadata { get; set; }
        /// <summary>
        /// Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
        /// </summary>
        /// <value>Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.</value>
        [DataMember(Name="recipientId", EmitDefaultValue=false)]
        public string RecipientId { get; set; }
        /// <summary>
        /// Gets or Sets RecipientIdGuid
        /// </summary>
        [DataMember(Name="recipientIdGuid", EmitDefaultValue=false)]
        public string RecipientIdGuid { get; set; }
        /// <summary>
        /// Gets or Sets RecipientSignatureProviders
        /// </summary>
        [DataMember(Name="recipientSignatureProviders", EmitDefaultValue=false)]
        public List<RecipientSignatureProvider> RecipientSignatureProviders { get; set; }
        /// <summary>
        /// Gets or Sets RecipientType
        /// </summary>
        [DataMember(Name="recipientType", EmitDefaultValue=false)]
        public string RecipientType { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;recipientType&#x60; property is editable. This property is read-only.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;recipientType&#x60; property is editable. This property is read-only.</value>
        [DataMember(Name="recipientTypeMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RecipientTypeMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. 
        /// </summary>
        /// <value>When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. </value>
        [DataMember(Name="requireIdLookup", EmitDefaultValue=false)]
        public string RequireIdLookup { get; set; }
        /// <summary>
        /// Not applicable.
        /// </summary>
        /// <value>Not applicable.</value>
        [DataMember(Name="requireIdLookupMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RequireIdLookupMetadata { get; set; }
        /// <summary>
        /// Optional element. Specifies the role name associated with the recipient.&lt;br/&gt;&lt;br/&gt;This is required when working with template recipients.
        /// </summary>
        /// <value>Optional element. Specifies the role name associated with the recipient.&lt;br/&gt;&lt;br/&gt;This is required when working with template recipients.</value>
        [DataMember(Name="roleName", EmitDefaultValue=false)]
        public string RoleName { get; set; }
        /// <summary>
        /// Specifies the routing order of the recipient in the envelope. 
        /// </summary>
        /// <value>Specifies the routing order of the recipient in the envelope. </value>
        [DataMember(Name="routingOrder", EmitDefaultValue=false)]
        public string RoutingOrder { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;routingOrder&#x60; property is editable. This property is read-only.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;routingOrder&#x60; property is editable. This property is read-only.</value>
        [DataMember(Name="routingOrderMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RoutingOrderMetadata { get; set; }
        /// <summary>
        /// The date and time the envelope was sent.
        /// </summary>
        /// <value>The date and time the envelope was sent.</value>
        [DataMember(Name="sentDateTime", EmitDefaultValue=false)]
        public string SentDateTime { get; set; }
        /// <summary>
        /// Reserved: For DocuSign use only. 
        /// </summary>
        /// <value>Reserved: For DocuSign use only. </value>
        [DataMember(Name="signedDateTime", EmitDefaultValue=false)]
        public string SignedDateTime { get; set; }
        /// <summary>
        /// Not applicable.
        /// </summary>
        /// <value>Not applicable.</value>
        [DataMember(Name="smsAuthentication", EmitDefaultValue=false)]
        public RecipientSMSAuthentication SmsAuthentication { get; set; }
        /// <summary>
        ///  Lists the social ID type that can be used for recipient authentication.
        /// </summary>
        /// <value> Lists the social ID type that can be used for recipient authentication.</value>
        [DataMember(Name="socialAuthentications", EmitDefaultValue=false)]
        public List<SocialAuthentication> SocialAuthentications { get; set; }
        /// <summary>
        /// Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.
        /// </summary>
        /// <value>Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public string StatusCode { get; set; }
        /// <summary>
        /// Gets or Sets SuppressEmails
        /// </summary>
        [DataMember(Name="suppressEmails", EmitDefaultValue=false)]
        public string SuppressEmails { get; set; }
        /// <summary>
        /// A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or enter data. They may also display data to the recipients.
        /// </summary>
        /// <value>A list of tabs, which are represented graphically as symbols on documents at the time of signing. Tabs show recipients where to sign, initial, or enter data. They may also display data to the recipients.</value>
        [DataMember(Name="tabs", EmitDefaultValue=false)]
        public Tabs Tabs { get; set; }
        /// <summary>
        /// When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
        /// </summary>
        /// <value>When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. </value>
        [DataMember(Name="templateLocked", EmitDefaultValue=false)]
        public string TemplateLocked { get; set; }
        /// <summary>
        /// When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
        /// </summary>
        /// <value>When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.</value>
        [DataMember(Name="templateRequired", EmitDefaultValue=false)]
        public string TemplateRequired { get; set; }
        /// <summary>
        /// Gets or Sets TotalTabCount
        /// </summary>
        [DataMember(Name="totalTabCount", EmitDefaultValue=false)]
        public string TotalTabCount { get; set; }
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// Gets or Sets WebFormRecipientViewId
        /// </summary>
        [DataMember(Name="webFormRecipientViewId", EmitDefaultValue=false)]
        public string WebFormRecipientViewId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SealSign {\n");
            sb.Append("  AccessCode: ").Append(AccessCode).Append("\n");
            sb.Append("  AccessCodeMetadata: ").Append(AccessCodeMetadata).Append("\n");
            sb.Append("  AddAccessCodeToEmail: ").Append(AddAccessCodeToEmail).Append("\n");
            sb.Append("  AllowSystemOverrideForLockedRecipient: ").Append(AllowSystemOverrideForLockedRecipient).Append("\n");
            sb.Append("  AutoRespondedReason: ").Append(AutoRespondedReason).Append("\n");
            sb.Append("  BulkSendV2Recipient: ").Append(BulkSendV2Recipient).Append("\n");
            sb.Append("  ClientUserId: ").Append(ClientUserId).Append("\n");
            sb.Append("  CompletedCount: ").Append(CompletedCount).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  DeclinedDateTime: ").Append(DeclinedDateTime).Append("\n");
            sb.Append("  DeclinedReason: ").Append(DeclinedReason).Append("\n");
            sb.Append("  DeliveredDateTime: ").Append(DeliveredDateTime).Append("\n");
            sb.Append("  DeliveryMethod: ").Append(DeliveryMethod).Append("\n");
            sb.Append("  DeliveryMethodMetadata: ").Append(DeliveryMethodMetadata).Append("\n");
            sb.Append("  DesignatorId: ").Append(DesignatorId).Append("\n");
            sb.Append("  DesignatorIdGuid: ").Append(DesignatorIdGuid).Append("\n");
            sb.Append("  DocumentTemplateId: ").Append(DocumentTemplateId).Append("\n");
            sb.Append("  DocumentVisibility: ").Append(DocumentVisibility).Append("\n");
            sb.Append("  EmailNotification: ").Append(EmailNotification).Append("\n");
            sb.Append("  EmbeddedRecipientStartURL: ").Append(EmbeddedRecipientStartURL).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  FaxNumberMetadata: ").Append(FaxNumberMetadata).Append("\n");
            sb.Append("  IdCheckConfigurationName: ").Append(IdCheckConfigurationName).Append("\n");
            sb.Append("  IdCheckConfigurationNameMetadata: ").Append(IdCheckConfigurationNameMetadata).Append("\n");
            sb.Append("  IdCheckInformationInput: ").Append(IdCheckInformationInput).Append("\n");
            sb.Append("  IdentityVerification: ").Append(IdentityVerification).Append("\n");
            sb.Append("  InheritEmailNotificationConfiguration: ").Append(InheritEmailNotificationConfiguration).Append("\n");
            sb.Append("  LockedRecipientPhoneAuthEditable: ").Append(LockedRecipientPhoneAuthEditable).Append("\n");
            sb.Append("  LockedRecipientSmsEditable: ").Append(LockedRecipientSmsEditable).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  NoteMetadata: ").Append(NoteMetadata).Append("\n");
            sb.Append("  PhoneAuthentication: ").Append(PhoneAuthentication).Append("\n");
            sb.Append("  ProofFile: ").Append(ProofFile).Append("\n");
            sb.Append("  RecipientAttachments: ").Append(RecipientAttachments).Append("\n");
            sb.Append("  RecipientAuthenticationStatus: ").Append(RecipientAuthenticationStatus).Append("\n");
            sb.Append("  RecipientFeatureMetadata: ").Append(RecipientFeatureMetadata).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  RecipientIdGuid: ").Append(RecipientIdGuid).Append("\n");
            sb.Append("  RecipientSignatureProviders: ").Append(RecipientSignatureProviders).Append("\n");
            sb.Append("  RecipientType: ").Append(RecipientType).Append("\n");
            sb.Append("  RecipientTypeMetadata: ").Append(RecipientTypeMetadata).Append("\n");
            sb.Append("  RequireIdLookup: ").Append(RequireIdLookup).Append("\n");
            sb.Append("  RequireIdLookupMetadata: ").Append(RequireIdLookupMetadata).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  RoutingOrder: ").Append(RoutingOrder).Append("\n");
            sb.Append("  RoutingOrderMetadata: ").Append(RoutingOrderMetadata).Append("\n");
            sb.Append("  SentDateTime: ").Append(SentDateTime).Append("\n");
            sb.Append("  SignedDateTime: ").Append(SignedDateTime).Append("\n");
            sb.Append("  SmsAuthentication: ").Append(SmsAuthentication).Append("\n");
            sb.Append("  SocialAuthentications: ").Append(SocialAuthentications).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  SuppressEmails: ").Append(SuppressEmails).Append("\n");
            sb.Append("  Tabs: ").Append(Tabs).Append("\n");
            sb.Append("  TemplateLocked: ").Append(TemplateLocked).Append("\n");
            sb.Append("  TemplateRequired: ").Append(TemplateRequired).Append("\n");
            sb.Append("  TotalTabCount: ").Append(TotalTabCount).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  WebFormRecipientViewId: ").Append(WebFormRecipientViewId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SealSign);
        }

        /// <summary>
        /// Returns true if SealSign instances are equal
        /// </summary>
        /// <param name="other">Instance of SealSign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SealSign other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessCode == other.AccessCode ||
                    this.AccessCode != null &&
                    this.AccessCode.Equals(other.AccessCode)
                ) && 
                (
                    this.AccessCodeMetadata == other.AccessCodeMetadata ||
                    this.AccessCodeMetadata != null &&
                    this.AccessCodeMetadata.Equals(other.AccessCodeMetadata)
                ) && 
                (
                    this.AddAccessCodeToEmail == other.AddAccessCodeToEmail ||
                    this.AddAccessCodeToEmail != null &&
                    this.AddAccessCodeToEmail.Equals(other.AddAccessCodeToEmail)
                ) && 
                (
                    this.AllowSystemOverrideForLockedRecipient == other.AllowSystemOverrideForLockedRecipient ||
                    this.AllowSystemOverrideForLockedRecipient != null &&
                    this.AllowSystemOverrideForLockedRecipient.Equals(other.AllowSystemOverrideForLockedRecipient)
                ) && 
                (
                    this.AutoRespondedReason == other.AutoRespondedReason ||
                    this.AutoRespondedReason != null &&
                    this.AutoRespondedReason.Equals(other.AutoRespondedReason)
                ) && 
                (
                    this.BulkSendV2Recipient == other.BulkSendV2Recipient ||
                    this.BulkSendV2Recipient != null &&
                    this.BulkSendV2Recipient.Equals(other.BulkSendV2Recipient)
                ) && 
                (
                    this.ClientUserId == other.ClientUserId ||
                    this.ClientUserId != null &&
                    this.ClientUserId.Equals(other.ClientUserId)
                ) && 
                (
                    this.CompletedCount == other.CompletedCount ||
                    this.CompletedCount != null &&
                    this.CompletedCount.Equals(other.CompletedCount)
                ) && 
                (
                    this.CustomFields == other.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    this.DeclinedDateTime == other.DeclinedDateTime ||
                    this.DeclinedDateTime != null &&
                    this.DeclinedDateTime.Equals(other.DeclinedDateTime)
                ) && 
                (
                    this.DeclinedReason == other.DeclinedReason ||
                    this.DeclinedReason != null &&
                    this.DeclinedReason.Equals(other.DeclinedReason)
                ) && 
                (
                    this.DeliveredDateTime == other.DeliveredDateTime ||
                    this.DeliveredDateTime != null &&
                    this.DeliveredDateTime.Equals(other.DeliveredDateTime)
                ) && 
                (
                    this.DeliveryMethod == other.DeliveryMethod ||
                    this.DeliveryMethod != null &&
                    this.DeliveryMethod.Equals(other.DeliveryMethod)
                ) && 
                (
                    this.DeliveryMethodMetadata == other.DeliveryMethodMetadata ||
                    this.DeliveryMethodMetadata != null &&
                    this.DeliveryMethodMetadata.Equals(other.DeliveryMethodMetadata)
                ) && 
                (
                    this.DesignatorId == other.DesignatorId ||
                    this.DesignatorId != null &&
                    this.DesignatorId.Equals(other.DesignatorId)
                ) && 
                (
                    this.DesignatorIdGuid == other.DesignatorIdGuid ||
                    this.DesignatorIdGuid != null &&
                    this.DesignatorIdGuid.Equals(other.DesignatorIdGuid)
                ) && 
                (
                    this.DocumentTemplateId == other.DocumentTemplateId ||
                    this.DocumentTemplateId != null &&
                    this.DocumentTemplateId.Equals(other.DocumentTemplateId)
                ) && 
                (
                    this.DocumentVisibility == other.DocumentVisibility ||
                    this.DocumentVisibility != null &&
                    this.DocumentVisibility.SequenceEqual(other.DocumentVisibility)
                ) && 
                (
                    this.EmailNotification == other.EmailNotification ||
                    this.EmailNotification != null &&
                    this.EmailNotification.Equals(other.EmailNotification)
                ) && 
                (
                    this.EmbeddedRecipientStartURL == other.EmbeddedRecipientStartURL ||
                    this.EmbeddedRecipientStartURL != null &&
                    this.EmbeddedRecipientStartURL.Equals(other.EmbeddedRecipientStartURL)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.FaxNumber == other.FaxNumber ||
                    this.FaxNumber != null &&
                    this.FaxNumber.Equals(other.FaxNumber)
                ) && 
                (
                    this.FaxNumberMetadata == other.FaxNumberMetadata ||
                    this.FaxNumberMetadata != null &&
                    this.FaxNumberMetadata.Equals(other.FaxNumberMetadata)
                ) && 
                (
                    this.IdCheckConfigurationName == other.IdCheckConfigurationName ||
                    this.IdCheckConfigurationName != null &&
                    this.IdCheckConfigurationName.Equals(other.IdCheckConfigurationName)
                ) && 
                (
                    this.IdCheckConfigurationNameMetadata == other.IdCheckConfigurationNameMetadata ||
                    this.IdCheckConfigurationNameMetadata != null &&
                    this.IdCheckConfigurationNameMetadata.Equals(other.IdCheckConfigurationNameMetadata)
                ) && 
                (
                    this.IdCheckInformationInput == other.IdCheckInformationInput ||
                    this.IdCheckInformationInput != null &&
                    this.IdCheckInformationInput.Equals(other.IdCheckInformationInput)
                ) && 
                (
                    this.IdentityVerification == other.IdentityVerification ||
                    this.IdentityVerification != null &&
                    this.IdentityVerification.Equals(other.IdentityVerification)
                ) && 
                (
                    this.InheritEmailNotificationConfiguration == other.InheritEmailNotificationConfiguration ||
                    this.InheritEmailNotificationConfiguration != null &&
                    this.InheritEmailNotificationConfiguration.Equals(other.InheritEmailNotificationConfiguration)
                ) && 
                (
                    this.LockedRecipientPhoneAuthEditable == other.LockedRecipientPhoneAuthEditable ||
                    this.LockedRecipientPhoneAuthEditable != null &&
                    this.LockedRecipientPhoneAuthEditable.Equals(other.LockedRecipientPhoneAuthEditable)
                ) && 
                (
                    this.LockedRecipientSmsEditable == other.LockedRecipientSmsEditable ||
                    this.LockedRecipientSmsEditable != null &&
                    this.LockedRecipientSmsEditable.Equals(other.LockedRecipientSmsEditable)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Note == other.Note ||
                    this.Note != null &&
                    this.Note.Equals(other.Note)
                ) && 
                (
                    this.NoteMetadata == other.NoteMetadata ||
                    this.NoteMetadata != null &&
                    this.NoteMetadata.Equals(other.NoteMetadata)
                ) && 
                (
                    this.PhoneAuthentication == other.PhoneAuthentication ||
                    this.PhoneAuthentication != null &&
                    this.PhoneAuthentication.Equals(other.PhoneAuthentication)
                ) && 
                (
                    this.ProofFile == other.ProofFile ||
                    this.ProofFile != null &&
                    this.ProofFile.Equals(other.ProofFile)
                ) && 
                (
                    this.RecipientAttachments == other.RecipientAttachments ||
                    this.RecipientAttachments != null &&
                    this.RecipientAttachments.SequenceEqual(other.RecipientAttachments)
                ) && 
                (
                    this.RecipientAuthenticationStatus == other.RecipientAuthenticationStatus ||
                    this.RecipientAuthenticationStatus != null &&
                    this.RecipientAuthenticationStatus.Equals(other.RecipientAuthenticationStatus)
                ) && 
                (
                    this.RecipientFeatureMetadata == other.RecipientFeatureMetadata ||
                    this.RecipientFeatureMetadata != null &&
                    this.RecipientFeatureMetadata.SequenceEqual(other.RecipientFeatureMetadata)
                ) && 
                (
                    this.RecipientId == other.RecipientId ||
                    this.RecipientId != null &&
                    this.RecipientId.Equals(other.RecipientId)
                ) && 
                (
                    this.RecipientIdGuid == other.RecipientIdGuid ||
                    this.RecipientIdGuid != null &&
                    this.RecipientIdGuid.Equals(other.RecipientIdGuid)
                ) && 
                (
                    this.RecipientSignatureProviders == other.RecipientSignatureProviders ||
                    this.RecipientSignatureProviders != null &&
                    this.RecipientSignatureProviders.SequenceEqual(other.RecipientSignatureProviders)
                ) && 
                (
                    this.RecipientType == other.RecipientType ||
                    this.RecipientType != null &&
                    this.RecipientType.Equals(other.RecipientType)
                ) && 
                (
                    this.RecipientTypeMetadata == other.RecipientTypeMetadata ||
                    this.RecipientTypeMetadata != null &&
                    this.RecipientTypeMetadata.Equals(other.RecipientTypeMetadata)
                ) && 
                (
                    this.RequireIdLookup == other.RequireIdLookup ||
                    this.RequireIdLookup != null &&
                    this.RequireIdLookup.Equals(other.RequireIdLookup)
                ) && 
                (
                    this.RequireIdLookupMetadata == other.RequireIdLookupMetadata ||
                    this.RequireIdLookupMetadata != null &&
                    this.RequireIdLookupMetadata.Equals(other.RequireIdLookupMetadata)
                ) && 
                (
                    this.RoleName == other.RoleName ||
                    this.RoleName != null &&
                    this.RoleName.Equals(other.RoleName)
                ) && 
                (
                    this.RoutingOrder == other.RoutingOrder ||
                    this.RoutingOrder != null &&
                    this.RoutingOrder.Equals(other.RoutingOrder)
                ) && 
                (
                    this.RoutingOrderMetadata == other.RoutingOrderMetadata ||
                    this.RoutingOrderMetadata != null &&
                    this.RoutingOrderMetadata.Equals(other.RoutingOrderMetadata)
                ) && 
                (
                    this.SentDateTime == other.SentDateTime ||
                    this.SentDateTime != null &&
                    this.SentDateTime.Equals(other.SentDateTime)
                ) && 
                (
                    this.SignedDateTime == other.SignedDateTime ||
                    this.SignedDateTime != null &&
                    this.SignedDateTime.Equals(other.SignedDateTime)
                ) && 
                (
                    this.SmsAuthentication == other.SmsAuthentication ||
                    this.SmsAuthentication != null &&
                    this.SmsAuthentication.Equals(other.SmsAuthentication)
                ) && 
                (
                    this.SocialAuthentications == other.SocialAuthentications ||
                    this.SocialAuthentications != null &&
                    this.SocialAuthentications.SequenceEqual(other.SocialAuthentications)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusCode == other.StatusCode ||
                    this.StatusCode != null &&
                    this.StatusCode.Equals(other.StatusCode)
                ) && 
                (
                    this.SuppressEmails == other.SuppressEmails ||
                    this.SuppressEmails != null &&
                    this.SuppressEmails.Equals(other.SuppressEmails)
                ) && 
                (
                    this.Tabs == other.Tabs ||
                    this.Tabs != null &&
                    this.Tabs.Equals(other.Tabs)
                ) && 
                (
                    this.TemplateLocked == other.TemplateLocked ||
                    this.TemplateLocked != null &&
                    this.TemplateLocked.Equals(other.TemplateLocked)
                ) && 
                (
                    this.TemplateRequired == other.TemplateRequired ||
                    this.TemplateRequired != null &&
                    this.TemplateRequired.Equals(other.TemplateRequired)
                ) && 
                (
                    this.TotalTabCount == other.TotalTabCount ||
                    this.TotalTabCount != null &&
                    this.TotalTabCount.Equals(other.TotalTabCount)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.WebFormRecipientViewId == other.WebFormRecipientViewId ||
                    this.WebFormRecipientViewId != null &&
                    this.WebFormRecipientViewId.Equals(other.WebFormRecipientViewId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessCode != null)
                    hash = hash * 59 + this.AccessCode.GetHashCode();
                if (this.AccessCodeMetadata != null)
                    hash = hash * 59 + this.AccessCodeMetadata.GetHashCode();
                if (this.AddAccessCodeToEmail != null)
                    hash = hash * 59 + this.AddAccessCodeToEmail.GetHashCode();
                if (this.AllowSystemOverrideForLockedRecipient != null)
                    hash = hash * 59 + this.AllowSystemOverrideForLockedRecipient.GetHashCode();
                if (this.AutoRespondedReason != null)
                    hash = hash * 59 + this.AutoRespondedReason.GetHashCode();
                if (this.BulkSendV2Recipient != null)
                    hash = hash * 59 + this.BulkSendV2Recipient.GetHashCode();
                if (this.ClientUserId != null)
                    hash = hash * 59 + this.ClientUserId.GetHashCode();
                if (this.CompletedCount != null)
                    hash = hash * 59 + this.CompletedCount.GetHashCode();
                if (this.CustomFields != null)
                    hash = hash * 59 + this.CustomFields.GetHashCode();
                if (this.DeclinedDateTime != null)
                    hash = hash * 59 + this.DeclinedDateTime.GetHashCode();
                if (this.DeclinedReason != null)
                    hash = hash * 59 + this.DeclinedReason.GetHashCode();
                if (this.DeliveredDateTime != null)
                    hash = hash * 59 + this.DeliveredDateTime.GetHashCode();
                if (this.DeliveryMethod != null)
                    hash = hash * 59 + this.DeliveryMethod.GetHashCode();
                if (this.DeliveryMethodMetadata != null)
                    hash = hash * 59 + this.DeliveryMethodMetadata.GetHashCode();
                if (this.DesignatorId != null)
                    hash = hash * 59 + this.DesignatorId.GetHashCode();
                if (this.DesignatorIdGuid != null)
                    hash = hash * 59 + this.DesignatorIdGuid.GetHashCode();
                if (this.DocumentTemplateId != null)
                    hash = hash * 59 + this.DocumentTemplateId.GetHashCode();
                if (this.DocumentVisibility != null)
                    hash = hash * 59 + this.DocumentVisibility.GetHashCode();
                if (this.EmailNotification != null)
                    hash = hash * 59 + this.EmailNotification.GetHashCode();
                if (this.EmbeddedRecipientStartURL != null)
                    hash = hash * 59 + this.EmbeddedRecipientStartURL.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.FaxNumber != null)
                    hash = hash * 59 + this.FaxNumber.GetHashCode();
                if (this.FaxNumberMetadata != null)
                    hash = hash * 59 + this.FaxNumberMetadata.GetHashCode();
                if (this.IdCheckConfigurationName != null)
                    hash = hash * 59 + this.IdCheckConfigurationName.GetHashCode();
                if (this.IdCheckConfigurationNameMetadata != null)
                    hash = hash * 59 + this.IdCheckConfigurationNameMetadata.GetHashCode();
                if (this.IdCheckInformationInput != null)
                    hash = hash * 59 + this.IdCheckInformationInput.GetHashCode();
                if (this.IdentityVerification != null)
                    hash = hash * 59 + this.IdentityVerification.GetHashCode();
                if (this.InheritEmailNotificationConfiguration != null)
                    hash = hash * 59 + this.InheritEmailNotificationConfiguration.GetHashCode();
                if (this.LockedRecipientPhoneAuthEditable != null)
                    hash = hash * 59 + this.LockedRecipientPhoneAuthEditable.GetHashCode();
                if (this.LockedRecipientSmsEditable != null)
                    hash = hash * 59 + this.LockedRecipientSmsEditable.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Note != null)
                    hash = hash * 59 + this.Note.GetHashCode();
                if (this.NoteMetadata != null)
                    hash = hash * 59 + this.NoteMetadata.GetHashCode();
                if (this.PhoneAuthentication != null)
                    hash = hash * 59 + this.PhoneAuthentication.GetHashCode();
                if (this.ProofFile != null)
                    hash = hash * 59 + this.ProofFile.GetHashCode();
                if (this.RecipientAttachments != null)
                    hash = hash * 59 + this.RecipientAttachments.GetHashCode();
                if (this.RecipientAuthenticationStatus != null)
                    hash = hash * 59 + this.RecipientAuthenticationStatus.GetHashCode();
                if (this.RecipientFeatureMetadata != null)
                    hash = hash * 59 + this.RecipientFeatureMetadata.GetHashCode();
                if (this.RecipientId != null)
                    hash = hash * 59 + this.RecipientId.GetHashCode();
                if (this.RecipientIdGuid != null)
                    hash = hash * 59 + this.RecipientIdGuid.GetHashCode();
                if (this.RecipientSignatureProviders != null)
                    hash = hash * 59 + this.RecipientSignatureProviders.GetHashCode();
                if (this.RecipientType != null)
                    hash = hash * 59 + this.RecipientType.GetHashCode();
                if (this.RecipientTypeMetadata != null)
                    hash = hash * 59 + this.RecipientTypeMetadata.GetHashCode();
                if (this.RequireIdLookup != null)
                    hash = hash * 59 + this.RequireIdLookup.GetHashCode();
                if (this.RequireIdLookupMetadata != null)
                    hash = hash * 59 + this.RequireIdLookupMetadata.GetHashCode();
                if (this.RoleName != null)
                    hash = hash * 59 + this.RoleName.GetHashCode();
                if (this.RoutingOrder != null)
                    hash = hash * 59 + this.RoutingOrder.GetHashCode();
                if (this.RoutingOrderMetadata != null)
                    hash = hash * 59 + this.RoutingOrderMetadata.GetHashCode();
                if (this.SentDateTime != null)
                    hash = hash * 59 + this.SentDateTime.GetHashCode();
                if (this.SignedDateTime != null)
                    hash = hash * 59 + this.SignedDateTime.GetHashCode();
                if (this.SmsAuthentication != null)
                    hash = hash * 59 + this.SmsAuthentication.GetHashCode();
                if (this.SocialAuthentications != null)
                    hash = hash * 59 + this.SocialAuthentications.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusCode != null)
                    hash = hash * 59 + this.StatusCode.GetHashCode();
                if (this.SuppressEmails != null)
                    hash = hash * 59 + this.SuppressEmails.GetHashCode();
                if (this.Tabs != null)
                    hash = hash * 59 + this.Tabs.GetHashCode();
                if (this.TemplateLocked != null)
                    hash = hash * 59 + this.TemplateLocked.GetHashCode();
                if (this.TemplateRequired != null)
                    hash = hash * 59 + this.TemplateRequired.GetHashCode();
                if (this.TotalTabCount != null)
                    hash = hash * 59 + this.TotalTabCount.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.WebFormRecipientViewId != null)
                    hash = hash * 59 + this.WebFormRecipientViewId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
