/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// User information.
    /// </summary>
    [DataContract]
    public partial class UserInformation :  IEquatable<UserInformation>, IValidatableObject
    {
        public UserInformation()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserInformation" /> class.
        /// </summary>
        /// <param name="ActivationAccessCode">The activation code the new user must enter when activating their account..</param>
        /// <param name="Company">Company.</param>
        /// <param name="ConnectConfigurations">ConnectConfigurations.</param>
        /// <param name="CountryCode">CountryCode.</param>
        /// <param name="CreatedDateTime">Indicates the date and time the item was created..</param>
        /// <param name="CustomSettings">The name/value pair information for the user custom setting..</param>
        /// <param name="DefaultAccountId">DefaultAccountId.</param>
        /// <param name="Email">Email.</param>
        /// <param name="EnableConnectForUser">Specifies whether the user is enabled for updates from DocuSign Connect. Valid values: true or false..</param>
        /// <param name="ErrorDetails">Array or errors..</param>
        /// <param name="FirstName">The user&#39;s first name.  Maximum Length: 50 characters..</param>
        /// <param name="ForgottenPasswordInfo">A complex element containing up to four Question/Answer pairs for forgotten password information..</param>
        /// <param name="GroupList">A list of the group information for groups to add the user to. Group information can be found by calling [ML:GET group information]. The only required parameter is groupId.   The parameters are:  * groupId - The DocuSign group ID for the group. * groupName - The name of the group * permissionProfileId - The ID of the permission profile associated with the group. * groupType - The group type. .</param>
        /// <param name="HasRemoteNotary">HasRemoteNotary.</param>
        /// <param name="HomeAddress">Specifies the email for the signing host. It is a Required element for In Person Signers recipient Type.  Maximum Length: 100 characters..</param>
        /// <param name="InitialsImageUri">Contains the URI for an endpoint that you can use to retrieve the initials image..</param>
        /// <param name="IsAdmin">Determines if the feature set is actively set as part of the plan..</param>
        /// <param name="IsAlternateAdmin">IsAlternateAdmin.</param>
        /// <param name="IsManagedByScim">IsManagedByScim.</param>
        /// <param name="IsMembershipManagedByScim">IsMembershipManagedByScim.</param>
        /// <param name="IsNAREnabled">IsNAREnabled.</param>
        /// <param name="JobTitle">JobTitle.</param>
        /// <param name="LastLogin">Shows the date-time when the user last logged on to the system..</param>
        /// <param name="LastName">The user&#39;s last name.  Maximum Length: 50 characters..</param>
        /// <param name="LicenseStatus">LicenseStatus.</param>
        /// <param name="LicenseType">LicenseType.</param>
        /// <param name="LoginStatus">Shows the current status of the user&#39;s password. Possible values are:   * password_reset * password_active * password_expired * password_locked * password_reset_failed  .</param>
        /// <param name="MiddleName">The user&#39;s middle name.  Maximum Length: 50 characters..</param>
        /// <param name="Password">Password.</param>
        /// <param name="PasswordExpiration">PasswordExpiration.</param>
        /// <param name="PermissionProfileId">PermissionProfileId.</param>
        /// <param name="PermissionProfileName">PermissionProfileName.</param>
        /// <param name="ProfileImageUri">ProfileImageUri.</param>
        /// <param name="SendActivationEmail">SendActivationEmail.</param>
        /// <param name="SendActivationOnInvalidLogin">When set to **true**, specifies that an additional activation email is sent to the user if they fail a log on before activating their account. .</param>
        /// <param name="SignatureImageUri">Contains the URI for an endpoint that you can use to retrieve the signature image..</param>
        /// <param name="Subscribe">Subscribe.</param>
        /// <param name="SuffixName">The suffix for the user&#39;s name.   Maximum Length: 50 characters. .</param>
        /// <param name="Title">The title of the user..</param>
        /// <param name="Uri">Uri.</param>
        /// <param name="UserAddedToAccountDateTime">UserAddedToAccountDateTime.</param>
        /// <param name="UserId">UserId.</param>
        /// <param name="UserName">UserName.</param>
        /// <param name="UserProfileLastModifiedDate">UserProfileLastModifiedDate.</param>
        /// <param name="UserSettings"> The name/value pair information for user settings. These determine the actions that a user can take in the account. The &#x60;[ML:userSettings]&#x60; are listed and described below..</param>
        /// <param name="UserStatus">UserStatus.</param>
        /// <param name="UserType">UserType.</param>
        /// <param name="WorkAddress">WorkAddress.</param>
        public UserInformation(string ActivationAccessCode = default(string), string Company = default(string), List<ConnectUserObject> ConnectConfigurations = default(List<ConnectUserObject>), string CountryCode = default(string), string CreatedDateTime = default(string), List<NameValue> CustomSettings = default(List<NameValue>), string DefaultAccountId = default(string), string Email = default(string), string EnableConnectForUser = default(string), ErrorDetails ErrorDetails = default(ErrorDetails), string FirstName = default(string), ForgottenPasswordInformation ForgottenPasswordInfo = default(ForgottenPasswordInformation), List<Group> GroupList = default(List<Group>), bool? HasRemoteNotary = default(bool?), AddressInformation HomeAddress = default(AddressInformation), string InitialsImageUri = default(string), string IsAdmin = default(string), string IsAlternateAdmin = default(string), string IsManagedByScim = default(string), string IsMembershipManagedByScim = default(string), string IsNAREnabled = default(string), string JobTitle = default(string), string LastLogin = default(string), string LastName = default(string), string LicenseStatus = default(string), string LicenseType = default(string), string LoginStatus = default(string), string MiddleName = default(string), string Password = default(string), string PasswordExpiration = default(string), string PermissionProfileId = default(string), string PermissionProfileName = default(string), string ProfileImageUri = default(string), string SendActivationEmail = default(string), string SendActivationOnInvalidLogin = default(string), string SignatureImageUri = default(string), string Subscribe = default(string), string SuffixName = default(string), string Title = default(string), string Uri = default(string), string UserAddedToAccountDateTime = default(string), string UserId = default(string), string UserName = default(string), string UserProfileLastModifiedDate = default(string), UserSettingsInformation UserSettings = default(UserSettingsInformation), string UserStatus = default(string), string UserType = default(string), AddressInformation WorkAddress = default(AddressInformation))
        {
            this.ActivationAccessCode = ActivationAccessCode;
            this.Company = Company;
            this.ConnectConfigurations = ConnectConfigurations;
            this.CountryCode = CountryCode;
            this.CreatedDateTime = CreatedDateTime;
            this.CustomSettings = CustomSettings;
            this.DefaultAccountId = DefaultAccountId;
            this.Email = Email;
            this.EnableConnectForUser = EnableConnectForUser;
            this.ErrorDetails = ErrorDetails;
            this.FirstName = FirstName;
            this.ForgottenPasswordInfo = ForgottenPasswordInfo;
            this.GroupList = GroupList;
            this.HasRemoteNotary = HasRemoteNotary;
            this.HomeAddress = HomeAddress;
            this.InitialsImageUri = InitialsImageUri;
            this.IsAdmin = IsAdmin;
            this.IsAlternateAdmin = IsAlternateAdmin;
            this.IsManagedByScim = IsManagedByScim;
            this.IsMembershipManagedByScim = IsMembershipManagedByScim;
            this.IsNAREnabled = IsNAREnabled;
            this.JobTitle = JobTitle;
            this.LastLogin = LastLogin;
            this.LastName = LastName;
            this.LicenseStatus = LicenseStatus;
            this.LicenseType = LicenseType;
            this.LoginStatus = LoginStatus;
            this.MiddleName = MiddleName;
            this.Password = Password;
            this.PasswordExpiration = PasswordExpiration;
            this.PermissionProfileId = PermissionProfileId;
            this.PermissionProfileName = PermissionProfileName;
            this.ProfileImageUri = ProfileImageUri;
            this.SendActivationEmail = SendActivationEmail;
            this.SendActivationOnInvalidLogin = SendActivationOnInvalidLogin;
            this.SignatureImageUri = SignatureImageUri;
            this.Subscribe = Subscribe;
            this.SuffixName = SuffixName;
            this.Title = Title;
            this.Uri = Uri;
            this.UserAddedToAccountDateTime = UserAddedToAccountDateTime;
            this.UserId = UserId;
            this.UserName = UserName;
            this.UserProfileLastModifiedDate = UserProfileLastModifiedDate;
            this.UserSettings = UserSettings;
            this.UserStatus = UserStatus;
            this.UserType = UserType;
            this.WorkAddress = WorkAddress;
        }
        
        /// <summary>
        /// The activation code the new user must enter when activating their account.
        /// </summary>
        /// <value>The activation code the new user must enter when activating their account.</value>
        [DataMember(Name="activationAccessCode", EmitDefaultValue=false)]
        public string ActivationAccessCode { get; set; }
        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }
        /// <summary>
        /// Gets or Sets ConnectConfigurations
        /// </summary>
        [DataMember(Name="connectConfigurations", EmitDefaultValue=false)]
        public List<ConnectUserObject> ConnectConfigurations { get; set; }
        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }
        /// <summary>
        /// Indicates the date and time the item was created.
        /// </summary>
        /// <value>Indicates the date and time the item was created.</value>
        [DataMember(Name="createdDateTime", EmitDefaultValue=false)]
        public string CreatedDateTime { get; set; }
        /// <summary>
        /// The name/value pair information for the user custom setting.
        /// </summary>
        /// <value>The name/value pair information for the user custom setting.</value>
        [DataMember(Name="customSettings", EmitDefaultValue=false)]
        public List<NameValue> CustomSettings { get; set; }
        /// <summary>
        /// Gets or Sets DefaultAccountId
        /// </summary>
        [DataMember(Name="defaultAccountId", EmitDefaultValue=false)]
        public string DefaultAccountId { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Specifies whether the user is enabled for updates from DocuSign Connect. Valid values: true or false.
        /// </summary>
        /// <value>Specifies whether the user is enabled for updates from DocuSign Connect. Valid values: true or false.</value>
        [DataMember(Name="enableConnectForUser", EmitDefaultValue=false)]
        public string EnableConnectForUser { get; set; }
        /// <summary>
        /// Array or errors.
        /// </summary>
        /// <value>Array or errors.</value>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// The user&#39;s first name.  Maximum Length: 50 characters.
        /// </summary>
        /// <value>The user&#39;s first name.  Maximum Length: 50 characters.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// A complex element containing up to four Question/Answer pairs for forgotten password information.
        /// </summary>
        /// <value>A complex element containing up to four Question/Answer pairs for forgotten password information.</value>
        [DataMember(Name="forgottenPasswordInfo", EmitDefaultValue=false)]
        public ForgottenPasswordInformation ForgottenPasswordInfo { get; set; }
        /// <summary>
        /// A list of the group information for groups to add the user to. Group information can be found by calling [ML:GET group information]. The only required parameter is groupId.   The parameters are:  * groupId - The DocuSign group ID for the group. * groupName - The name of the group * permissionProfileId - The ID of the permission profile associated with the group. * groupType - The group type. 
        /// </summary>
        /// <value>A list of the group information for groups to add the user to. Group information can be found by calling [ML:GET group information]. The only required parameter is groupId.   The parameters are:  * groupId - The DocuSign group ID for the group. * groupName - The name of the group * permissionProfileId - The ID of the permission profile associated with the group. * groupType - The group type. </value>
        [DataMember(Name="groupList", EmitDefaultValue=false)]
        public List<Group> GroupList { get; set; }
        /// <summary>
        /// Gets or Sets HasRemoteNotary
        /// </summary>
        [DataMember(Name="hasRemoteNotary", EmitDefaultValue=false)]
        public bool? HasRemoteNotary { get; set; }
        /// <summary>
        /// Specifies the email for the signing host. It is a Required element for In Person Signers recipient Type.  Maximum Length: 100 characters.
        /// </summary>
        /// <value>Specifies the email for the signing host. It is a Required element for In Person Signers recipient Type.  Maximum Length: 100 characters.</value>
        [DataMember(Name="homeAddress", EmitDefaultValue=false)]
        public AddressInformation HomeAddress { get; set; }
        /// <summary>
        /// Contains the URI for an endpoint that you can use to retrieve the initials image.
        /// </summary>
        /// <value>Contains the URI for an endpoint that you can use to retrieve the initials image.</value>
        [DataMember(Name="initialsImageUri", EmitDefaultValue=false)]
        public string InitialsImageUri { get; set; }
        /// <summary>
        /// Determines if the feature set is actively set as part of the plan.
        /// </summary>
        /// <value>Determines if the feature set is actively set as part of the plan.</value>
        [DataMember(Name="isAdmin", EmitDefaultValue=false)]
        public string IsAdmin { get; set; }
        /// <summary>
        /// Gets or Sets IsAlternateAdmin
        /// </summary>
        [DataMember(Name="isAlternateAdmin", EmitDefaultValue=false)]
        public string IsAlternateAdmin { get; set; }
        /// <summary>
        /// Gets or Sets IsManagedByScim
        /// </summary>
        [DataMember(Name="isManagedByScim", EmitDefaultValue=false)]
        public string IsManagedByScim { get; set; }
        /// <summary>
        /// Gets or Sets IsMembershipManagedByScim
        /// </summary>
        [DataMember(Name="isMembershipManagedByScim", EmitDefaultValue=false)]
        public string IsMembershipManagedByScim { get; set; }
        /// <summary>
        /// Gets or Sets IsNAREnabled
        /// </summary>
        [DataMember(Name="isNAREnabled", EmitDefaultValue=false)]
        public string IsNAREnabled { get; set; }
        /// <summary>
        /// Gets or Sets JobTitle
        /// </summary>
        [DataMember(Name="jobTitle", EmitDefaultValue=false)]
        public string JobTitle { get; set; }
        /// <summary>
        /// Shows the date-time when the user last logged on to the system.
        /// </summary>
        /// <value>Shows the date-time when the user last logged on to the system.</value>
        [DataMember(Name="lastLogin", EmitDefaultValue=false)]
        public string LastLogin { get; set; }
        /// <summary>
        /// The user&#39;s last name.  Maximum Length: 50 characters.
        /// </summary>
        /// <value>The user&#39;s last name.  Maximum Length: 50 characters.</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Gets or Sets LicenseStatus
        /// </summary>
        [DataMember(Name="licenseStatus", EmitDefaultValue=false)]
        public string LicenseStatus { get; set; }
        /// <summary>
        /// Gets or Sets LicenseType
        /// </summary>
        [DataMember(Name="licenseType", EmitDefaultValue=false)]
        public string LicenseType { get; set; }
        /// <summary>
        /// Shows the current status of the user&#39;s password. Possible values are:   * password_reset * password_active * password_expired * password_locked * password_reset_failed  
        /// </summary>
        /// <value>Shows the current status of the user&#39;s password. Possible values are:   * password_reset * password_active * password_expired * password_locked * password_reset_failed  </value>
        [DataMember(Name="loginStatus", EmitDefaultValue=false)]
        public string LoginStatus { get; set; }
        /// <summary>
        /// The user&#39;s middle name.  Maximum Length: 50 characters.
        /// </summary>
        /// <value>The user&#39;s middle name.  Maximum Length: 50 characters.</value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// Gets or Sets PasswordExpiration
        /// </summary>
        [DataMember(Name="passwordExpiration", EmitDefaultValue=false)]
        public string PasswordExpiration { get; set; }
        /// <summary>
        /// Gets or Sets PermissionProfileId
        /// </summary>
        [DataMember(Name="permissionProfileId", EmitDefaultValue=false)]
        public string PermissionProfileId { get; set; }
        /// <summary>
        /// Gets or Sets PermissionProfileName
        /// </summary>
        [DataMember(Name="permissionProfileName", EmitDefaultValue=false)]
        public string PermissionProfileName { get; set; }
        /// <summary>
        /// Gets or Sets ProfileImageUri
        /// </summary>
        [DataMember(Name="profileImageUri", EmitDefaultValue=false)]
        public string ProfileImageUri { get; set; }
        /// <summary>
        /// Gets or Sets SendActivationEmail
        /// </summary>
        [DataMember(Name="sendActivationEmail", EmitDefaultValue=false)]
        public string SendActivationEmail { get; set; }
        /// <summary>
        /// When set to **true**, specifies that an additional activation email is sent to the user if they fail a log on before activating their account. 
        /// </summary>
        /// <value>When set to **true**, specifies that an additional activation email is sent to the user if they fail a log on before activating their account. </value>
        [DataMember(Name="sendActivationOnInvalidLogin", EmitDefaultValue=false)]
        public string SendActivationOnInvalidLogin { get; set; }
        /// <summary>
        /// Contains the URI for an endpoint that you can use to retrieve the signature image.
        /// </summary>
        /// <value>Contains the URI for an endpoint that you can use to retrieve the signature image.</value>
        [DataMember(Name="signatureImageUri", EmitDefaultValue=false)]
        public string SignatureImageUri { get; set; }
        /// <summary>
        /// Gets or Sets Subscribe
        /// </summary>
        [DataMember(Name="subscribe", EmitDefaultValue=false)]
        public string Subscribe { get; set; }
        /// <summary>
        /// The suffix for the user&#39;s name.   Maximum Length: 50 characters. 
        /// </summary>
        /// <value>The suffix for the user&#39;s name.   Maximum Length: 50 characters. </value>
        [DataMember(Name="suffixName", EmitDefaultValue=false)]
        public string SuffixName { get; set; }
        /// <summary>
        /// The title of the user.
        /// </summary>
        /// <value>The title of the user.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }
        /// <summary>
        /// Gets or Sets UserAddedToAccountDateTime
        /// </summary>
        [DataMember(Name="userAddedToAccountDateTime", EmitDefaultValue=false)]
        public string UserAddedToAccountDateTime { get; set; }
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }
        /// <summary>
        /// Gets or Sets UserProfileLastModifiedDate
        /// </summary>
        [DataMember(Name="userProfileLastModifiedDate", EmitDefaultValue=false)]
        public string UserProfileLastModifiedDate { get; set; }
        /// <summary>
        ///  The name/value pair information for user settings. These determine the actions that a user can take in the account. The &#x60;[ML:userSettings]&#x60; are listed and described below.
        /// </summary>
        /// <value> The name/value pair information for user settings. These determine the actions that a user can take in the account. The &#x60;[ML:userSettings]&#x60; are listed and described below.</value>
        [DataMember(Name="userSettings", EmitDefaultValue=false)]
        public UserSettingsInformation UserSettings { get; set; }
        /// <summary>
        /// Gets or Sets UserStatus
        /// </summary>
        [DataMember(Name="userStatus", EmitDefaultValue=false)]
        public string UserStatus { get; set; }
        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name="userType", EmitDefaultValue=false)]
        public string UserType { get; set; }
        /// <summary>
        /// Gets or Sets WorkAddress
        /// </summary>
        [DataMember(Name="workAddress", EmitDefaultValue=false)]
        public AddressInformation WorkAddress { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserInformation {\n");
            sb.Append("  ActivationAccessCode: ").Append(ActivationAccessCode).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  ConnectConfigurations: ").Append(ConnectConfigurations).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  CustomSettings: ").Append(CustomSettings).Append("\n");
            sb.Append("  DefaultAccountId: ").Append(DefaultAccountId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EnableConnectForUser: ").Append(EnableConnectForUser).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  ForgottenPasswordInfo: ").Append(ForgottenPasswordInfo).Append("\n");
            sb.Append("  GroupList: ").Append(GroupList).Append("\n");
            sb.Append("  HasRemoteNotary: ").Append(HasRemoteNotary).Append("\n");
            sb.Append("  HomeAddress: ").Append(HomeAddress).Append("\n");
            sb.Append("  InitialsImageUri: ").Append(InitialsImageUri).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  IsAlternateAdmin: ").Append(IsAlternateAdmin).Append("\n");
            sb.Append("  IsManagedByScim: ").Append(IsManagedByScim).Append("\n");
            sb.Append("  IsMembershipManagedByScim: ").Append(IsMembershipManagedByScim).Append("\n");
            sb.Append("  IsNAREnabled: ").Append(IsNAREnabled).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LicenseStatus: ").Append(LicenseStatus).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  LoginStatus: ").Append(LoginStatus).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PasswordExpiration: ").Append(PasswordExpiration).Append("\n");
            sb.Append("  PermissionProfileId: ").Append(PermissionProfileId).Append("\n");
            sb.Append("  PermissionProfileName: ").Append(PermissionProfileName).Append("\n");
            sb.Append("  ProfileImageUri: ").Append(ProfileImageUri).Append("\n");
            sb.Append("  SendActivationEmail: ").Append(SendActivationEmail).Append("\n");
            sb.Append("  SendActivationOnInvalidLogin: ").Append(SendActivationOnInvalidLogin).Append("\n");
            sb.Append("  SignatureImageUri: ").Append(SignatureImageUri).Append("\n");
            sb.Append("  Subscribe: ").Append(Subscribe).Append("\n");
            sb.Append("  SuffixName: ").Append(SuffixName).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  UserAddedToAccountDateTime: ").Append(UserAddedToAccountDateTime).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  UserProfileLastModifiedDate: ").Append(UserProfileLastModifiedDate).Append("\n");
            sb.Append("  UserSettings: ").Append(UserSettings).Append("\n");
            sb.Append("  UserStatus: ").Append(UserStatus).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  WorkAddress: ").Append(WorkAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserInformation);
        }

        /// <summary>
        /// Returns true if UserInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of UserInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ActivationAccessCode == other.ActivationAccessCode ||
                    this.ActivationAccessCode != null &&
                    this.ActivationAccessCode.Equals(other.ActivationAccessCode)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.ConnectConfigurations == other.ConnectConfigurations ||
                    this.ConnectConfigurations != null &&
                    this.ConnectConfigurations.SequenceEqual(other.ConnectConfigurations)
                ) && 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.CreatedDateTime == other.CreatedDateTime ||
                    this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(other.CreatedDateTime)
                ) && 
                (
                    this.CustomSettings == other.CustomSettings ||
                    this.CustomSettings != null &&
                    this.CustomSettings.SequenceEqual(other.CustomSettings)
                ) && 
                (
                    this.DefaultAccountId == other.DefaultAccountId ||
                    this.DefaultAccountId != null &&
                    this.DefaultAccountId.Equals(other.DefaultAccountId)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.EnableConnectForUser == other.EnableConnectForUser ||
                    this.EnableConnectForUser != null &&
                    this.EnableConnectForUser.Equals(other.EnableConnectForUser)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.ForgottenPasswordInfo == other.ForgottenPasswordInfo ||
                    this.ForgottenPasswordInfo != null &&
                    this.ForgottenPasswordInfo.Equals(other.ForgottenPasswordInfo)
                ) && 
                (
                    this.GroupList == other.GroupList ||
                    this.GroupList != null &&
                    this.GroupList.SequenceEqual(other.GroupList)
                ) && 
                (
                    this.HasRemoteNotary == other.HasRemoteNotary ||
                    this.HasRemoteNotary != null &&
                    this.HasRemoteNotary.Equals(other.HasRemoteNotary)
                ) && 
                (
                    this.HomeAddress == other.HomeAddress ||
                    this.HomeAddress != null &&
                    this.HomeAddress.Equals(other.HomeAddress)
                ) && 
                (
                    this.InitialsImageUri == other.InitialsImageUri ||
                    this.InitialsImageUri != null &&
                    this.InitialsImageUri.Equals(other.InitialsImageUri)
                ) && 
                (
                    this.IsAdmin == other.IsAdmin ||
                    this.IsAdmin != null &&
                    this.IsAdmin.Equals(other.IsAdmin)
                ) && 
                (
                    this.IsAlternateAdmin == other.IsAlternateAdmin ||
                    this.IsAlternateAdmin != null &&
                    this.IsAlternateAdmin.Equals(other.IsAlternateAdmin)
                ) && 
                (
                    this.IsManagedByScim == other.IsManagedByScim ||
                    this.IsManagedByScim != null &&
                    this.IsManagedByScim.Equals(other.IsManagedByScim)
                ) && 
                (
                    this.IsMembershipManagedByScim == other.IsMembershipManagedByScim ||
                    this.IsMembershipManagedByScim != null &&
                    this.IsMembershipManagedByScim.Equals(other.IsMembershipManagedByScim)
                ) && 
                (
                    this.IsNAREnabled == other.IsNAREnabled ||
                    this.IsNAREnabled != null &&
                    this.IsNAREnabled.Equals(other.IsNAREnabled)
                ) && 
                (
                    this.JobTitle == other.JobTitle ||
                    this.JobTitle != null &&
                    this.JobTitle.Equals(other.JobTitle)
                ) && 
                (
                    this.LastLogin == other.LastLogin ||
                    this.LastLogin != null &&
                    this.LastLogin.Equals(other.LastLogin)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.LicenseStatus == other.LicenseStatus ||
                    this.LicenseStatus != null &&
                    this.LicenseStatus.Equals(other.LicenseStatus)
                ) && 
                (
                    this.LicenseType == other.LicenseType ||
                    this.LicenseType != null &&
                    this.LicenseType.Equals(other.LicenseType)
                ) && 
                (
                    this.LoginStatus == other.LoginStatus ||
                    this.LoginStatus != null &&
                    this.LoginStatus.Equals(other.LoginStatus)
                ) && 
                (
                    this.MiddleName == other.MiddleName ||
                    this.MiddleName != null &&
                    this.MiddleName.Equals(other.MiddleName)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.PasswordExpiration == other.PasswordExpiration ||
                    this.PasswordExpiration != null &&
                    this.PasswordExpiration.Equals(other.PasswordExpiration)
                ) && 
                (
                    this.PermissionProfileId == other.PermissionProfileId ||
                    this.PermissionProfileId != null &&
                    this.PermissionProfileId.Equals(other.PermissionProfileId)
                ) && 
                (
                    this.PermissionProfileName == other.PermissionProfileName ||
                    this.PermissionProfileName != null &&
                    this.PermissionProfileName.Equals(other.PermissionProfileName)
                ) && 
                (
                    this.ProfileImageUri == other.ProfileImageUri ||
                    this.ProfileImageUri != null &&
                    this.ProfileImageUri.Equals(other.ProfileImageUri)
                ) && 
                (
                    this.SendActivationEmail == other.SendActivationEmail ||
                    this.SendActivationEmail != null &&
                    this.SendActivationEmail.Equals(other.SendActivationEmail)
                ) && 
                (
                    this.SendActivationOnInvalidLogin == other.SendActivationOnInvalidLogin ||
                    this.SendActivationOnInvalidLogin != null &&
                    this.SendActivationOnInvalidLogin.Equals(other.SendActivationOnInvalidLogin)
                ) && 
                (
                    this.SignatureImageUri == other.SignatureImageUri ||
                    this.SignatureImageUri != null &&
                    this.SignatureImageUri.Equals(other.SignatureImageUri)
                ) && 
                (
                    this.Subscribe == other.Subscribe ||
                    this.Subscribe != null &&
                    this.Subscribe.Equals(other.Subscribe)
                ) && 
                (
                    this.SuffixName == other.SuffixName ||
                    this.SuffixName != null &&
                    this.SuffixName.Equals(other.SuffixName)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Uri == other.Uri ||
                    this.Uri != null &&
                    this.Uri.Equals(other.Uri)
                ) && 
                (
                    this.UserAddedToAccountDateTime == other.UserAddedToAccountDateTime ||
                    this.UserAddedToAccountDateTime != null &&
                    this.UserAddedToAccountDateTime.Equals(other.UserAddedToAccountDateTime)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.UserName == other.UserName ||
                    this.UserName != null &&
                    this.UserName.Equals(other.UserName)
                ) && 
                (
                    this.UserProfileLastModifiedDate == other.UserProfileLastModifiedDate ||
                    this.UserProfileLastModifiedDate != null &&
                    this.UserProfileLastModifiedDate.Equals(other.UserProfileLastModifiedDate)
                ) && 
                (
                    this.UserSettings == other.UserSettings ||
                    this.UserSettings != null &&
                    this.UserSettings.Equals(other.UserSettings)
                ) && 
                (
                    this.UserStatus == other.UserStatus ||
                    this.UserStatus != null &&
                    this.UserStatus.Equals(other.UserStatus)
                ) && 
                (
                    this.UserType == other.UserType ||
                    this.UserType != null &&
                    this.UserType.Equals(other.UserType)
                ) && 
                (
                    this.WorkAddress == other.WorkAddress ||
                    this.WorkAddress != null &&
                    this.WorkAddress.Equals(other.WorkAddress)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ActivationAccessCode != null)
                    hash = hash * 59 + this.ActivationAccessCode.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.ConnectConfigurations != null)
                    hash = hash * 59 + this.ConnectConfigurations.GetHashCode();
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.CreatedDateTime != null)
                    hash = hash * 59 + this.CreatedDateTime.GetHashCode();
                if (this.CustomSettings != null)
                    hash = hash * 59 + this.CustomSettings.GetHashCode();
                if (this.DefaultAccountId != null)
                    hash = hash * 59 + this.DefaultAccountId.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.EnableConnectForUser != null)
                    hash = hash * 59 + this.EnableConnectForUser.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.ForgottenPasswordInfo != null)
                    hash = hash * 59 + this.ForgottenPasswordInfo.GetHashCode();
                if (this.GroupList != null)
                    hash = hash * 59 + this.GroupList.GetHashCode();
                if (this.HasRemoteNotary != null)
                    hash = hash * 59 + this.HasRemoteNotary.GetHashCode();
                if (this.HomeAddress != null)
                    hash = hash * 59 + this.HomeAddress.GetHashCode();
                if (this.InitialsImageUri != null)
                    hash = hash * 59 + this.InitialsImageUri.GetHashCode();
                if (this.IsAdmin != null)
                    hash = hash * 59 + this.IsAdmin.GetHashCode();
                if (this.IsAlternateAdmin != null)
                    hash = hash * 59 + this.IsAlternateAdmin.GetHashCode();
                if (this.IsManagedByScim != null)
                    hash = hash * 59 + this.IsManagedByScim.GetHashCode();
                if (this.IsMembershipManagedByScim != null)
                    hash = hash * 59 + this.IsMembershipManagedByScim.GetHashCode();
                if (this.IsNAREnabled != null)
                    hash = hash * 59 + this.IsNAREnabled.GetHashCode();
                if (this.JobTitle != null)
                    hash = hash * 59 + this.JobTitle.GetHashCode();
                if (this.LastLogin != null)
                    hash = hash * 59 + this.LastLogin.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.LicenseStatus != null)
                    hash = hash * 59 + this.LicenseStatus.GetHashCode();
                if (this.LicenseType != null)
                    hash = hash * 59 + this.LicenseType.GetHashCode();
                if (this.LoginStatus != null)
                    hash = hash * 59 + this.LoginStatus.GetHashCode();
                if (this.MiddleName != null)
                    hash = hash * 59 + this.MiddleName.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.PasswordExpiration != null)
                    hash = hash * 59 + this.PasswordExpiration.GetHashCode();
                if (this.PermissionProfileId != null)
                    hash = hash * 59 + this.PermissionProfileId.GetHashCode();
                if (this.PermissionProfileName != null)
                    hash = hash * 59 + this.PermissionProfileName.GetHashCode();
                if (this.ProfileImageUri != null)
                    hash = hash * 59 + this.ProfileImageUri.GetHashCode();
                if (this.SendActivationEmail != null)
                    hash = hash * 59 + this.SendActivationEmail.GetHashCode();
                if (this.SendActivationOnInvalidLogin != null)
                    hash = hash * 59 + this.SendActivationOnInvalidLogin.GetHashCode();
                if (this.SignatureImageUri != null)
                    hash = hash * 59 + this.SignatureImageUri.GetHashCode();
                if (this.Subscribe != null)
                    hash = hash * 59 + this.Subscribe.GetHashCode();
                if (this.SuffixName != null)
                    hash = hash * 59 + this.SuffixName.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Uri != null)
                    hash = hash * 59 + this.Uri.GetHashCode();
                if (this.UserAddedToAccountDateTime != null)
                    hash = hash * 59 + this.UserAddedToAccountDateTime.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hash = hash * 59 + this.UserName.GetHashCode();
                if (this.UserProfileLastModifiedDate != null)
                    hash = hash * 59 + this.UserProfileLastModifiedDate.GetHashCode();
                if (this.UserSettings != null)
                    hash = hash * 59 + this.UserSettings.GetHashCode();
                if (this.UserStatus != null)
                    hash = hash * 59 + this.UserStatus.GetHashCode();
                if (this.UserType != null)
                    hash = hash * 59 + this.UserType.GetHashCode();
                if (this.WorkAddress != null)
                    hash = hash * 59 + this.WorkAddress.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
